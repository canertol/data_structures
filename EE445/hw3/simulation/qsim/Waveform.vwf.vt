// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/14/2019 15:43:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          basic_comp
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module basic_comp_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] INPR_in;
reg clk;
reg set_FGI;
reg set_FGO;
reg set_S;
// wires                                               
wire FGI_out;
wire FGO_out;
wire OUTR_out;

// assign statements (if any)                          
basic_comp i1 (
// port map - connection between master ports and signals/registers   
	.FGI_out(FGI_out),
	.FGO_out(FGO_out),
	.INPR_in(INPR_in),
	.OUTR_out(OUTR_out),
	.clk(clk),
	.set_FGI(set_FGI),
	.set_FGO(set_FGO),
	.set_S(set_S)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// INPR_in[ 7 ]
initial
begin
	INPR_in[7] = 1'b0;
end 
// INPR_in[ 6 ]
initial
begin
	INPR_in[6] = 1'b0;
	INPR_in[6] = #640000 1'b1;
end 
// INPR_in[ 5 ]
initial
begin
	INPR_in[5] = 1'b0;
	INPR_in[5] = #320000 1'b1;
	INPR_in[5] = #320000 1'b0;
	INPR_in[5] = #320000 1'b1;
end 
// INPR_in[ 4 ]
initial
begin
	repeat(3)
	begin
		INPR_in[4] = 1'b0;
		INPR_in[4] = #160000 1'b1;
		# 160000;
	end
	INPR_in[4] = 1'b0;
end 
// INPR_in[ 3 ]
initial
begin
	repeat(6)
	begin
		INPR_in[3] = 1'b0;
		INPR_in[3] = #80000 1'b1;
		# 80000;
	end
	INPR_in[3] = 1'b0;
end 
// INPR_in[ 2 ]
initial
begin
	repeat(12)
	begin
		INPR_in[2] = 1'b0;
		INPR_in[2] = #40000 1'b1;
		# 40000;
	end
	INPR_in[2] = 1'b0;
end 
// INPR_in[ 1 ]
always
begin
	INPR_in[1] = 1'b0;
	INPR_in[1] = #20000 1'b1;
	#20000;
end 
// INPR_in[ 0 ]
always
begin
	INPR_in[0] = 1'b0;
	INPR_in[0] = #10000 1'b1;
	#10000;
end 

// set_FGI
initial
begin
	set_FGI = 1'b0;
end 

// set_FGO
initial
begin
	set_FGO = 1'b0;
end 

// set_S
initial
begin
	set_S = 1'b0;
end 
endmodule

