
module alu (
	// Inputs
	from_DR, from_INPR, from_AC, from_E,
	// Outputs
	out, carry,
	// Signals
	control
);
	// Inputs
	input [15:0]from_DR;
	input [7:0] from_INPR;
	input [15:0]from_AC;
	input from_E;
	// Outputs
	output reg[15:0] out;
	output reg carry;
	// Signals
	input[2:0] control;
	
	always@(*)
	begin
		begin
			out <= from_AC & from_DR;
		
		end
		if(add)
		begin
			{carry,out} <= from_AC + from_DR;
			
		end
		if(comp)
		begin
			carry <= ~from_E;

		end
		if(cir)
		begin
			carry 	<= from_AC[0];
			out 		<= from_AC>>1;
			out[15]  <= from_E;

		end
		if(cil)
		begin
			carry <= from_AC[15];
			out   <= from_AC<<1;
			out[0]<= from_E;

		end
		if(trans_dr)
		begin
			out <= from_DR;

		end
		if(trans_inpr)
		begin
		out[7:0] <= from_INPR;

	end
	end
	/* FILL HERE */

endmodule