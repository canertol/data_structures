module alu(A, B, I, F, C_out);

input [1:0] A;
input [1:0] B;
input [1:0] I;

output [1:0] F;
output C_out;

reg [1:0] F;
reg C_out;

always @(A, B, I)
case(I)
	2'b11: {C_out, F} = A + B;
	2'b10: {C_out, F} = A - B;
	2'b01: begin
				F = A & B;
				C_out = 0;
			 end
	2'b00: begin
				F = A | B;
				C_out = 0;
			 end
endcase



endmodule

module my_reg4 (input clk, shft,
					input [3:0] in,
					output reg [3:0] out);

	
	always @ (posedge clk)
	begin
		if (shft) begin
			out = in;
		end else begin
			out = out<<1;//4'b0;
		end
	end
	
	

endmodule

module light (x1, x2, f);
	input x1, x2;
	output f;
	assign f = (x1 & ~x2)|(~x1 & x2);
endmodule


