// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/14/2019 16:53:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          de0nano_embedding
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module de0nano_embedding_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [15:0] treg_DRAM_DQ;
reg [33:0] treg_GPIO_0;
reg [1:0] GPIO_0_IN;
reg [33:0] treg_GPIO_1;
reg [1:0] GPIO_1_IN;
reg [1:0] KEY;
reg [3:0] SW;
// wires                                               
wire [12:0] DRAM_ADDR;
wire [1:0] DRAM_BA;
wire DRAM_CAS_N;
wire DRAM_CKE;
wire DRAM_CLK;
wire DRAM_CS_N;
wire [15:0] DRAM_DQ;
wire [1:0] DRAM_DQM;
wire DRAM_RAS_N;
wire DRAM_WE_N;
wire [33:0] GPIO_0;
wire [33:0] GPIO_1;
wire [7:0] LED;

// assign statements (if any)                          
assign DRAM_DQ = treg_DRAM_DQ;
assign GPIO_0 = treg_GPIO_0;
assign GPIO_1 = treg_GPIO_1;
de0nano_embedding i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA(DRAM_BA),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_DQM(DRAM_DQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_WE_N(DRAM_WE_N),
	.GPIO_0(GPIO_0),
	.GPIO_0_IN(GPIO_0_IN),
	.GPIO_1(GPIO_1),
	.GPIO_1_IN(GPIO_1_IN),
	.KEY(KEY),
	.LED(LED),
	.SW(SW)
);
initial 
begin 
#1000000 $finish;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b0;
end 
// KEY[ 1 ]
always
begin
	KEY[1] = 1'b0;
	KEY[1] = #5000 1'b1;
	#5000;
end 
// KEY[ 0 ]
initial
begin
	KEY[0] = 1'b0;
end 

// GPIO_0[0]
initial
begin
	treg_GPIO_0[0] = 1'bZ;
end 

// GPIO_0[1]
initial
begin
	treg_GPIO_0[1] = 1'bZ;
end 

// GPIO_0[3]
initial
begin
	treg_GPIO_0[3] = 1'b1;
end 

// GPIO_0[4]
initial
begin
	treg_GPIO_0[4] = 1'b0;
end 

// GPIO_0[5]
initial
begin
	treg_GPIO_0[5] = 1'b1;
end 

// GPIO_0[6]
initial
begin
	treg_GPIO_0[6] = 1'b0;
end 
endmodule

