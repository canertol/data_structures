// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/15/2019 23:53:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Controller_Unit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Controller_Unit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR;
reg COMP;
reg LOAD;
reg NFlag;
reg [2:0] OP;
reg Qn;
reg Qz;
reg R0m;
reg R1m;
reg [1:0] Stat;
// wires                                               
wire [2:0] ALUCtrl;
wire [1:0] ASrc;
wire AccCLR;
wire AccParallel;
wire AccRight;
wire [1:0] BSrc;
wire ERR;
wire QParallel;
wire QRight;
wire QSrc;
wire QnCLR;
wire QzSrc;
wire [1:0] R0Src;
wire R0WE;
wire R1Clr;
wire R1Src;
wire R1WE;
wire RST;

// assign statements (if any)                          
Controller_Unit i1 (
// port map - connection between master ports and signals/registers   
	.ALUCtrl(ALUCtrl),
	.ASrc(ASrc),
	.AccCLR(AccCLR),
	.AccParallel(AccParallel),
	.AccRight(AccRight),
	.BSrc(BSrc),
	.CLK(CLK),
	.CLR(CLR),
	.COMP(COMP),
	.ERR(ERR),
	.LOAD(LOAD),
	.NFlag(NFlag),
	.OP(OP),
	.QParallel(QParallel),
	.QRight(QRight),
	.QSrc(QSrc),
	.Qn(Qn),
	.QnCLR(QnCLR),
	.Qz(Qz),
	.QzSrc(QzSrc),
	.R0Src(R0Src),
	.R0WE(R0WE),
	.R0m(R0m),
	.R1Clr(R1Clr),
	.R1Src(R1Src),
	.R1WE(R1WE),
	.R1m(R1m),
	.RST(RST),
	.Stat(Stat)
);
initial 
begin 
#1000000 $stop;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #100000 1'b1;
	#100000;
end 

// CLR
initial
begin
	CLR = 1'b0;
	CLR = #400000 1'b1;
	CLR = #200000 1'b0;
end 

// COMP
initial
begin
	COMP = 1'b0;
end 

// LOAD
initial
begin
	LOAD = 1'b1;
	LOAD = #400000 1'b0;
end 

// NFlag
initial
begin
	NFlag = 1'b0;
end 
// OP[ 2 ]
initial
begin
	OP[2] = 1'b0;
end 
// OP[ 1 ]
initial
begin
	OP[1] = 1'b0;
end 
// OP[ 0 ]
initial
begin
	OP[0] = 1'b0;
end 

// Qn
initial
begin
	Qn = 1'b0;
end 

// Qz
initial
begin
	Qz = 1'b0;
end 

// R0m
initial
begin
	R0m = 1'b0;
end 

// R1m
initial
begin
	R1m = 1'b0;
end 
// Stat[ 1 ]
initial
begin
	Stat[1] = 1'b0;
end 
// Stat[ 0 ]
initial
begin
	Stat[0] = 1'b0;
end 
endmodule

