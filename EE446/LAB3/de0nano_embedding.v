
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module de0nano_embedding(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,
/*
	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,
*/
	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
//	GPIO_0,
//	GPIO_0_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
//	GPIO_1,
//	GPIO_1_IN,
	Inst, RFread// dataA, writedata, RFreadtwo dataRead, 
	,clk, RegWrite, ALUSrc, MemWrite, MemtoReg, PCSrc, Shift, reset
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;

//////////// LED //////////
output		     [7:0]		LED;

//////////// KEY //////////
input 		     [1:0]		KEY;

//////////// SW //////////
input 		     [3:0]		SW;

//////////// SDRAM //////////
/*
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [15:0]		DRAM_DQ;
output		     [1:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;*/

//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
//inout 		    [33:0]		GPIO_0;
//input 		     [1:0]		GPIO_0_IN;

//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
//inout 		    [33:0]		GPIO_1;
//input 		     [1:0]		GPIO_1_IN;


//=======================================================
//  REG/WIRE declarations
//=======================================================
output reg [31:0]Inst,RFread;// dataA, writedata;// RFreadtwo dataRead;
input clk;
wire [3:0] ALUFlags;
wire [1:0] RegSrc, ImmSrc, ALUControl;
output  RegWrite, ALUSrc, MemWrite, MemtoReg, PCSrc, Shift;
input reset;
//=======================================================
//  Structural coding
//=======================================================
datapath dp(.Shift(Shift), .MemWrite(MemWrite), .RegSrc(RegSrc), .ALUControl(ALUControl),
				.PCSrc(PCSrc), .RegWrite(RegWrite), .ImmSrc(ImmSrc), .MemtoReg(MemtoReg), 
				.ALUSrc(ALUSrc), .CLK(clk), .ALUFlags(ALUFlags), .Inst(Inst), .dataRead(dataRead), .RFread(RFread), .dataA(dataA), .writedata(writedata), .RFreadtwo(RFreadtwo) );

CONTROLLER cont(clk, reset, Inst,ALUFlags, RegSrc,
					RegWrite,
					ImmSrc,
					ALUSrc,
					ALUControl,
					MemWrite, MemtoReg,
					PCSrc, Shift);


endmodule
