// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/24/2019 16:53:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CONTROLLER
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CONTROLLER_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] ALUFlags;
reg [31:0] Inst;
reg clk;
reg reset;
// wires                                               
wire [1:0] ALUControl;
wire ALUSrc;
wire [1:0] ImmSrc;
wire MemWrite;
wire MemtoReg;
wire PCSrc;
wire [1:0] RegSrc;
wire RegWrite;
wire Shift;

// assign statements (if any)                          
CONTROLLER i1 (
// port map - connection between master ports and signals/registers   
	.ALUControl(ALUControl),
	.ALUFlags(ALUFlags),
	.ALUSrc(ALUSrc),
	.ImmSrc(ImmSrc),
	.Inst(Inst),
	.MemWrite(MemWrite),
	.MemtoReg(MemtoReg),
	.PCSrc(PCSrc),
	.RegSrc(RegSrc),
	.RegWrite(RegWrite),
	.Shift(Shift),
	.clk(clk),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// Inst[ 31 ]
initial
begin
	Inst[31] = 1'b1;
	Inst[31] = #550000 1'b0;
end 
// Inst[ 30 ]
initial
begin
	Inst[30] = 1'b1;
	Inst[30] = #550000 1'b0;
end 
// Inst[ 29 ]
initial
begin
	Inst[29] = 1'b1;
	Inst[29] = #550000 1'b0;
end 
// Inst[ 28 ]
initial
begin
	Inst[28] = 1'b0;
end 
// Inst[ 27 ]
initial
begin
	Inst[27] = 1'b0;
end 
// Inst[ 26 ]
initial
begin
	Inst[26] = 1'b0;
	Inst[26] = #350000 1'b1;
	Inst[26] = #200000 1'b0;
end 
// Inst[ 25 ]
initial
begin
	Inst[25] = 1'b0;
	Inst[25] = #150000 1'b1;
	Inst[25] = #200000 1'b0;
end 
// Inst[ 24 ]
initial
begin
	Inst[24] = 1'b0;
	Inst[24] = #350000 1'b1;
	Inst[24] = #200000 1'b0;
end 
// Inst[ 23 ]
initial
begin
	Inst[23] = 1'b0;
	Inst[23] = #150000 1'b1;
	Inst[23] = #400000 1'b0;
end 
// Inst[ 22 ]
initial
begin
	Inst[22] = 1'b1;
	Inst[22] = #150000 1'b0;
end 
// Inst[ 21 ]
initial
begin
	Inst[21] = 1'b0;
end 
// Inst[ 20 ]
initial
begin
	Inst[20] = 1'b0;
	Inst[20] = #450000 1'b1;
	Inst[20] = #100000 1'b0;
end 
// Inst[ 19 ]
initial
begin
	Inst[19] = 1'b1;
	Inst[19] = #150000 1'b0;
end 
// Inst[ 18 ]
initial
begin
	Inst[18] = 1'b1;
	Inst[18] = #150000 1'b0;
end 
// Inst[ 17 ]
initial
begin
	Inst[17] = 1'b1;
	Inst[17] = #150000 1'b0;
end 
// Inst[ 16 ]
initial
begin
	Inst[16] = 1'b1;
	Inst[16] = #150000 1'b0;
end 
// Inst[ 15 ]
initial
begin
	Inst[15] = 1'b0;
end 
// Inst[ 14 ]
initial
begin
	Inst[14] = 1'b0;
end 
// Inst[ 13 ]
initial
begin
	Inst[13] = 1'b0;
	Inst[13] = #150000 1'b1;
	Inst[13] = #400000 1'b0;
end 
// Inst[ 12 ]
initial
begin
	Inst[12] = 1'b0;
	Inst[12] = #250000 1'b1;
	Inst[12] = #100000 1'b0;
end 
// Inst[ 11 ]
initial
begin
	Inst[11] = 1'b0;
	Inst[11] = #350000 1'b1;
	Inst[11] = #200000 1'b0;
end 
// Inst[ 10 ]
initial
begin
	Inst[10] = 1'b0;
end 
// Inst[ 9 ]
initial
begin
	Inst[9] = 1'b0;
end 
// Inst[ 8 ]
initial
begin
	Inst[8] = 1'b0;
end 
// Inst[ 7 ]
initial
begin
	Inst[7] = 1'b0;
end 
// Inst[ 6 ]
initial
begin
	Inst[6] = 1'b0;
end 
// Inst[ 5 ]
initial
begin
	Inst[5] = 1'b0;
end 
// Inst[ 4 ]
initial
begin
	Inst[4] = 1'b0;
end 
// Inst[ 3 ]
initial
begin
	Inst[3] = 1'b1;
	Inst[3] = #150000 1'b0;
	Inst[3] = #100000 1'b1;
	Inst[3] = #100000 1'b0;
end 
// Inst[ 2 ]
initial
begin
	Inst[2] = 1'b1;
	Inst[2] = #350000 1'b0;
end 
// Inst[ 1 ]
initial
begin
	Inst[1] = 1'b1;
	Inst[1] = #150000 1'b0;
end 
// Inst[ 0 ]
initial
begin
	Inst[0] = 1'b1;
	Inst[0] = #250000 1'b0;
end 
// ALUFlags[ 3 ]
initial
begin
	ALUFlags[3] = 1'b0;
end 
// ALUFlags[ 2 ]
initial
begin
	ALUFlags[2] = 1'b0;
end 
// ALUFlags[ 1 ]
initial
begin
	ALUFlags[1] = 1'b0;
end 
// ALUFlags[ 0 ]
initial
begin
	ALUFlags[0] = 1'b0;
end 
endmodule

