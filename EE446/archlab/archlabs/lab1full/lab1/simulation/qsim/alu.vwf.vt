// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/24/2018 15:24:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    alu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alu_vlg_sample_tst(
	A,
	B,
	control,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input [2:0] control;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or control)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module alu_vlg_check_tst (
	co,
	n,
	out,
	ovf,
	z,
	sampler_rx
);
input  co;
input  n;
input [7:0] out;
input  ovf;
input  z;
input sampler_rx;

reg  co_expected;
reg  n_expected;
reg [7:0] out_expected;
reg  ovf_expected;
reg  z_expected;

reg  co_prev;
reg  n_prev;
reg [7:0] out_prev;
reg  ovf_prev;
reg  z_prev;

reg  co_expected_prev;
reg  n_expected_prev;
reg [7:0] out_expected_prev;
reg  ovf_expected_prev;
reg  z_expected_prev;

reg  last_co_exp;
reg  last_n_exp;
reg [7:0] last_out_exp;
reg  last_ovf_exp;
reg  last_z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	co_prev = co;
	n_prev = n;
	out_prev = out;
	ovf_prev = ovf;
	z_prev = z;
end

// update expected /o prevs

always @(trigger)
begin
	co_expected_prev = co_expected;
	n_expected_prev = n_expected;
	out_expected_prev = out_expected;
	ovf_expected_prev = ovf_expected;
	z_expected_prev = z_expected;
end



// expected co
initial
begin
	co_expected = 1'bX;
end 

// expected n
initial
begin
	n_expected = 1'bX;
end 
// expected out[ 7 ]
initial
begin
	out_expected[7] = 1'bX;
end 
// expected out[ 6 ]
initial
begin
	out_expected[6] = 1'bX;
end 
// expected out[ 5 ]
initial
begin
	out_expected[5] = 1'bX;
end 
// expected out[ 4 ]
initial
begin
	out_expected[4] = 1'bX;
end 
// expected out[ 3 ]
initial
begin
	out_expected[3] = 1'bX;
end 
// expected out[ 2 ]
initial
begin
	out_expected[2] = 1'bX;
end 
// expected out[ 1 ]
initial
begin
	out_expected[1] = 1'bX;
end 
// expected out[ 0 ]
initial
begin
	out_expected[0] = 1'bX;
end 

// expected ovf
initial
begin
	ovf_expected = 1'bX;
end 

// expected z
initial
begin
	z_expected = 1'bX;
end 
// generate trigger
always @(co_expected or co or n_expected or n or out_expected or out or ovf_expected or ovf or z_expected or z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected co = %b | expected n = %b | expected out = %b | expected ovf = %b | expected z = %b | ",co_expected_prev,n_expected_prev,out_expected_prev,ovf_expected_prev,z_expected_prev);
	$display("| real co = %b | real n = %b | real out = %b | real ovf = %b | real z = %b | ",co_prev,n_prev,out_prev,ovf_prev,z_prev);
`endif
	if (
		( co_expected_prev !== 1'bx ) && ( co_prev !== co_expected_prev )
		&& ((co_expected_prev !== last_co_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port co :: @time = %t",  $realtime);
		$display ("     Expected value = %b", co_expected_prev);
		$display ("     Real value = %b", co_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_co_exp = co_expected_prev;
	end
	if (
		( n_expected_prev !== 1'bx ) && ( n_prev !== n_expected_prev )
		&& ((n_expected_prev !== last_n_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_expected_prev);
		$display ("     Real value = %b", n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n_exp = n_expected_prev;
	end
	if (
		( out_expected_prev[0] !== 1'bx ) && ( out_prev[0] !== out_expected_prev[0] )
		&& ((out_expected_prev[0] !== last_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_exp[0] = out_expected_prev[0];
	end
	if (
		( out_expected_prev[1] !== 1'bx ) && ( out_prev[1] !== out_expected_prev[1] )
		&& ((out_expected_prev[1] !== last_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_exp[1] = out_expected_prev[1];
	end
	if (
		( out_expected_prev[2] !== 1'bx ) && ( out_prev[2] !== out_expected_prev[2] )
		&& ((out_expected_prev[2] !== last_out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_exp[2] = out_expected_prev[2];
	end
	if (
		( out_expected_prev[3] !== 1'bx ) && ( out_prev[3] !== out_expected_prev[3] )
		&& ((out_expected_prev[3] !== last_out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_exp[3] = out_expected_prev[3];
	end
	if (
		( out_expected_prev[4] !== 1'bx ) && ( out_prev[4] !== out_expected_prev[4] )
		&& ((out_expected_prev[4] !== last_out_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_exp[4] = out_expected_prev[4];
	end
	if (
		( out_expected_prev[5] !== 1'bx ) && ( out_prev[5] !== out_expected_prev[5] )
		&& ((out_expected_prev[5] !== last_out_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_exp[5] = out_expected_prev[5];
	end
	if (
		( out_expected_prev[6] !== 1'bx ) && ( out_prev[6] !== out_expected_prev[6] )
		&& ((out_expected_prev[6] !== last_out_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_exp[6] = out_expected_prev[6];
	end
	if (
		( out_expected_prev[7] !== 1'bx ) && ( out_prev[7] !== out_expected_prev[7] )
		&& ((out_expected_prev[7] !== last_out_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_exp[7] = out_expected_prev[7];
	end
	if (
		( ovf_expected_prev !== 1'bx ) && ( ovf_prev !== ovf_expected_prev )
		&& ((ovf_expected_prev !== last_ovf_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ovf :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ovf_expected_prev);
		$display ("     Real value = %b", ovf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ovf_exp = ovf_expected_prev;
	end
	if (
		( z_expected_prev !== 1'bx ) && ( z_prev !== z_expected_prev )
		&& ((z_expected_prev !== last_z_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_expected_prev);
		$display ("     Real value = %b", z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_z_exp = z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module alu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg [2:0] control;
// wires                                               
wire co;
wire n;
wire [7:0] out;
wire ovf;
wire z;

wire sampler;                             

// assign statements (if any)                          
alu i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.co(co),
	.control(control),
	.n(n),
	.out(out),
	.ovf(ovf),
	.z(z)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 
// control[ 2 ]
initial
begin
	control[2] = 1'b0;
end 
// control[ 1 ]
initial
begin
	control[1] = 1'b0;
end 
// control[ 0 ]
initial
begin
	control[0] = 1'b0;
end 

alu_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.control(control),
	.sampler_tx(sampler)
);

alu_vlg_check_tst tb_out(
	.co(co),
	.n(n),
	.out(out),
	.ovf(ovf),
	.z(z),
	.sampler_rx(sampler)
);
endmodule

