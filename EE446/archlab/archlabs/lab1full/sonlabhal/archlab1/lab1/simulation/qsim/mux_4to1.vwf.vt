// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/25/2018 16:29:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux_4to1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_4to1_vlg_sample_tst(
	D1,
	D2,
	D3,
	D4,
	select,
	sampler_tx
);
input [7:0] D1;
input [7:0] D2;
input [7:0] D3;
input [7:0] D4;
input [1:0] select;
output sampler_tx;

reg sample;
time current_time;
always @(D1 or D2 or D3 or D4 or select)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux_4to1_vlg_check_tst (
	O,
	sampler_rx
);
input [7:0] O;
input sampler_rx;

reg [7:0] O_expected;

reg [7:0] O_prev;

reg [7:0] O_expected_prev;

reg [7:0] last_O_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	O_prev = O;
end

// update expected /o prevs

always @(trigger)
begin
	O_expected_prev = O_expected;
end


// expected O[ 7 ]
initial
begin
	O_expected[7] = 1'bX;
end 
// expected O[ 6 ]
initial
begin
	O_expected[6] = 1'bX;
end 
// expected O[ 5 ]
initial
begin
	O_expected[5] = 1'bX;
end 
// expected O[ 4 ]
initial
begin
	O_expected[4] = 1'bX;
end 
// expected O[ 3 ]
initial
begin
	O_expected[3] = 1'bX;
end 
// expected O[ 2 ]
initial
begin
	O_expected[2] = 1'bX;
end 
// expected O[ 1 ]
initial
begin
	O_expected[1] = 1'bX;
end 
// expected O[ 0 ]
initial
begin
	O_expected[0] = 1'bX;
end 
// generate trigger
always @(O_expected or O)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected O = %b | ",O_expected_prev);
	$display("| real O = %b | ",O_prev);
`endif
	if (
		( O_expected_prev[0] !== 1'bx ) && ( O_prev[0] !== O_expected_prev[0] )
		&& ((O_expected_prev[0] !== last_O_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[0] = O_expected_prev[0];
	end
	if (
		( O_expected_prev[1] !== 1'bx ) && ( O_prev[1] !== O_expected_prev[1] )
		&& ((O_expected_prev[1] !== last_O_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[1] = O_expected_prev[1];
	end
	if (
		( O_expected_prev[2] !== 1'bx ) && ( O_prev[2] !== O_expected_prev[2] )
		&& ((O_expected_prev[2] !== last_O_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[2] = O_expected_prev[2];
	end
	if (
		( O_expected_prev[3] !== 1'bx ) && ( O_prev[3] !== O_expected_prev[3] )
		&& ((O_expected_prev[3] !== last_O_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[3] = O_expected_prev[3];
	end
	if (
		( O_expected_prev[4] !== 1'bx ) && ( O_prev[4] !== O_expected_prev[4] )
		&& ((O_expected_prev[4] !== last_O_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[4] = O_expected_prev[4];
	end
	if (
		( O_expected_prev[5] !== 1'bx ) && ( O_prev[5] !== O_expected_prev[5] )
		&& ((O_expected_prev[5] !== last_O_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[5] = O_expected_prev[5];
	end
	if (
		( O_expected_prev[6] !== 1'bx ) && ( O_prev[6] !== O_expected_prev[6] )
		&& ((O_expected_prev[6] !== last_O_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[6] = O_expected_prev[6];
	end
	if (
		( O_expected_prev[7] !== 1'bx ) && ( O_prev[7] !== O_expected_prev[7] )
		&& ((O_expected_prev[7] !== last_O_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[7] = O_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux_4to1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] D1;
reg [7:0] D2;
reg [7:0] D3;
reg [7:0] D4;
reg [1:0] select;
// wires                                               
wire [7:0] O;

wire sampler;                             

// assign statements (if any)                          
mux_4to1 i1 (
// port map - connection between master ports and signals/registers   
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.O(O),
	.select(select)
);
// D1[ 7 ]
initial
begin
	D1[7] = 1'b0;
end 
// D1[ 6 ]
initial
begin
	D1[6] = 1'b0;
end 
// D1[ 5 ]
initial
begin
	D1[5] = 1'b0;
end 
// D1[ 4 ]
initial
begin
	D1[4] = 1'b0;
end 
// D1[ 3 ]
initial
begin
	D1[3] = 1'b0;
end 
// D1[ 2 ]
initial
begin
	D1[2] = 1'b0;
end 
// D1[ 1 ]
initial
begin
	D1[1] = 1'b0;
end 
// D1[ 0 ]
initial
begin
	D1[0] = 1'b0;
end 
// D2[ 7 ]
initial
begin
	D2[7] = 1'b0;
end 
// D2[ 6 ]
initial
begin
	D2[6] = 1'b0;
end 
// D2[ 5 ]
initial
begin
	D2[5] = 1'b0;
end 
// D2[ 4 ]
initial
begin
	D2[4] = 1'b0;
end 
// D2[ 3 ]
initial
begin
	D2[3] = 1'b0;
end 
// D2[ 2 ]
initial
begin
	D2[2] = 1'b0;
end 
// D2[ 1 ]
initial
begin
	D2[1] = 1'b0;
end 
// D2[ 0 ]
initial
begin
	D2[0] = 1'b0;
end 
// D3[ 7 ]
initial
begin
	D3[7] = 1'b0;
end 
// D3[ 6 ]
initial
begin
	D3[6] = 1'b0;
end 
// D3[ 5 ]
initial
begin
	D3[5] = 1'b0;
end 
// D3[ 4 ]
initial
begin
	D3[4] = 1'b0;
end 
// D3[ 3 ]
initial
begin
	D3[3] = 1'b0;
end 
// D3[ 2 ]
initial
begin
	D3[2] = 1'b0;
end 
// D3[ 1 ]
initial
begin
	D3[1] = 1'b0;
end 
// D3[ 0 ]
initial
begin
	D3[0] = 1'b0;
end 
// D4[ 7 ]
initial
begin
	D4[7] = 1'b1;
end 
// D4[ 6 ]
initial
begin
	D4[6] = 1'b1;
end 
// D4[ 5 ]
initial
begin
	D4[5] = 1'b1;
end 
// D4[ 4 ]
initial
begin
	D4[4] = 1'b1;
end 
// D4[ 3 ]
initial
begin
	D4[3] = 1'b1;
end 
// D4[ 2 ]
initial
begin
	D4[2] = 1'b1;
end 
// D4[ 1 ]
initial
begin
	D4[1] = 1'b1;
end 
// D4[ 0 ]
initial
begin
	D4[0] = 1'b1;
end 
// select[ 1 ]
initial
begin
	select[1] = 1'b1;
end 
// select[ 0 ]
initial
begin
	select[0] = 1'b1;
end 

mux_4to1_vlg_sample_tst tb_sample (
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.select(select),
	.sampler_tx(sampler)
);

mux_4to1_vlg_check_tst tb_out(
	.O(O),
	.sampler_rx(sampler)
);
endmodule

