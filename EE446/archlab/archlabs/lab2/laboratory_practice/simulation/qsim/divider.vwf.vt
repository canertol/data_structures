// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/01/2018 13:09:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    divider
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module divider_vlg_sample_tst(
	clk,
	dividend,
	divider,
	sampler_tx
);
input  clk;
input [7:0] dividend;
input [7:0] divider;
output sampler_tx;

reg sample;
time current_time;
always @(clk or dividend or divider)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module divider_vlg_check_tst (
	quotient,
	remainder,
	sampler_rx
);
input [7:0] quotient;
input [7:0] remainder;
input sampler_rx;

reg [7:0] quotient_expected;
reg [7:0] remainder_expected;

reg [7:0] quotient_prev;
reg [7:0] remainder_prev;

reg [7:0] quotient_expected_prev;
reg [7:0] remainder_expected_prev;

reg [7:0] last_quotient_exp;
reg [7:0] last_remainder_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	quotient_prev = quotient;
	remainder_prev = remainder;
end

// update expected /o prevs

always @(trigger)
begin
	quotient_expected_prev = quotient_expected;
	remainder_expected_prev = remainder_expected;
end


// expected remainder[ 7 ]
initial
begin
	remainder_expected[7] = 1'bX;
end 
// expected remainder[ 6 ]
initial
begin
	remainder_expected[6] = 1'bX;
end 
// expected remainder[ 5 ]
initial
begin
	remainder_expected[5] = 1'bX;
end 
// expected remainder[ 4 ]
initial
begin
	remainder_expected[4] = 1'bX;
end 
// expected remainder[ 3 ]
initial
begin
	remainder_expected[3] = 1'bX;
end 
// expected remainder[ 2 ]
initial
begin
	remainder_expected[2] = 1'bX;
end 
// expected remainder[ 1 ]
initial
begin
	remainder_expected[1] = 1'bX;
end 
// expected remainder[ 0 ]
initial
begin
	remainder_expected[0] = 1'bX;
end 
// expected quotient[ 7 ]
initial
begin
	quotient_expected[7] = 1'bX;
end 
// expected quotient[ 6 ]
initial
begin
	quotient_expected[6] = 1'bX;
end 
// expected quotient[ 5 ]
initial
begin
	quotient_expected[5] = 1'bX;
end 
// expected quotient[ 4 ]
initial
begin
	quotient_expected[4] = 1'bX;
end 
// expected quotient[ 3 ]
initial
begin
	quotient_expected[3] = 1'bX;
end 
// expected quotient[ 2 ]
initial
begin
	quotient_expected[2] = 1'bX;
end 
// expected quotient[ 1 ]
initial
begin
	quotient_expected[1] = 1'bX;
end 
// expected quotient[ 0 ]
initial
begin
	quotient_expected[0] = 1'bX;
end 
// generate trigger
always @(quotient_expected or quotient or remainder_expected or remainder)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected quotient = %b | expected remainder = %b | ",quotient_expected_prev,remainder_expected_prev);
	$display("| real quotient = %b | real remainder = %b | ",quotient_prev,remainder_prev);
`endif
	if (
		( quotient_expected_prev[0] !== 1'bx ) && ( quotient_prev[0] !== quotient_expected_prev[0] )
		&& ((quotient_expected_prev[0] !== last_quotient_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_quotient_exp[0] = quotient_expected_prev[0];
	end
	if (
		( quotient_expected_prev[1] !== 1'bx ) && ( quotient_prev[1] !== quotient_expected_prev[1] )
		&& ((quotient_expected_prev[1] !== last_quotient_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_quotient_exp[1] = quotient_expected_prev[1];
	end
	if (
		( quotient_expected_prev[2] !== 1'bx ) && ( quotient_prev[2] !== quotient_expected_prev[2] )
		&& ((quotient_expected_prev[2] !== last_quotient_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_quotient_exp[2] = quotient_expected_prev[2];
	end
	if (
		( quotient_expected_prev[3] !== 1'bx ) && ( quotient_prev[3] !== quotient_expected_prev[3] )
		&& ((quotient_expected_prev[3] !== last_quotient_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_quotient_exp[3] = quotient_expected_prev[3];
	end
	if (
		( quotient_expected_prev[4] !== 1'bx ) && ( quotient_prev[4] !== quotient_expected_prev[4] )
		&& ((quotient_expected_prev[4] !== last_quotient_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_quotient_exp[4] = quotient_expected_prev[4];
	end
	if (
		( quotient_expected_prev[5] !== 1'bx ) && ( quotient_prev[5] !== quotient_expected_prev[5] )
		&& ((quotient_expected_prev[5] !== last_quotient_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_quotient_exp[5] = quotient_expected_prev[5];
	end
	if (
		( quotient_expected_prev[6] !== 1'bx ) && ( quotient_prev[6] !== quotient_expected_prev[6] )
		&& ((quotient_expected_prev[6] !== last_quotient_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_quotient_exp[6] = quotient_expected_prev[6];
	end
	if (
		( quotient_expected_prev[7] !== 1'bx ) && ( quotient_prev[7] !== quotient_expected_prev[7] )
		&& ((quotient_expected_prev[7] !== last_quotient_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_quotient_exp[7] = quotient_expected_prev[7];
	end
	if (
		( remainder_expected_prev[0] !== 1'bx ) && ( remainder_prev[0] !== remainder_expected_prev[0] )
		&& ((remainder_expected_prev[0] !== last_remainder_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_remainder_exp[0] = remainder_expected_prev[0];
	end
	if (
		( remainder_expected_prev[1] !== 1'bx ) && ( remainder_prev[1] !== remainder_expected_prev[1] )
		&& ((remainder_expected_prev[1] !== last_remainder_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_remainder_exp[1] = remainder_expected_prev[1];
	end
	if (
		( remainder_expected_prev[2] !== 1'bx ) && ( remainder_prev[2] !== remainder_expected_prev[2] )
		&& ((remainder_expected_prev[2] !== last_remainder_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_remainder_exp[2] = remainder_expected_prev[2];
	end
	if (
		( remainder_expected_prev[3] !== 1'bx ) && ( remainder_prev[3] !== remainder_expected_prev[3] )
		&& ((remainder_expected_prev[3] !== last_remainder_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_remainder_exp[3] = remainder_expected_prev[3];
	end
	if (
		( remainder_expected_prev[4] !== 1'bx ) && ( remainder_prev[4] !== remainder_expected_prev[4] )
		&& ((remainder_expected_prev[4] !== last_remainder_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_remainder_exp[4] = remainder_expected_prev[4];
	end
	if (
		( remainder_expected_prev[5] !== 1'bx ) && ( remainder_prev[5] !== remainder_expected_prev[5] )
		&& ((remainder_expected_prev[5] !== last_remainder_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_remainder_exp[5] = remainder_expected_prev[5];
	end
	if (
		( remainder_expected_prev[6] !== 1'bx ) && ( remainder_prev[6] !== remainder_expected_prev[6] )
		&& ((remainder_expected_prev[6] !== last_remainder_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_remainder_exp[6] = remainder_expected_prev[6];
	end
	if (
		( remainder_expected_prev[7] !== 1'bx ) && ( remainder_prev[7] !== remainder_expected_prev[7] )
		&& ((remainder_expected_prev[7] !== last_remainder_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_remainder_exp[7] = remainder_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module divider_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] dividend;
reg [7:0] divider;
// wires                                               
wire [7:0] quotient;
wire [7:0] remainder;

wire sampler;                             

// assign statements (if any)                          
divider i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.dividend(dividend),
	.divider(divider),
	.quotient(quotient),
	.remainder(remainder)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// dividend[ 7 ]
initial
begin
	dividend[7] = 1'b0;
end 
// dividend[ 6 ]
initial
begin
	dividend[6] = 1'b0;
end 
// dividend[ 5 ]
initial
begin
	dividend[5] = 1'b0;
end 
// dividend[ 4 ]
initial
begin
	dividend[4] = 1'b0;
end 
// dividend[ 3 ]
initial
begin
	dividend[3] = 1'b0;
end 
// dividend[ 2 ]
initial
begin
	dividend[2] = 1'b1;
end 
// dividend[ 1 ]
initial
begin
	dividend[1] = 1'b0;
end 
// dividend[ 0 ]
initial
begin
	dividend[0] = 1'b1;
end 
// divider[ 7 ]
initial
begin
	divider[7] = 1'b0;
end 
// divider[ 6 ]
initial
begin
	divider[6] = 1'b0;
end 
// divider[ 5 ]
initial
begin
	divider[5] = 1'b0;
end 
// divider[ 4 ]
initial
begin
	divider[4] = 1'b0;
end 
// divider[ 3 ]
initial
begin
	divider[3] = 1'b0;
end 
// divider[ 2 ]
initial
begin
	divider[2] = 1'b0;
end 
// divider[ 1 ]
initial
begin
	divider[1] = 1'b1;
end 
// divider[ 0 ]
initial
begin
	divider[0] = 1'b0;
end 

divider_vlg_sample_tst tb_sample (
	.clk(clk),
	.dividend(dividend),
	.divider(divider),
	.sampler_tx(sampler)
);

divider_vlg_check_tst tb_out(
	.quotient(quotient),
	.remainder(remainder),
	.sampler_rx(sampler)
);
endmodule

