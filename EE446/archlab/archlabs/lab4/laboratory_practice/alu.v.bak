module alu #(parameter W=8)(A,B,control,out,co,ovf,z,n);
    input [(W-1):0] A,B;                 
    input [2:0] control;
    output [(W-1):0] out;
    output reg co,ovf,z,n;
    reg [(W-1):0] out;
	 
    assign ALU_Out = ALU_Result; // ALU out
    
	 always @(*)
    begin
        case(control)
        0: // Add
           ALU_Result = A + B ; 
			  
        1: // SubAB
           ALU_Result = A + (~B + 1) ;
       
		 2: // SubBA
           ALU_Result = B + (~A + 1);
       
		 3: // bit clear
           ALU_Result = A & (~B);
       
		 4: // and
           ALU_Result = A & B;
      
		5: // or
           ALU_Result = A | B;
       
		 6: // exor
           ALU_Result = {A[6:0],A[7]};
       
		 7: // exnor
           ALU_Result = {A[0],A[7:1]};
       
     
          default: ALU_Result = A + B ; 
        endcase
    end

endmodule