// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/16/2018 12:51:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    multicycle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module multicycle_vlg_sample_tst(
	clk,
	resetpc,
	sampler_tx
);
input  clk;
input  resetpc;
output sampler_tx;

reg sample;
time current_time;
always @(clk or resetpc)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module multicycle_vlg_check_tst (
	aluin1,
	aluin2,
	aluout,
	dallanma,
	fetchedinst,
	outpc1,
	r2,
	r3,
	reg1out,
	reg2out,
	regadres1,
	regadres2,
	regyolu,
	shiftercontrol,
	shifterin,
	shifterout,
	shiftselectout,
	wa,
	zeroflag,
	sampler_rx
);
input [7:0] aluin1;
input [7:0] aluin2;
input [7:0] aluout;
input [15:0] dallanma;
input [15:0] fetchedinst;
input [7:0] outpc1;
input [7:0] r2;
input [7:0] r3;
input [7:0] reg1out;
input [7:0] reg2out;
input [2:0] regadres1;
input [2:0] regadres2;
input [7:0] regyolu;
input [2:0] shiftercontrol;
input [7:0] shifterin;
input [7:0] shifterout;
input [7:0] shiftselectout;
input [2:0] wa;
input  zeroflag;
input sampler_rx;

reg [7:0] aluin1_expected;
reg [7:0] aluin2_expected;
reg [7:0] aluout_expected;
reg [15:0] dallanma_expected;
reg [15:0] fetchedinst_expected;
reg [7:0] outpc1_expected;
reg [7:0] r2_expected;
reg [7:0] r3_expected;
reg [7:0] reg1out_expected;
reg [7:0] reg2out_expected;
reg [2:0] regadres1_expected;
reg [2:0] regadres2_expected;
reg [7:0] regyolu_expected;
reg [2:0] shiftercontrol_expected;
reg [7:0] shifterin_expected;
reg [7:0] shifterout_expected;
reg [7:0] shiftselectout_expected;
reg [2:0] wa_expected;
reg  zeroflag_expected;

reg [7:0] aluin1_prev;
reg [7:0] aluin2_prev;
reg [7:0] aluout_prev;
reg [15:0] dallanma_prev;
reg [15:0] fetchedinst_prev;
reg [7:0] outpc1_prev;
reg [7:0] r2_prev;
reg [7:0] r3_prev;
reg [7:0] reg1out_prev;
reg [7:0] reg2out_prev;
reg [2:0] regadres1_prev;
reg [2:0] regadres2_prev;
reg [7:0] regyolu_prev;
reg [2:0] shiftercontrol_prev;
reg [7:0] shifterin_prev;
reg [7:0] shifterout_prev;
reg [7:0] shiftselectout_prev;
reg [2:0] wa_prev;
reg  zeroflag_prev;

reg [7:0] aluin1_expected_prev;
reg [7:0] aluin2_expected_prev;
reg [7:0] aluout_expected_prev;
reg [15:0] dallanma_expected_prev;
reg [15:0] fetchedinst_expected_prev;
reg [7:0] outpc1_expected_prev;
reg [7:0] r2_expected_prev;
reg [7:0] r3_expected_prev;
reg [7:0] reg1out_expected_prev;
reg [7:0] reg2out_expected_prev;
reg [2:0] regadres1_expected_prev;
reg [2:0] regadres2_expected_prev;
reg [7:0] regyolu_expected_prev;
reg [2:0] shiftercontrol_expected_prev;
reg [7:0] shifterin_expected_prev;
reg [7:0] shifterout_expected_prev;
reg [7:0] shiftselectout_expected_prev;
reg [2:0] wa_expected_prev;
reg  zeroflag_expected_prev;

reg [7:0] last_aluin1_exp;
reg [7:0] last_aluin2_exp;
reg [7:0] last_aluout_exp;
reg [15:0] last_dallanma_exp;
reg [15:0] last_fetchedinst_exp;
reg [7:0] last_outpc1_exp;
reg [7:0] last_r2_exp;
reg [7:0] last_r3_exp;
reg [7:0] last_reg1out_exp;
reg [7:0] last_reg2out_exp;
reg [2:0] last_regadres1_exp;
reg [2:0] last_regadres2_exp;
reg [7:0] last_regyolu_exp;
reg [2:0] last_shiftercontrol_exp;
reg [7:0] last_shifterin_exp;
reg [7:0] last_shifterout_exp;
reg [7:0] last_shiftselectout_exp;
reg [2:0] last_wa_exp;
reg  last_zeroflag_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:19] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 19'b1;
end

// update real /o prevs

always @(trigger)
begin
	aluin1_prev = aluin1;
	aluin2_prev = aluin2;
	aluout_prev = aluout;
	dallanma_prev = dallanma;
	fetchedinst_prev = fetchedinst;
	outpc1_prev = outpc1;
	r2_prev = r2;
	r3_prev = r3;
	reg1out_prev = reg1out;
	reg2out_prev = reg2out;
	regadres1_prev = regadres1;
	regadres2_prev = regadres2;
	regyolu_prev = regyolu;
	shiftercontrol_prev = shiftercontrol;
	shifterin_prev = shifterin;
	shifterout_prev = shifterout;
	shiftselectout_prev = shiftselectout;
	wa_prev = wa;
	zeroflag_prev = zeroflag;
end

// update expected /o prevs

always @(trigger)
begin
	aluin1_expected_prev = aluin1_expected;
	aluin2_expected_prev = aluin2_expected;
	aluout_expected_prev = aluout_expected;
	dallanma_expected_prev = dallanma_expected;
	fetchedinst_expected_prev = fetchedinst_expected;
	outpc1_expected_prev = outpc1_expected;
	r2_expected_prev = r2_expected;
	r3_expected_prev = r3_expected;
	reg1out_expected_prev = reg1out_expected;
	reg2out_expected_prev = reg2out_expected;
	regadres1_expected_prev = regadres1_expected;
	regadres2_expected_prev = regadres2_expected;
	regyolu_expected_prev = regyolu_expected;
	shiftercontrol_expected_prev = shiftercontrol_expected;
	shifterin_expected_prev = shifterin_expected;
	shifterout_expected_prev = shifterout_expected;
	shiftselectout_expected_prev = shiftselectout_expected;
	wa_expected_prev = wa_expected;
	zeroflag_expected_prev = zeroflag_expected;
end


// expected dallanma[ 15 ]
initial
begin
	dallanma_expected[15] = 1'bX;
end 
// expected dallanma[ 14 ]
initial
begin
	dallanma_expected[14] = 1'bX;
end 
// expected dallanma[ 13 ]
initial
begin
	dallanma_expected[13] = 1'bX;
end 
// expected dallanma[ 12 ]
initial
begin
	dallanma_expected[12] = 1'bX;
end 
// expected dallanma[ 11 ]
initial
begin
	dallanma_expected[11] = 1'bX;
end 
// expected dallanma[ 10 ]
initial
begin
	dallanma_expected[10] = 1'bX;
end 
// expected dallanma[ 9 ]
initial
begin
	dallanma_expected[9] = 1'bX;
end 
// expected dallanma[ 8 ]
initial
begin
	dallanma_expected[8] = 1'bX;
end 
// expected dallanma[ 7 ]
initial
begin
	dallanma_expected[7] = 1'bX;
end 
// expected dallanma[ 6 ]
initial
begin
	dallanma_expected[6] = 1'bX;
end 
// expected dallanma[ 5 ]
initial
begin
	dallanma_expected[5] = 1'bX;
end 
// expected dallanma[ 4 ]
initial
begin
	dallanma_expected[4] = 1'bX;
end 
// expected dallanma[ 3 ]
initial
begin
	dallanma_expected[3] = 1'bX;
end 
// expected dallanma[ 2 ]
initial
begin
	dallanma_expected[2] = 1'bX;
end 
// expected dallanma[ 1 ]
initial
begin
	dallanma_expected[1] = 1'bX;
end 
// expected dallanma[ 0 ]
initial
begin
	dallanma_expected[0] = 1'bX;
end 
// expected outpc1[ 7 ]
initial
begin
	outpc1_expected[7] = 1'bX;
end 
// expected outpc1[ 6 ]
initial
begin
	outpc1_expected[6] = 1'bX;
end 
// expected outpc1[ 5 ]
initial
begin
	outpc1_expected[5] = 1'bX;
end 
// expected outpc1[ 4 ]
initial
begin
	outpc1_expected[4] = 1'bX;
end 
// expected outpc1[ 3 ]
initial
begin
	outpc1_expected[3] = 1'bX;
end 
// expected outpc1[ 2 ]
initial
begin
	outpc1_expected[2] = 1'bX;
end 
// expected outpc1[ 1 ]
initial
begin
	outpc1_expected[1] = 1'bX;
end 
// expected outpc1[ 0 ]
initial
begin
	outpc1_expected[0] = 1'bX;
end 
// expected reg1out[ 7 ]
initial
begin
	reg1out_expected[7] = 1'bX;
end 
// expected reg1out[ 6 ]
initial
begin
	reg1out_expected[6] = 1'bX;
end 
// expected reg1out[ 5 ]
initial
begin
	reg1out_expected[5] = 1'bX;
end 
// expected reg1out[ 4 ]
initial
begin
	reg1out_expected[4] = 1'bX;
end 
// expected reg1out[ 3 ]
initial
begin
	reg1out_expected[3] = 1'bX;
end 
// expected reg1out[ 2 ]
initial
begin
	reg1out_expected[2] = 1'bX;
end 
// expected reg1out[ 1 ]
initial
begin
	reg1out_expected[1] = 1'bX;
end 
// expected reg1out[ 0 ]
initial
begin
	reg1out_expected[0] = 1'bX;
end 
// expected reg2out[ 7 ]
initial
begin
	reg2out_expected[7] = 1'bX;
end 
// expected reg2out[ 6 ]
initial
begin
	reg2out_expected[6] = 1'bX;
end 
// expected reg2out[ 5 ]
initial
begin
	reg2out_expected[5] = 1'bX;
end 
// expected reg2out[ 4 ]
initial
begin
	reg2out_expected[4] = 1'bX;
end 
// expected reg2out[ 3 ]
initial
begin
	reg2out_expected[3] = 1'bX;
end 
// expected reg2out[ 2 ]
initial
begin
	reg2out_expected[2] = 1'bX;
end 
// expected reg2out[ 1 ]
initial
begin
	reg2out_expected[1] = 1'bX;
end 
// expected reg2out[ 0 ]
initial
begin
	reg2out_expected[0] = 1'bX;
end 
// expected regadres1[ 2 ]
initial
begin
	regadres1_expected[2] = 1'bX;
end 
// expected regadres1[ 1 ]
initial
begin
	regadres1_expected[1] = 1'bX;
end 
// expected regadres1[ 0 ]
initial
begin
	regadres1_expected[0] = 1'bX;
end 
// expected regadres2[ 2 ]
initial
begin
	regadres2_expected[2] = 1'bX;
end 
// expected regadres2[ 1 ]
initial
begin
	regadres2_expected[1] = 1'bX;
end 
// expected regadres2[ 0 ]
initial
begin
	regadres2_expected[0] = 1'bX;
end 
// expected wa[ 2 ]
initial
begin
	wa_expected[2] = 1'bX;
end 
// expected wa[ 1 ]
initial
begin
	wa_expected[1] = 1'bX;
end 
// expected wa[ 0 ]
initial
begin
	wa_expected[0] = 1'bX;
end 
// expected fetchedinst[ 15 ]
initial
begin
	fetchedinst_expected[15] = 1'bX;
end 
// expected fetchedinst[ 14 ]
initial
begin
	fetchedinst_expected[14] = 1'bX;
end 
// expected fetchedinst[ 13 ]
initial
begin
	fetchedinst_expected[13] = 1'bX;
end 
// expected fetchedinst[ 12 ]
initial
begin
	fetchedinst_expected[12] = 1'bX;
end 
// expected fetchedinst[ 11 ]
initial
begin
	fetchedinst_expected[11] = 1'bX;
end 
// expected fetchedinst[ 10 ]
initial
begin
	fetchedinst_expected[10] = 1'bX;
end 
// expected fetchedinst[ 9 ]
initial
begin
	fetchedinst_expected[9] = 1'bX;
end 
// expected fetchedinst[ 8 ]
initial
begin
	fetchedinst_expected[8] = 1'bX;
end 
// expected fetchedinst[ 7 ]
initial
begin
	fetchedinst_expected[7] = 1'bX;
end 
// expected fetchedinst[ 6 ]
initial
begin
	fetchedinst_expected[6] = 1'bX;
end 
// expected fetchedinst[ 5 ]
initial
begin
	fetchedinst_expected[5] = 1'bX;
end 
// expected fetchedinst[ 4 ]
initial
begin
	fetchedinst_expected[4] = 1'bX;
end 
// expected fetchedinst[ 3 ]
initial
begin
	fetchedinst_expected[3] = 1'bX;
end 
// expected fetchedinst[ 2 ]
initial
begin
	fetchedinst_expected[2] = 1'bX;
end 
// expected fetchedinst[ 1 ]
initial
begin
	fetchedinst_expected[1] = 1'bX;
end 
// expected fetchedinst[ 0 ]
initial
begin
	fetchedinst_expected[0] = 1'bX;
end 
// expected aluin1[ 7 ]
initial
begin
	aluin1_expected[7] = 1'bX;
end 
// expected aluin1[ 6 ]
initial
begin
	aluin1_expected[6] = 1'bX;
end 
// expected aluin1[ 5 ]
initial
begin
	aluin1_expected[5] = 1'bX;
end 
// expected aluin1[ 4 ]
initial
begin
	aluin1_expected[4] = 1'bX;
end 
// expected aluin1[ 3 ]
initial
begin
	aluin1_expected[3] = 1'bX;
end 
// expected aluin1[ 2 ]
initial
begin
	aluin1_expected[2] = 1'bX;
end 
// expected aluin1[ 1 ]
initial
begin
	aluin1_expected[1] = 1'bX;
end 
// expected aluin1[ 0 ]
initial
begin
	aluin1_expected[0] = 1'bX;
end 
// expected aluin2[ 7 ]
initial
begin
	aluin2_expected[7] = 1'bX;
end 
// expected aluin2[ 6 ]
initial
begin
	aluin2_expected[6] = 1'bX;
end 
// expected aluin2[ 5 ]
initial
begin
	aluin2_expected[5] = 1'bX;
end 
// expected aluin2[ 4 ]
initial
begin
	aluin2_expected[4] = 1'bX;
end 
// expected aluin2[ 3 ]
initial
begin
	aluin2_expected[3] = 1'bX;
end 
// expected aluin2[ 2 ]
initial
begin
	aluin2_expected[2] = 1'bX;
end 
// expected aluin2[ 1 ]
initial
begin
	aluin2_expected[1] = 1'bX;
end 
// expected aluin2[ 0 ]
initial
begin
	aluin2_expected[0] = 1'bX;
end 
// expected aluout[ 7 ]
initial
begin
	aluout_expected[7] = 1'bX;
end 
// expected aluout[ 6 ]
initial
begin
	aluout_expected[6] = 1'bX;
end 
// expected aluout[ 5 ]
initial
begin
	aluout_expected[5] = 1'bX;
end 
// expected aluout[ 4 ]
initial
begin
	aluout_expected[4] = 1'bX;
end 
// expected aluout[ 3 ]
initial
begin
	aluout_expected[3] = 1'bX;
end 
// expected aluout[ 2 ]
initial
begin
	aluout_expected[2] = 1'bX;
end 
// expected aluout[ 1 ]
initial
begin
	aluout_expected[1] = 1'bX;
end 
// expected aluout[ 0 ]
initial
begin
	aluout_expected[0] = 1'bX;
end 
// expected regyolu[ 7 ]
initial
begin
	regyolu_expected[7] = 1'bX;
end 
// expected regyolu[ 6 ]
initial
begin
	regyolu_expected[6] = 1'bX;
end 
// expected regyolu[ 5 ]
initial
begin
	regyolu_expected[5] = 1'bX;
end 
// expected regyolu[ 4 ]
initial
begin
	regyolu_expected[4] = 1'bX;
end 
// expected regyolu[ 3 ]
initial
begin
	regyolu_expected[3] = 1'bX;
end 
// expected regyolu[ 2 ]
initial
begin
	regyolu_expected[2] = 1'bX;
end 
// expected regyolu[ 1 ]
initial
begin
	regyolu_expected[1] = 1'bX;
end 
// expected regyolu[ 0 ]
initial
begin
	regyolu_expected[0] = 1'bX;
end 
// expected shiftercontrol[ 2 ]
initial
begin
	shiftercontrol_expected[2] = 1'bX;
end 
// expected shiftercontrol[ 1 ]
initial
begin
	shiftercontrol_expected[1] = 1'bX;
end 
// expected shiftercontrol[ 0 ]
initial
begin
	shiftercontrol_expected[0] = 1'bX;
end 
// expected shifterin[ 7 ]
initial
begin
	shifterin_expected[7] = 1'bX;
end 
// expected shifterin[ 6 ]
initial
begin
	shifterin_expected[6] = 1'bX;
end 
// expected shifterin[ 5 ]
initial
begin
	shifterin_expected[5] = 1'bX;
end 
// expected shifterin[ 4 ]
initial
begin
	shifterin_expected[4] = 1'bX;
end 
// expected shifterin[ 3 ]
initial
begin
	shifterin_expected[3] = 1'bX;
end 
// expected shifterin[ 2 ]
initial
begin
	shifterin_expected[2] = 1'bX;
end 
// expected shifterin[ 1 ]
initial
begin
	shifterin_expected[1] = 1'bX;
end 
// expected shifterin[ 0 ]
initial
begin
	shifterin_expected[0] = 1'bX;
end 
// expected shifterout[ 7 ]
initial
begin
	shifterout_expected[7] = 1'bX;
end 
// expected shifterout[ 6 ]
initial
begin
	shifterout_expected[6] = 1'bX;
end 
// expected shifterout[ 5 ]
initial
begin
	shifterout_expected[5] = 1'bX;
end 
// expected shifterout[ 4 ]
initial
begin
	shifterout_expected[4] = 1'bX;
end 
// expected shifterout[ 3 ]
initial
begin
	shifterout_expected[3] = 1'bX;
end 
// expected shifterout[ 2 ]
initial
begin
	shifterout_expected[2] = 1'bX;
end 
// expected shifterout[ 1 ]
initial
begin
	shifterout_expected[1] = 1'bX;
end 
// expected shifterout[ 0 ]
initial
begin
	shifterout_expected[0] = 1'bX;
end 
// expected shiftselectout[ 7 ]
initial
begin
	shiftselectout_expected[7] = 1'bX;
end 
// expected shiftselectout[ 6 ]
initial
begin
	shiftselectout_expected[6] = 1'bX;
end 
// expected shiftselectout[ 5 ]
initial
begin
	shiftselectout_expected[5] = 1'bX;
end 
// expected shiftselectout[ 4 ]
initial
begin
	shiftselectout_expected[4] = 1'bX;
end 
// expected shiftselectout[ 3 ]
initial
begin
	shiftselectout_expected[3] = 1'bX;
end 
// expected shiftselectout[ 2 ]
initial
begin
	shiftselectout_expected[2] = 1'bX;
end 
// expected shiftselectout[ 1 ]
initial
begin
	shiftselectout_expected[1] = 1'bX;
end 
// expected shiftselectout[ 0 ]
initial
begin
	shiftselectout_expected[0] = 1'bX;
end 
// expected r2[ 7 ]
initial
begin
	r2_expected[7] = 1'bX;
end 
// expected r2[ 6 ]
initial
begin
	r2_expected[6] = 1'bX;
end 
// expected r2[ 5 ]
initial
begin
	r2_expected[5] = 1'bX;
end 
// expected r2[ 4 ]
initial
begin
	r2_expected[4] = 1'bX;
end 
// expected r2[ 3 ]
initial
begin
	r2_expected[3] = 1'bX;
end 
// expected r2[ 2 ]
initial
begin
	r2_expected[2] = 1'bX;
end 
// expected r2[ 1 ]
initial
begin
	r2_expected[1] = 1'bX;
end 
// expected r2[ 0 ]
initial
begin
	r2_expected[0] = 1'bX;
end 
// expected r3[ 7 ]
initial
begin
	r3_expected[7] = 1'bX;
end 
// expected r3[ 6 ]
initial
begin
	r3_expected[6] = 1'bX;
end 
// expected r3[ 5 ]
initial
begin
	r3_expected[5] = 1'bX;
end 
// expected r3[ 4 ]
initial
begin
	r3_expected[4] = 1'bX;
end 
// expected r3[ 3 ]
initial
begin
	r3_expected[3] = 1'bX;
end 
// expected r3[ 2 ]
initial
begin
	r3_expected[2] = 1'bX;
end 
// expected r3[ 1 ]
initial
begin
	r3_expected[1] = 1'bX;
end 
// expected r3[ 0 ]
initial
begin
	r3_expected[0] = 1'bX;
end 

// expected zeroflag
initial
begin
	zeroflag_expected = 1'bX;
end 
// generate trigger
always @(aluin1_expected or aluin1 or aluin2_expected or aluin2 or aluout_expected or aluout or dallanma_expected or dallanma or fetchedinst_expected or fetchedinst or outpc1_expected or outpc1 or r2_expected or r2 or r3_expected or r3 or reg1out_expected or reg1out or reg2out_expected or reg2out or regadres1_expected or regadres1 or regadres2_expected or regadres2 or regyolu_expected or regyolu or shiftercontrol_expected or shiftercontrol or shifterin_expected or shifterin or shifterout_expected or shifterout or shiftselectout_expected or shiftselectout or wa_expected or wa or zeroflag_expected or zeroflag)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aluin1 = %b | expected aluin2 = %b | expected aluout = %b | expected dallanma = %b | expected fetchedinst = %b | expected outpc1 = %b | expected r2 = %b | expected r3 = %b | expected reg1out = %b | expected reg2out = %b | expected regadres1 = %b | expected regadres2 = %b | expected regyolu = %b | expected shiftercontrol = %b | expected shifterin = %b | expected shifterout = %b | expected shiftselectout = %b | expected wa = %b | expected zeroflag = %b | ",aluin1_expected_prev,aluin2_expected_prev,aluout_expected_prev,dallanma_expected_prev,fetchedinst_expected_prev,outpc1_expected_prev,r2_expected_prev,r3_expected_prev,reg1out_expected_prev,reg2out_expected_prev,regadres1_expected_prev,regadres2_expected_prev,regyolu_expected_prev,shiftercontrol_expected_prev,shifterin_expected_prev,shifterout_expected_prev,shiftselectout_expected_prev,wa_expected_prev,zeroflag_expected_prev);
	$display("| real aluin1 = %b | real aluin2 = %b | real aluout = %b | real dallanma = %b | real fetchedinst = %b | real outpc1 = %b | real r2 = %b | real r3 = %b | real reg1out = %b | real reg2out = %b | real regadres1 = %b | real regadres2 = %b | real regyolu = %b | real shiftercontrol = %b | real shifterin = %b | real shifterout = %b | real shiftselectout = %b | real wa = %b | real zeroflag = %b | ",aluin1_prev,aluin2_prev,aluout_prev,dallanma_prev,fetchedinst_prev,outpc1_prev,r2_prev,r3_prev,reg1out_prev,reg2out_prev,regadres1_prev,regadres2_prev,regyolu_prev,shiftercontrol_prev,shifterin_prev,shifterout_prev,shiftselectout_prev,wa_prev,zeroflag_prev);
`endif
	if (
		( aluin1_expected_prev[0] !== 1'bx ) && ( aluin1_prev[0] !== aluin1_expected_prev[0] )
		&& ((aluin1_expected_prev[0] !== last_aluin1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin1_expected_prev);
		$display ("     Real value = %b", aluin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluin1_exp[0] = aluin1_expected_prev[0];
	end
	if (
		( aluin1_expected_prev[1] !== 1'bx ) && ( aluin1_prev[1] !== aluin1_expected_prev[1] )
		&& ((aluin1_expected_prev[1] !== last_aluin1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin1_expected_prev);
		$display ("     Real value = %b", aluin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluin1_exp[1] = aluin1_expected_prev[1];
	end
	if (
		( aluin1_expected_prev[2] !== 1'bx ) && ( aluin1_prev[2] !== aluin1_expected_prev[2] )
		&& ((aluin1_expected_prev[2] !== last_aluin1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin1_expected_prev);
		$display ("     Real value = %b", aluin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluin1_exp[2] = aluin1_expected_prev[2];
	end
	if (
		( aluin1_expected_prev[3] !== 1'bx ) && ( aluin1_prev[3] !== aluin1_expected_prev[3] )
		&& ((aluin1_expected_prev[3] !== last_aluin1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin1_expected_prev);
		$display ("     Real value = %b", aluin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluin1_exp[3] = aluin1_expected_prev[3];
	end
	if (
		( aluin1_expected_prev[4] !== 1'bx ) && ( aluin1_prev[4] !== aluin1_expected_prev[4] )
		&& ((aluin1_expected_prev[4] !== last_aluin1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin1_expected_prev);
		$display ("     Real value = %b", aluin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluin1_exp[4] = aluin1_expected_prev[4];
	end
	if (
		( aluin1_expected_prev[5] !== 1'bx ) && ( aluin1_prev[5] !== aluin1_expected_prev[5] )
		&& ((aluin1_expected_prev[5] !== last_aluin1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin1_expected_prev);
		$display ("     Real value = %b", aluin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluin1_exp[5] = aluin1_expected_prev[5];
	end
	if (
		( aluin1_expected_prev[6] !== 1'bx ) && ( aluin1_prev[6] !== aluin1_expected_prev[6] )
		&& ((aluin1_expected_prev[6] !== last_aluin1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin1_expected_prev);
		$display ("     Real value = %b", aluin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluin1_exp[6] = aluin1_expected_prev[6];
	end
	if (
		( aluin1_expected_prev[7] !== 1'bx ) && ( aluin1_prev[7] !== aluin1_expected_prev[7] )
		&& ((aluin1_expected_prev[7] !== last_aluin1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin1_expected_prev);
		$display ("     Real value = %b", aluin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluin1_exp[7] = aluin1_expected_prev[7];
	end
	if (
		( aluin2_expected_prev[0] !== 1'bx ) && ( aluin2_prev[0] !== aluin2_expected_prev[0] )
		&& ((aluin2_expected_prev[0] !== last_aluin2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin2_expected_prev);
		$display ("     Real value = %b", aluin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluin2_exp[0] = aluin2_expected_prev[0];
	end
	if (
		( aluin2_expected_prev[1] !== 1'bx ) && ( aluin2_prev[1] !== aluin2_expected_prev[1] )
		&& ((aluin2_expected_prev[1] !== last_aluin2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin2_expected_prev);
		$display ("     Real value = %b", aluin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluin2_exp[1] = aluin2_expected_prev[1];
	end
	if (
		( aluin2_expected_prev[2] !== 1'bx ) && ( aluin2_prev[2] !== aluin2_expected_prev[2] )
		&& ((aluin2_expected_prev[2] !== last_aluin2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin2_expected_prev);
		$display ("     Real value = %b", aluin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluin2_exp[2] = aluin2_expected_prev[2];
	end
	if (
		( aluin2_expected_prev[3] !== 1'bx ) && ( aluin2_prev[3] !== aluin2_expected_prev[3] )
		&& ((aluin2_expected_prev[3] !== last_aluin2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin2_expected_prev);
		$display ("     Real value = %b", aluin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluin2_exp[3] = aluin2_expected_prev[3];
	end
	if (
		( aluin2_expected_prev[4] !== 1'bx ) && ( aluin2_prev[4] !== aluin2_expected_prev[4] )
		&& ((aluin2_expected_prev[4] !== last_aluin2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin2_expected_prev);
		$display ("     Real value = %b", aluin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluin2_exp[4] = aluin2_expected_prev[4];
	end
	if (
		( aluin2_expected_prev[5] !== 1'bx ) && ( aluin2_prev[5] !== aluin2_expected_prev[5] )
		&& ((aluin2_expected_prev[5] !== last_aluin2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin2_expected_prev);
		$display ("     Real value = %b", aluin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluin2_exp[5] = aluin2_expected_prev[5];
	end
	if (
		( aluin2_expected_prev[6] !== 1'bx ) && ( aluin2_prev[6] !== aluin2_expected_prev[6] )
		&& ((aluin2_expected_prev[6] !== last_aluin2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin2_expected_prev);
		$display ("     Real value = %b", aluin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluin2_exp[6] = aluin2_expected_prev[6];
	end
	if (
		( aluin2_expected_prev[7] !== 1'bx ) && ( aluin2_prev[7] !== aluin2_expected_prev[7] )
		&& ((aluin2_expected_prev[7] !== last_aluin2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluin2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluin2_expected_prev);
		$display ("     Real value = %b", aluin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluin2_exp[7] = aluin2_expected_prev[7];
	end
	if (
		( aluout_expected_prev[0] !== 1'bx ) && ( aluout_prev[0] !== aluout_expected_prev[0] )
		&& ((aluout_expected_prev[0] !== last_aluout_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluout_exp[0] = aluout_expected_prev[0];
	end
	if (
		( aluout_expected_prev[1] !== 1'bx ) && ( aluout_prev[1] !== aluout_expected_prev[1] )
		&& ((aluout_expected_prev[1] !== last_aluout_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluout_exp[1] = aluout_expected_prev[1];
	end
	if (
		( aluout_expected_prev[2] !== 1'bx ) && ( aluout_prev[2] !== aluout_expected_prev[2] )
		&& ((aluout_expected_prev[2] !== last_aluout_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluout_exp[2] = aluout_expected_prev[2];
	end
	if (
		( aluout_expected_prev[3] !== 1'bx ) && ( aluout_prev[3] !== aluout_expected_prev[3] )
		&& ((aluout_expected_prev[3] !== last_aluout_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluout_exp[3] = aluout_expected_prev[3];
	end
	if (
		( aluout_expected_prev[4] !== 1'bx ) && ( aluout_prev[4] !== aluout_expected_prev[4] )
		&& ((aluout_expected_prev[4] !== last_aluout_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluout_exp[4] = aluout_expected_prev[4];
	end
	if (
		( aluout_expected_prev[5] !== 1'bx ) && ( aluout_prev[5] !== aluout_expected_prev[5] )
		&& ((aluout_expected_prev[5] !== last_aluout_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluout_exp[5] = aluout_expected_prev[5];
	end
	if (
		( aluout_expected_prev[6] !== 1'bx ) && ( aluout_prev[6] !== aluout_expected_prev[6] )
		&& ((aluout_expected_prev[6] !== last_aluout_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluout_exp[6] = aluout_expected_prev[6];
	end
	if (
		( aluout_expected_prev[7] !== 1'bx ) && ( aluout_prev[7] !== aluout_expected_prev[7] )
		&& ((aluout_expected_prev[7] !== last_aluout_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluout_exp[7] = aluout_expected_prev[7];
	end
	if (
		( dallanma_expected_prev[0] !== 1'bx ) && ( dallanma_prev[0] !== dallanma_expected_prev[0] )
		&& ((dallanma_expected_prev[0] !== last_dallanma_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[0] = dallanma_expected_prev[0];
	end
	if (
		( dallanma_expected_prev[1] !== 1'bx ) && ( dallanma_prev[1] !== dallanma_expected_prev[1] )
		&& ((dallanma_expected_prev[1] !== last_dallanma_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[1] = dallanma_expected_prev[1];
	end
	if (
		( dallanma_expected_prev[2] !== 1'bx ) && ( dallanma_prev[2] !== dallanma_expected_prev[2] )
		&& ((dallanma_expected_prev[2] !== last_dallanma_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[2] = dallanma_expected_prev[2];
	end
	if (
		( dallanma_expected_prev[3] !== 1'bx ) && ( dallanma_prev[3] !== dallanma_expected_prev[3] )
		&& ((dallanma_expected_prev[3] !== last_dallanma_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[3] = dallanma_expected_prev[3];
	end
	if (
		( dallanma_expected_prev[4] !== 1'bx ) && ( dallanma_prev[4] !== dallanma_expected_prev[4] )
		&& ((dallanma_expected_prev[4] !== last_dallanma_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[4] = dallanma_expected_prev[4];
	end
	if (
		( dallanma_expected_prev[5] !== 1'bx ) && ( dallanma_prev[5] !== dallanma_expected_prev[5] )
		&& ((dallanma_expected_prev[5] !== last_dallanma_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[5] = dallanma_expected_prev[5];
	end
	if (
		( dallanma_expected_prev[6] !== 1'bx ) && ( dallanma_prev[6] !== dallanma_expected_prev[6] )
		&& ((dallanma_expected_prev[6] !== last_dallanma_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[6] = dallanma_expected_prev[6];
	end
	if (
		( dallanma_expected_prev[7] !== 1'bx ) && ( dallanma_prev[7] !== dallanma_expected_prev[7] )
		&& ((dallanma_expected_prev[7] !== last_dallanma_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[7] = dallanma_expected_prev[7];
	end
	if (
		( dallanma_expected_prev[8] !== 1'bx ) && ( dallanma_prev[8] !== dallanma_expected_prev[8] )
		&& ((dallanma_expected_prev[8] !== last_dallanma_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[8] = dallanma_expected_prev[8];
	end
	if (
		( dallanma_expected_prev[9] !== 1'bx ) && ( dallanma_prev[9] !== dallanma_expected_prev[9] )
		&& ((dallanma_expected_prev[9] !== last_dallanma_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[9] = dallanma_expected_prev[9];
	end
	if (
		( dallanma_expected_prev[10] !== 1'bx ) && ( dallanma_prev[10] !== dallanma_expected_prev[10] )
		&& ((dallanma_expected_prev[10] !== last_dallanma_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[10] = dallanma_expected_prev[10];
	end
	if (
		( dallanma_expected_prev[11] !== 1'bx ) && ( dallanma_prev[11] !== dallanma_expected_prev[11] )
		&& ((dallanma_expected_prev[11] !== last_dallanma_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[11] = dallanma_expected_prev[11];
	end
	if (
		( dallanma_expected_prev[12] !== 1'bx ) && ( dallanma_prev[12] !== dallanma_expected_prev[12] )
		&& ((dallanma_expected_prev[12] !== last_dallanma_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[12] = dallanma_expected_prev[12];
	end
	if (
		( dallanma_expected_prev[13] !== 1'bx ) && ( dallanma_prev[13] !== dallanma_expected_prev[13] )
		&& ((dallanma_expected_prev[13] !== last_dallanma_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[13] = dallanma_expected_prev[13];
	end
	if (
		( dallanma_expected_prev[14] !== 1'bx ) && ( dallanma_prev[14] !== dallanma_expected_prev[14] )
		&& ((dallanma_expected_prev[14] !== last_dallanma_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[14] = dallanma_expected_prev[14];
	end
	if (
		( dallanma_expected_prev[15] !== 1'bx ) && ( dallanma_prev[15] !== dallanma_expected_prev[15] )
		&& ((dallanma_expected_prev[15] !== last_dallanma_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dallanma[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dallanma_expected_prev);
		$display ("     Real value = %b", dallanma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dallanma_exp[15] = dallanma_expected_prev[15];
	end
	if (
		( fetchedinst_expected_prev[0] !== 1'bx ) && ( fetchedinst_prev[0] !== fetchedinst_expected_prev[0] )
		&& ((fetchedinst_expected_prev[0] !== last_fetchedinst_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[0] = fetchedinst_expected_prev[0];
	end
	if (
		( fetchedinst_expected_prev[1] !== 1'bx ) && ( fetchedinst_prev[1] !== fetchedinst_expected_prev[1] )
		&& ((fetchedinst_expected_prev[1] !== last_fetchedinst_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[1] = fetchedinst_expected_prev[1];
	end
	if (
		( fetchedinst_expected_prev[2] !== 1'bx ) && ( fetchedinst_prev[2] !== fetchedinst_expected_prev[2] )
		&& ((fetchedinst_expected_prev[2] !== last_fetchedinst_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[2] = fetchedinst_expected_prev[2];
	end
	if (
		( fetchedinst_expected_prev[3] !== 1'bx ) && ( fetchedinst_prev[3] !== fetchedinst_expected_prev[3] )
		&& ((fetchedinst_expected_prev[3] !== last_fetchedinst_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[3] = fetchedinst_expected_prev[3];
	end
	if (
		( fetchedinst_expected_prev[4] !== 1'bx ) && ( fetchedinst_prev[4] !== fetchedinst_expected_prev[4] )
		&& ((fetchedinst_expected_prev[4] !== last_fetchedinst_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[4] = fetchedinst_expected_prev[4];
	end
	if (
		( fetchedinst_expected_prev[5] !== 1'bx ) && ( fetchedinst_prev[5] !== fetchedinst_expected_prev[5] )
		&& ((fetchedinst_expected_prev[5] !== last_fetchedinst_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[5] = fetchedinst_expected_prev[5];
	end
	if (
		( fetchedinst_expected_prev[6] !== 1'bx ) && ( fetchedinst_prev[6] !== fetchedinst_expected_prev[6] )
		&& ((fetchedinst_expected_prev[6] !== last_fetchedinst_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[6] = fetchedinst_expected_prev[6];
	end
	if (
		( fetchedinst_expected_prev[7] !== 1'bx ) && ( fetchedinst_prev[7] !== fetchedinst_expected_prev[7] )
		&& ((fetchedinst_expected_prev[7] !== last_fetchedinst_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[7] = fetchedinst_expected_prev[7];
	end
	if (
		( fetchedinst_expected_prev[8] !== 1'bx ) && ( fetchedinst_prev[8] !== fetchedinst_expected_prev[8] )
		&& ((fetchedinst_expected_prev[8] !== last_fetchedinst_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[8] = fetchedinst_expected_prev[8];
	end
	if (
		( fetchedinst_expected_prev[9] !== 1'bx ) && ( fetchedinst_prev[9] !== fetchedinst_expected_prev[9] )
		&& ((fetchedinst_expected_prev[9] !== last_fetchedinst_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[9] = fetchedinst_expected_prev[9];
	end
	if (
		( fetchedinst_expected_prev[10] !== 1'bx ) && ( fetchedinst_prev[10] !== fetchedinst_expected_prev[10] )
		&& ((fetchedinst_expected_prev[10] !== last_fetchedinst_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[10] = fetchedinst_expected_prev[10];
	end
	if (
		( fetchedinst_expected_prev[11] !== 1'bx ) && ( fetchedinst_prev[11] !== fetchedinst_expected_prev[11] )
		&& ((fetchedinst_expected_prev[11] !== last_fetchedinst_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[11] = fetchedinst_expected_prev[11];
	end
	if (
		( fetchedinst_expected_prev[12] !== 1'bx ) && ( fetchedinst_prev[12] !== fetchedinst_expected_prev[12] )
		&& ((fetchedinst_expected_prev[12] !== last_fetchedinst_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[12] = fetchedinst_expected_prev[12];
	end
	if (
		( fetchedinst_expected_prev[13] !== 1'bx ) && ( fetchedinst_prev[13] !== fetchedinst_expected_prev[13] )
		&& ((fetchedinst_expected_prev[13] !== last_fetchedinst_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[13] = fetchedinst_expected_prev[13];
	end
	if (
		( fetchedinst_expected_prev[14] !== 1'bx ) && ( fetchedinst_prev[14] !== fetchedinst_expected_prev[14] )
		&& ((fetchedinst_expected_prev[14] !== last_fetchedinst_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[14] = fetchedinst_expected_prev[14];
	end
	if (
		( fetchedinst_expected_prev[15] !== 1'bx ) && ( fetchedinst_prev[15] !== fetchedinst_expected_prev[15] )
		&& ((fetchedinst_expected_prev[15] !== last_fetchedinst_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fetchedinst[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fetchedinst_expected_prev);
		$display ("     Real value = %b", fetchedinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_fetchedinst_exp[15] = fetchedinst_expected_prev[15];
	end
	if (
		( outpc1_expected_prev[0] !== 1'bx ) && ( outpc1_prev[0] !== outpc1_expected_prev[0] )
		&& ((outpc1_expected_prev[0] !== last_outpc1_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outpc1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outpc1_expected_prev);
		$display ("     Real value = %b", outpc1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outpc1_exp[0] = outpc1_expected_prev[0];
	end
	if (
		( outpc1_expected_prev[1] !== 1'bx ) && ( outpc1_prev[1] !== outpc1_expected_prev[1] )
		&& ((outpc1_expected_prev[1] !== last_outpc1_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outpc1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outpc1_expected_prev);
		$display ("     Real value = %b", outpc1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outpc1_exp[1] = outpc1_expected_prev[1];
	end
	if (
		( outpc1_expected_prev[2] !== 1'bx ) && ( outpc1_prev[2] !== outpc1_expected_prev[2] )
		&& ((outpc1_expected_prev[2] !== last_outpc1_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outpc1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outpc1_expected_prev);
		$display ("     Real value = %b", outpc1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outpc1_exp[2] = outpc1_expected_prev[2];
	end
	if (
		( outpc1_expected_prev[3] !== 1'bx ) && ( outpc1_prev[3] !== outpc1_expected_prev[3] )
		&& ((outpc1_expected_prev[3] !== last_outpc1_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outpc1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outpc1_expected_prev);
		$display ("     Real value = %b", outpc1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outpc1_exp[3] = outpc1_expected_prev[3];
	end
	if (
		( outpc1_expected_prev[4] !== 1'bx ) && ( outpc1_prev[4] !== outpc1_expected_prev[4] )
		&& ((outpc1_expected_prev[4] !== last_outpc1_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outpc1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outpc1_expected_prev);
		$display ("     Real value = %b", outpc1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outpc1_exp[4] = outpc1_expected_prev[4];
	end
	if (
		( outpc1_expected_prev[5] !== 1'bx ) && ( outpc1_prev[5] !== outpc1_expected_prev[5] )
		&& ((outpc1_expected_prev[5] !== last_outpc1_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outpc1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outpc1_expected_prev);
		$display ("     Real value = %b", outpc1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outpc1_exp[5] = outpc1_expected_prev[5];
	end
	if (
		( outpc1_expected_prev[6] !== 1'bx ) && ( outpc1_prev[6] !== outpc1_expected_prev[6] )
		&& ((outpc1_expected_prev[6] !== last_outpc1_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outpc1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outpc1_expected_prev);
		$display ("     Real value = %b", outpc1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outpc1_exp[6] = outpc1_expected_prev[6];
	end
	if (
		( outpc1_expected_prev[7] !== 1'bx ) && ( outpc1_prev[7] !== outpc1_expected_prev[7] )
		&& ((outpc1_expected_prev[7] !== last_outpc1_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outpc1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outpc1_expected_prev);
		$display ("     Real value = %b", outpc1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outpc1_exp[7] = outpc1_expected_prev[7];
	end
	if (
		( r2_expected_prev[0] !== 1'bx ) && ( r2_prev[0] !== r2_expected_prev[0] )
		&& ((r2_expected_prev[0] !== last_r2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[0] = r2_expected_prev[0];
	end
	if (
		( r2_expected_prev[1] !== 1'bx ) && ( r2_prev[1] !== r2_expected_prev[1] )
		&& ((r2_expected_prev[1] !== last_r2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[1] = r2_expected_prev[1];
	end
	if (
		( r2_expected_prev[2] !== 1'bx ) && ( r2_prev[2] !== r2_expected_prev[2] )
		&& ((r2_expected_prev[2] !== last_r2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[2] = r2_expected_prev[2];
	end
	if (
		( r2_expected_prev[3] !== 1'bx ) && ( r2_prev[3] !== r2_expected_prev[3] )
		&& ((r2_expected_prev[3] !== last_r2_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[3] = r2_expected_prev[3];
	end
	if (
		( r2_expected_prev[4] !== 1'bx ) && ( r2_prev[4] !== r2_expected_prev[4] )
		&& ((r2_expected_prev[4] !== last_r2_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[4] = r2_expected_prev[4];
	end
	if (
		( r2_expected_prev[5] !== 1'bx ) && ( r2_prev[5] !== r2_expected_prev[5] )
		&& ((r2_expected_prev[5] !== last_r2_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[5] = r2_expected_prev[5];
	end
	if (
		( r2_expected_prev[6] !== 1'bx ) && ( r2_prev[6] !== r2_expected_prev[6] )
		&& ((r2_expected_prev[6] !== last_r2_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[6] = r2_expected_prev[6];
	end
	if (
		( r2_expected_prev[7] !== 1'bx ) && ( r2_prev[7] !== r2_expected_prev[7] )
		&& ((r2_expected_prev[7] !== last_r2_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[7] = r2_expected_prev[7];
	end
	if (
		( r3_expected_prev[0] !== 1'bx ) && ( r3_prev[0] !== r3_expected_prev[0] )
		&& ((r3_expected_prev[0] !== last_r3_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[0] = r3_expected_prev[0];
	end
	if (
		( r3_expected_prev[1] !== 1'bx ) && ( r3_prev[1] !== r3_expected_prev[1] )
		&& ((r3_expected_prev[1] !== last_r3_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[1] = r3_expected_prev[1];
	end
	if (
		( r3_expected_prev[2] !== 1'bx ) && ( r3_prev[2] !== r3_expected_prev[2] )
		&& ((r3_expected_prev[2] !== last_r3_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[2] = r3_expected_prev[2];
	end
	if (
		( r3_expected_prev[3] !== 1'bx ) && ( r3_prev[3] !== r3_expected_prev[3] )
		&& ((r3_expected_prev[3] !== last_r3_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[3] = r3_expected_prev[3];
	end
	if (
		( r3_expected_prev[4] !== 1'bx ) && ( r3_prev[4] !== r3_expected_prev[4] )
		&& ((r3_expected_prev[4] !== last_r3_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[4] = r3_expected_prev[4];
	end
	if (
		( r3_expected_prev[5] !== 1'bx ) && ( r3_prev[5] !== r3_expected_prev[5] )
		&& ((r3_expected_prev[5] !== last_r3_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[5] = r3_expected_prev[5];
	end
	if (
		( r3_expected_prev[6] !== 1'bx ) && ( r3_prev[6] !== r3_expected_prev[6] )
		&& ((r3_expected_prev[6] !== last_r3_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[6] = r3_expected_prev[6];
	end
	if (
		( r3_expected_prev[7] !== 1'bx ) && ( r3_prev[7] !== r3_expected_prev[7] )
		&& ((r3_expected_prev[7] !== last_r3_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[7] = r3_expected_prev[7];
	end
	if (
		( reg1out_expected_prev[0] !== 1'bx ) && ( reg1out_prev[0] !== reg1out_expected_prev[0] )
		&& ((reg1out_expected_prev[0] !== last_reg1out_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1out_expected_prev);
		$display ("     Real value = %b", reg1out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_reg1out_exp[0] = reg1out_expected_prev[0];
	end
	if (
		( reg1out_expected_prev[1] !== 1'bx ) && ( reg1out_prev[1] !== reg1out_expected_prev[1] )
		&& ((reg1out_expected_prev[1] !== last_reg1out_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1out_expected_prev);
		$display ("     Real value = %b", reg1out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_reg1out_exp[1] = reg1out_expected_prev[1];
	end
	if (
		( reg1out_expected_prev[2] !== 1'bx ) && ( reg1out_prev[2] !== reg1out_expected_prev[2] )
		&& ((reg1out_expected_prev[2] !== last_reg1out_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1out_expected_prev);
		$display ("     Real value = %b", reg1out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_reg1out_exp[2] = reg1out_expected_prev[2];
	end
	if (
		( reg1out_expected_prev[3] !== 1'bx ) && ( reg1out_prev[3] !== reg1out_expected_prev[3] )
		&& ((reg1out_expected_prev[3] !== last_reg1out_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1out_expected_prev);
		$display ("     Real value = %b", reg1out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_reg1out_exp[3] = reg1out_expected_prev[3];
	end
	if (
		( reg1out_expected_prev[4] !== 1'bx ) && ( reg1out_prev[4] !== reg1out_expected_prev[4] )
		&& ((reg1out_expected_prev[4] !== last_reg1out_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1out_expected_prev);
		$display ("     Real value = %b", reg1out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_reg1out_exp[4] = reg1out_expected_prev[4];
	end
	if (
		( reg1out_expected_prev[5] !== 1'bx ) && ( reg1out_prev[5] !== reg1out_expected_prev[5] )
		&& ((reg1out_expected_prev[5] !== last_reg1out_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1out_expected_prev);
		$display ("     Real value = %b", reg1out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_reg1out_exp[5] = reg1out_expected_prev[5];
	end
	if (
		( reg1out_expected_prev[6] !== 1'bx ) && ( reg1out_prev[6] !== reg1out_expected_prev[6] )
		&& ((reg1out_expected_prev[6] !== last_reg1out_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1out_expected_prev);
		$display ("     Real value = %b", reg1out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_reg1out_exp[6] = reg1out_expected_prev[6];
	end
	if (
		( reg1out_expected_prev[7] !== 1'bx ) && ( reg1out_prev[7] !== reg1out_expected_prev[7] )
		&& ((reg1out_expected_prev[7] !== last_reg1out_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1out_expected_prev);
		$display ("     Real value = %b", reg1out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_reg1out_exp[7] = reg1out_expected_prev[7];
	end
	if (
		( reg2out_expected_prev[0] !== 1'bx ) && ( reg2out_prev[0] !== reg2out_expected_prev[0] )
		&& ((reg2out_expected_prev[0] !== last_reg2out_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2out_expected_prev);
		$display ("     Real value = %b", reg2out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_reg2out_exp[0] = reg2out_expected_prev[0];
	end
	if (
		( reg2out_expected_prev[1] !== 1'bx ) && ( reg2out_prev[1] !== reg2out_expected_prev[1] )
		&& ((reg2out_expected_prev[1] !== last_reg2out_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2out_expected_prev);
		$display ("     Real value = %b", reg2out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_reg2out_exp[1] = reg2out_expected_prev[1];
	end
	if (
		( reg2out_expected_prev[2] !== 1'bx ) && ( reg2out_prev[2] !== reg2out_expected_prev[2] )
		&& ((reg2out_expected_prev[2] !== last_reg2out_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2out_expected_prev);
		$display ("     Real value = %b", reg2out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_reg2out_exp[2] = reg2out_expected_prev[2];
	end
	if (
		( reg2out_expected_prev[3] !== 1'bx ) && ( reg2out_prev[3] !== reg2out_expected_prev[3] )
		&& ((reg2out_expected_prev[3] !== last_reg2out_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2out_expected_prev);
		$display ("     Real value = %b", reg2out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_reg2out_exp[3] = reg2out_expected_prev[3];
	end
	if (
		( reg2out_expected_prev[4] !== 1'bx ) && ( reg2out_prev[4] !== reg2out_expected_prev[4] )
		&& ((reg2out_expected_prev[4] !== last_reg2out_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2out_expected_prev);
		$display ("     Real value = %b", reg2out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_reg2out_exp[4] = reg2out_expected_prev[4];
	end
	if (
		( reg2out_expected_prev[5] !== 1'bx ) && ( reg2out_prev[5] !== reg2out_expected_prev[5] )
		&& ((reg2out_expected_prev[5] !== last_reg2out_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2out_expected_prev);
		$display ("     Real value = %b", reg2out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_reg2out_exp[5] = reg2out_expected_prev[5];
	end
	if (
		( reg2out_expected_prev[6] !== 1'bx ) && ( reg2out_prev[6] !== reg2out_expected_prev[6] )
		&& ((reg2out_expected_prev[6] !== last_reg2out_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2out_expected_prev);
		$display ("     Real value = %b", reg2out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_reg2out_exp[6] = reg2out_expected_prev[6];
	end
	if (
		( reg2out_expected_prev[7] !== 1'bx ) && ( reg2out_prev[7] !== reg2out_expected_prev[7] )
		&& ((reg2out_expected_prev[7] !== last_reg2out_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2out_expected_prev);
		$display ("     Real value = %b", reg2out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_reg2out_exp[7] = reg2out_expected_prev[7];
	end
	if (
		( regadres1_expected_prev[0] !== 1'bx ) && ( regadres1_prev[0] !== regadres1_expected_prev[0] )
		&& ((regadres1_expected_prev[0] !== last_regadres1_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regadres1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regadres1_expected_prev);
		$display ("     Real value = %b", regadres1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_regadres1_exp[0] = regadres1_expected_prev[0];
	end
	if (
		( regadres1_expected_prev[1] !== 1'bx ) && ( regadres1_prev[1] !== regadres1_expected_prev[1] )
		&& ((regadres1_expected_prev[1] !== last_regadres1_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regadres1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regadres1_expected_prev);
		$display ("     Real value = %b", regadres1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_regadres1_exp[1] = regadres1_expected_prev[1];
	end
	if (
		( regadres1_expected_prev[2] !== 1'bx ) && ( regadres1_prev[2] !== regadres1_expected_prev[2] )
		&& ((regadres1_expected_prev[2] !== last_regadres1_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regadres1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regadres1_expected_prev);
		$display ("     Real value = %b", regadres1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_regadres1_exp[2] = regadres1_expected_prev[2];
	end
	if (
		( regadres2_expected_prev[0] !== 1'bx ) && ( regadres2_prev[0] !== regadres2_expected_prev[0] )
		&& ((regadres2_expected_prev[0] !== last_regadres2_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regadres2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regadres2_expected_prev);
		$display ("     Real value = %b", regadres2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_regadres2_exp[0] = regadres2_expected_prev[0];
	end
	if (
		( regadres2_expected_prev[1] !== 1'bx ) && ( regadres2_prev[1] !== regadres2_expected_prev[1] )
		&& ((regadres2_expected_prev[1] !== last_regadres2_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regadres2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regadres2_expected_prev);
		$display ("     Real value = %b", regadres2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_regadres2_exp[1] = regadres2_expected_prev[1];
	end
	if (
		( regadres2_expected_prev[2] !== 1'bx ) && ( regadres2_prev[2] !== regadres2_expected_prev[2] )
		&& ((regadres2_expected_prev[2] !== last_regadres2_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regadres2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regadres2_expected_prev);
		$display ("     Real value = %b", regadres2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_regadres2_exp[2] = regadres2_expected_prev[2];
	end
	if (
		( regyolu_expected_prev[0] !== 1'bx ) && ( regyolu_prev[0] !== regyolu_expected_prev[0] )
		&& ((regyolu_expected_prev[0] !== last_regyolu_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regyolu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regyolu_expected_prev);
		$display ("     Real value = %b", regyolu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_regyolu_exp[0] = regyolu_expected_prev[0];
	end
	if (
		( regyolu_expected_prev[1] !== 1'bx ) && ( regyolu_prev[1] !== regyolu_expected_prev[1] )
		&& ((regyolu_expected_prev[1] !== last_regyolu_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regyolu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regyolu_expected_prev);
		$display ("     Real value = %b", regyolu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_regyolu_exp[1] = regyolu_expected_prev[1];
	end
	if (
		( regyolu_expected_prev[2] !== 1'bx ) && ( regyolu_prev[2] !== regyolu_expected_prev[2] )
		&& ((regyolu_expected_prev[2] !== last_regyolu_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regyolu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regyolu_expected_prev);
		$display ("     Real value = %b", regyolu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_regyolu_exp[2] = regyolu_expected_prev[2];
	end
	if (
		( regyolu_expected_prev[3] !== 1'bx ) && ( regyolu_prev[3] !== regyolu_expected_prev[3] )
		&& ((regyolu_expected_prev[3] !== last_regyolu_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regyolu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regyolu_expected_prev);
		$display ("     Real value = %b", regyolu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_regyolu_exp[3] = regyolu_expected_prev[3];
	end
	if (
		( regyolu_expected_prev[4] !== 1'bx ) && ( regyolu_prev[4] !== regyolu_expected_prev[4] )
		&& ((regyolu_expected_prev[4] !== last_regyolu_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regyolu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regyolu_expected_prev);
		$display ("     Real value = %b", regyolu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_regyolu_exp[4] = regyolu_expected_prev[4];
	end
	if (
		( regyolu_expected_prev[5] !== 1'bx ) && ( regyolu_prev[5] !== regyolu_expected_prev[5] )
		&& ((regyolu_expected_prev[5] !== last_regyolu_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regyolu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regyolu_expected_prev);
		$display ("     Real value = %b", regyolu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_regyolu_exp[5] = regyolu_expected_prev[5];
	end
	if (
		( regyolu_expected_prev[6] !== 1'bx ) && ( regyolu_prev[6] !== regyolu_expected_prev[6] )
		&& ((regyolu_expected_prev[6] !== last_regyolu_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regyolu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regyolu_expected_prev);
		$display ("     Real value = %b", regyolu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_regyolu_exp[6] = regyolu_expected_prev[6];
	end
	if (
		( regyolu_expected_prev[7] !== 1'bx ) && ( regyolu_prev[7] !== regyolu_expected_prev[7] )
		&& ((regyolu_expected_prev[7] !== last_regyolu_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regyolu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regyolu_expected_prev);
		$display ("     Real value = %b", regyolu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_regyolu_exp[7] = regyolu_expected_prev[7];
	end
	if (
		( shiftercontrol_expected_prev[0] !== 1'bx ) && ( shiftercontrol_prev[0] !== shiftercontrol_expected_prev[0] )
		&& ((shiftercontrol_expected_prev[0] !== last_shiftercontrol_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shiftercontrol[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shiftercontrol_expected_prev);
		$display ("     Real value = %b", shiftercontrol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_shiftercontrol_exp[0] = shiftercontrol_expected_prev[0];
	end
	if (
		( shiftercontrol_expected_prev[1] !== 1'bx ) && ( shiftercontrol_prev[1] !== shiftercontrol_expected_prev[1] )
		&& ((shiftercontrol_expected_prev[1] !== last_shiftercontrol_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shiftercontrol[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shiftercontrol_expected_prev);
		$display ("     Real value = %b", shiftercontrol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_shiftercontrol_exp[1] = shiftercontrol_expected_prev[1];
	end
	if (
		( shiftercontrol_expected_prev[2] !== 1'bx ) && ( shiftercontrol_prev[2] !== shiftercontrol_expected_prev[2] )
		&& ((shiftercontrol_expected_prev[2] !== last_shiftercontrol_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shiftercontrol[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shiftercontrol_expected_prev);
		$display ("     Real value = %b", shiftercontrol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_shiftercontrol_exp[2] = shiftercontrol_expected_prev[2];
	end
	if (
		( shifterin_expected_prev[0] !== 1'bx ) && ( shifterin_prev[0] !== shifterin_expected_prev[0] )
		&& ((shifterin_expected_prev[0] !== last_shifterin_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterin_expected_prev);
		$display ("     Real value = %b", shifterin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_shifterin_exp[0] = shifterin_expected_prev[0];
	end
	if (
		( shifterin_expected_prev[1] !== 1'bx ) && ( shifterin_prev[1] !== shifterin_expected_prev[1] )
		&& ((shifterin_expected_prev[1] !== last_shifterin_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterin_expected_prev);
		$display ("     Real value = %b", shifterin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_shifterin_exp[1] = shifterin_expected_prev[1];
	end
	if (
		( shifterin_expected_prev[2] !== 1'bx ) && ( shifterin_prev[2] !== shifterin_expected_prev[2] )
		&& ((shifterin_expected_prev[2] !== last_shifterin_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterin_expected_prev);
		$display ("     Real value = %b", shifterin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_shifterin_exp[2] = shifterin_expected_prev[2];
	end
	if (
		( shifterin_expected_prev[3] !== 1'bx ) && ( shifterin_prev[3] !== shifterin_expected_prev[3] )
		&& ((shifterin_expected_prev[3] !== last_shifterin_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterin_expected_prev);
		$display ("     Real value = %b", shifterin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_shifterin_exp[3] = shifterin_expected_prev[3];
	end
	if (
		( shifterin_expected_prev[4] !== 1'bx ) && ( shifterin_prev[4] !== shifterin_expected_prev[4] )
		&& ((shifterin_expected_prev[4] !== last_shifterin_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterin_expected_prev);
		$display ("     Real value = %b", shifterin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_shifterin_exp[4] = shifterin_expected_prev[4];
	end
	if (
		( shifterin_expected_prev[5] !== 1'bx ) && ( shifterin_prev[5] !== shifterin_expected_prev[5] )
		&& ((shifterin_expected_prev[5] !== last_shifterin_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterin_expected_prev);
		$display ("     Real value = %b", shifterin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_shifterin_exp[5] = shifterin_expected_prev[5];
	end
	if (
		( shifterin_expected_prev[6] !== 1'bx ) && ( shifterin_prev[6] !== shifterin_expected_prev[6] )
		&& ((shifterin_expected_prev[6] !== last_shifterin_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterin_expected_prev);
		$display ("     Real value = %b", shifterin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_shifterin_exp[6] = shifterin_expected_prev[6];
	end
	if (
		( shifterin_expected_prev[7] !== 1'bx ) && ( shifterin_prev[7] !== shifterin_expected_prev[7] )
		&& ((shifterin_expected_prev[7] !== last_shifterin_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterin_expected_prev);
		$display ("     Real value = %b", shifterin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_shifterin_exp[7] = shifterin_expected_prev[7];
	end
	if (
		( shifterout_expected_prev[0] !== 1'bx ) && ( shifterout_prev[0] !== shifterout_expected_prev[0] )
		&& ((shifterout_expected_prev[0] !== last_shifterout_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterout_expected_prev);
		$display ("     Real value = %b", shifterout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_shifterout_exp[0] = shifterout_expected_prev[0];
	end
	if (
		( shifterout_expected_prev[1] !== 1'bx ) && ( shifterout_prev[1] !== shifterout_expected_prev[1] )
		&& ((shifterout_expected_prev[1] !== last_shifterout_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterout_expected_prev);
		$display ("     Real value = %b", shifterout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_shifterout_exp[1] = shifterout_expected_prev[1];
	end
	if (
		( shifterout_expected_prev[2] !== 1'bx ) && ( shifterout_prev[2] !== shifterout_expected_prev[2] )
		&& ((shifterout_expected_prev[2] !== last_shifterout_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterout_expected_prev);
		$display ("     Real value = %b", shifterout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_shifterout_exp[2] = shifterout_expected_prev[2];
	end
	if (
		( shifterout_expected_prev[3] !== 1'bx ) && ( shifterout_prev[3] !== shifterout_expected_prev[3] )
		&& ((shifterout_expected_prev[3] !== last_shifterout_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterout_expected_prev);
		$display ("     Real value = %b", shifterout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_shifterout_exp[3] = shifterout_expected_prev[3];
	end
	if (
		( shifterout_expected_prev[4] !== 1'bx ) && ( shifterout_prev[4] !== shifterout_expected_prev[4] )
		&& ((shifterout_expected_prev[4] !== last_shifterout_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterout_expected_prev);
		$display ("     Real value = %b", shifterout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_shifterout_exp[4] = shifterout_expected_prev[4];
	end
	if (
		( shifterout_expected_prev[5] !== 1'bx ) && ( shifterout_prev[5] !== shifterout_expected_prev[5] )
		&& ((shifterout_expected_prev[5] !== last_shifterout_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterout_expected_prev);
		$display ("     Real value = %b", shifterout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_shifterout_exp[5] = shifterout_expected_prev[5];
	end
	if (
		( shifterout_expected_prev[6] !== 1'bx ) && ( shifterout_prev[6] !== shifterout_expected_prev[6] )
		&& ((shifterout_expected_prev[6] !== last_shifterout_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterout_expected_prev);
		$display ("     Real value = %b", shifterout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_shifterout_exp[6] = shifterout_expected_prev[6];
	end
	if (
		( shifterout_expected_prev[7] !== 1'bx ) && ( shifterout_prev[7] !== shifterout_expected_prev[7] )
		&& ((shifterout_expected_prev[7] !== last_shifterout_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shifterout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shifterout_expected_prev);
		$display ("     Real value = %b", shifterout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_shifterout_exp[7] = shifterout_expected_prev[7];
	end
	if (
		( shiftselectout_expected_prev[0] !== 1'bx ) && ( shiftselectout_prev[0] !== shiftselectout_expected_prev[0] )
		&& ((shiftselectout_expected_prev[0] !== last_shiftselectout_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shiftselectout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shiftselectout_expected_prev);
		$display ("     Real value = %b", shiftselectout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_shiftselectout_exp[0] = shiftselectout_expected_prev[0];
	end
	if (
		( shiftselectout_expected_prev[1] !== 1'bx ) && ( shiftselectout_prev[1] !== shiftselectout_expected_prev[1] )
		&& ((shiftselectout_expected_prev[1] !== last_shiftselectout_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shiftselectout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shiftselectout_expected_prev);
		$display ("     Real value = %b", shiftselectout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_shiftselectout_exp[1] = shiftselectout_expected_prev[1];
	end
	if (
		( shiftselectout_expected_prev[2] !== 1'bx ) && ( shiftselectout_prev[2] !== shiftselectout_expected_prev[2] )
		&& ((shiftselectout_expected_prev[2] !== last_shiftselectout_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shiftselectout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shiftselectout_expected_prev);
		$display ("     Real value = %b", shiftselectout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_shiftselectout_exp[2] = shiftselectout_expected_prev[2];
	end
	if (
		( shiftselectout_expected_prev[3] !== 1'bx ) && ( shiftselectout_prev[3] !== shiftselectout_expected_prev[3] )
		&& ((shiftselectout_expected_prev[3] !== last_shiftselectout_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shiftselectout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shiftselectout_expected_prev);
		$display ("     Real value = %b", shiftselectout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_shiftselectout_exp[3] = shiftselectout_expected_prev[3];
	end
	if (
		( shiftselectout_expected_prev[4] !== 1'bx ) && ( shiftselectout_prev[4] !== shiftselectout_expected_prev[4] )
		&& ((shiftselectout_expected_prev[4] !== last_shiftselectout_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shiftselectout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shiftselectout_expected_prev);
		$display ("     Real value = %b", shiftselectout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_shiftselectout_exp[4] = shiftselectout_expected_prev[4];
	end
	if (
		( shiftselectout_expected_prev[5] !== 1'bx ) && ( shiftselectout_prev[5] !== shiftselectout_expected_prev[5] )
		&& ((shiftselectout_expected_prev[5] !== last_shiftselectout_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shiftselectout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shiftselectout_expected_prev);
		$display ("     Real value = %b", shiftselectout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_shiftselectout_exp[5] = shiftselectout_expected_prev[5];
	end
	if (
		( shiftselectout_expected_prev[6] !== 1'bx ) && ( shiftselectout_prev[6] !== shiftselectout_expected_prev[6] )
		&& ((shiftselectout_expected_prev[6] !== last_shiftselectout_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shiftselectout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shiftselectout_expected_prev);
		$display ("     Real value = %b", shiftselectout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_shiftselectout_exp[6] = shiftselectout_expected_prev[6];
	end
	if (
		( shiftselectout_expected_prev[7] !== 1'bx ) && ( shiftselectout_prev[7] !== shiftselectout_expected_prev[7] )
		&& ((shiftselectout_expected_prev[7] !== last_shiftselectout_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shiftselectout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shiftselectout_expected_prev);
		$display ("     Real value = %b", shiftselectout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_shiftselectout_exp[7] = shiftselectout_expected_prev[7];
	end
	if (
		( wa_expected_prev[0] !== 1'bx ) && ( wa_prev[0] !== wa_expected_prev[0] )
		&& ((wa_expected_prev[0] !== last_wa_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wa[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wa_expected_prev);
		$display ("     Real value = %b", wa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wa_exp[0] = wa_expected_prev[0];
	end
	if (
		( wa_expected_prev[1] !== 1'bx ) && ( wa_prev[1] !== wa_expected_prev[1] )
		&& ((wa_expected_prev[1] !== last_wa_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wa[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wa_expected_prev);
		$display ("     Real value = %b", wa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wa_exp[1] = wa_expected_prev[1];
	end
	if (
		( wa_expected_prev[2] !== 1'bx ) && ( wa_prev[2] !== wa_expected_prev[2] )
		&& ((wa_expected_prev[2] !== last_wa_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wa[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wa_expected_prev);
		$display ("     Real value = %b", wa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wa_exp[2] = wa_expected_prev[2];
	end
	if (
		( zeroflag_expected_prev !== 1'bx ) && ( zeroflag_prev !== zeroflag_expected_prev )
		&& ((zeroflag_expected_prev !== last_zeroflag_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zeroflag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zeroflag_expected_prev);
		$display ("     Real value = %b", zeroflag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_zeroflag_exp = zeroflag_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#3800000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module multicycle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg resetpc;
// wires                                               
wire [7:0] aluin1;
wire [7:0] aluin2;
wire [7:0] aluout;
wire [15:0] dallanma;
wire [15:0] fetchedinst;
wire [7:0] outpc1;
wire [7:0] r2;
wire [7:0] r3;
wire [7:0] reg1out;
wire [7:0] reg2out;
wire [2:0] regadres1;
wire [2:0] regadres2;
wire [7:0] regyolu;
wire [2:0] shiftercontrol;
wire [7:0] shifterin;
wire [7:0] shifterout;
wire [7:0] shiftselectout;
wire [2:0] wa;
wire zeroflag;

wire sampler;                             

// assign statements (if any)                          
multicycle i1 (
// port map - connection between master ports and signals/registers   
	.aluin1(aluin1),
	.aluin2(aluin2),
	.aluout(aluout),
	.clk(clk),
	.dallanma(dallanma),
	.fetchedinst(fetchedinst),
	.outpc1(outpc1),
	.r2(r2),
	.r3(r3),
	.reg1out(reg1out),
	.reg2out(reg2out),
	.regadres1(regadres1),
	.regadres2(regadres2),
	.regyolu(regyolu),
	.resetpc(resetpc),
	.shiftercontrol(shiftercontrol),
	.shifterin(shifterin),
	.shifterout(shifterout),
	.shiftselectout(shiftselectout),
	.wa(wa),
	.zeroflag(zeroflag)
);

// resetpc
initial
begin
	resetpc = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

multicycle_vlg_sample_tst tb_sample (
	.clk(clk),
	.resetpc(resetpc),
	.sampler_tx(sampler)
);

multicycle_vlg_check_tst tb_out(
	.aluin1(aluin1),
	.aluin2(aluin2),
	.aluout(aluout),
	.dallanma(dallanma),
	.fetchedinst(fetchedinst),
	.outpc1(outpc1),
	.r2(r2),
	.r3(r3),
	.reg1out(reg1out),
	.reg2out(reg2out),
	.regadres1(regadres1),
	.regadres2(regadres2),
	.regyolu(regyolu),
	.shiftercontrol(shiftercontrol),
	.shifterin(shifterin),
	.shifterout(shifterout),
	.shiftselectout(shiftselectout),
	.wa(wa),
	.zeroflag(zeroflag),
	.sampler_rx(sampler)
);
endmodule

