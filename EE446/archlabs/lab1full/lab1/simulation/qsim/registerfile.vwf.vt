// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/27/2018 22:07:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    registerfile
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module registerfile_vlg_sample_tst(
	addrin,
	addrout1,
	addrout2,
	clk,
	datain,
	enable,
	reset,
	sampler_tx
);
input [1:0] addrin;
input [1:0] addrout1;
input [1:0] addrout2;
input  clk;
input [3:0] datain;
input  enable;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(addrin or addrout1 or addrout2 or clk or datain or enable or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module registerfile_vlg_check_tst (
	dataA,
	dataB,
	sampler_rx
);
input [3:0] dataA;
input [3:0] dataB;
input sampler_rx;

reg [3:0] dataA_expected;
reg [3:0] dataB_expected;

reg [3:0] dataA_prev;
reg [3:0] dataB_prev;

reg [3:0] dataA_expected_prev;
reg [3:0] dataB_expected_prev;

reg [3:0] last_dataA_exp;
reg [3:0] last_dataB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	dataA_prev = dataA;
	dataB_prev = dataB;
end

// update expected /o prevs

always @(trigger)
begin
	dataA_expected_prev = dataA_expected;
	dataB_expected_prev = dataB_expected;
end


// expected dataA[ 3 ]
initial
begin
	dataA_expected[3] = 1'bX;
end 
// expected dataA[ 2 ]
initial
begin
	dataA_expected[2] = 1'bX;
end 
// expected dataA[ 1 ]
initial
begin
	dataA_expected[1] = 1'bX;
end 
// expected dataA[ 0 ]
initial
begin
	dataA_expected[0] = 1'bX;
end 
// expected dataB[ 3 ]
initial
begin
	dataB_expected[3] = 1'bX;
end 
// expected dataB[ 2 ]
initial
begin
	dataB_expected[2] = 1'bX;
end 
// expected dataB[ 1 ]
initial
begin
	dataB_expected[1] = 1'bX;
end 
// expected dataB[ 0 ]
initial
begin
	dataB_expected[0] = 1'bX;
end 
// generate trigger
always @(dataA_expected or dataA or dataB_expected or dataB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dataA = %b | expected dataB = %b | ",dataA_expected_prev,dataB_expected_prev);
	$display("| real dataA = %b | real dataB = %b | ",dataA_prev,dataB_prev);
`endif
	if (
		( dataA_expected_prev[0] !== 1'bx ) && ( dataA_prev[0] !== dataA_expected_prev[0] )
		&& ((dataA_expected_prev[0] !== last_dataA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataA_expected_prev);
		$display ("     Real value = %b", dataA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataA_exp[0] = dataA_expected_prev[0];
	end
	if (
		( dataA_expected_prev[1] !== 1'bx ) && ( dataA_prev[1] !== dataA_expected_prev[1] )
		&& ((dataA_expected_prev[1] !== last_dataA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataA_expected_prev);
		$display ("     Real value = %b", dataA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataA_exp[1] = dataA_expected_prev[1];
	end
	if (
		( dataA_expected_prev[2] !== 1'bx ) && ( dataA_prev[2] !== dataA_expected_prev[2] )
		&& ((dataA_expected_prev[2] !== last_dataA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataA_expected_prev);
		$display ("     Real value = %b", dataA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataA_exp[2] = dataA_expected_prev[2];
	end
	if (
		( dataA_expected_prev[3] !== 1'bx ) && ( dataA_prev[3] !== dataA_expected_prev[3] )
		&& ((dataA_expected_prev[3] !== last_dataA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataA_expected_prev);
		$display ("     Real value = %b", dataA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataA_exp[3] = dataA_expected_prev[3];
	end
	if (
		( dataB_expected_prev[0] !== 1'bx ) && ( dataB_prev[0] !== dataB_expected_prev[0] )
		&& ((dataB_expected_prev[0] !== last_dataB_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataB_expected_prev);
		$display ("     Real value = %b", dataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dataB_exp[0] = dataB_expected_prev[0];
	end
	if (
		( dataB_expected_prev[1] !== 1'bx ) && ( dataB_prev[1] !== dataB_expected_prev[1] )
		&& ((dataB_expected_prev[1] !== last_dataB_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataB_expected_prev);
		$display ("     Real value = %b", dataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dataB_exp[1] = dataB_expected_prev[1];
	end
	if (
		( dataB_expected_prev[2] !== 1'bx ) && ( dataB_prev[2] !== dataB_expected_prev[2] )
		&& ((dataB_expected_prev[2] !== last_dataB_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataB_expected_prev);
		$display ("     Real value = %b", dataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dataB_exp[2] = dataB_expected_prev[2];
	end
	if (
		( dataB_expected_prev[3] !== 1'bx ) && ( dataB_prev[3] !== dataB_expected_prev[3] )
		&& ((dataB_expected_prev[3] !== last_dataB_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataB_expected_prev);
		$display ("     Real value = %b", dataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dataB_exp[3] = dataB_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module registerfile_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] addrin;
reg [1:0] addrout1;
reg [1:0] addrout2;
reg clk;
reg [3:0] datain;
reg enable;
reg reset;
// wires                                               
wire [3:0] dataA;
wire [3:0] dataB;

wire sampler;                             

// assign statements (if any)                          
registerfile i1 (
// port map - connection between master ports and signals/registers   
	.addrin(addrin),
	.addrout1(addrout1),
	.addrout2(addrout2),
	.clk(clk),
	.dataA(dataA),
	.dataB(dataB),
	.datain(datain),
	.enable(enable),
	.reset(reset)
);
// datain[ 3 ]
initial
begin
	datain[3] = 1'b0;
	datain[3] = #10000 1'b1;
	datain[3] = #320000 1'b0;
end 
// datain[ 2 ]
initial
begin
	datain[2] = 1'b0;
	datain[2] = #10000 1'b1;
	datain[2] = #320000 1'b0;
end 
// datain[ 1 ]
initial
begin
	datain[1] = 1'b0;
	datain[1] = #10000 1'b1;
	datain[1] = #320000 1'b0;
	datain[1] = #70000 1'b1;
	datain[1] = #90000 1'b0;
end 
// datain[ 0 ]
initial
begin
	datain[0] = 1'b0;
	datain[0] = #10000 1'b1;
	datain[0] = #320000 1'b0;
	datain[0] = #70000 1'b1;
	datain[0] = #90000 1'b0;
end 
// addrin[ 1 ]
initial
begin
	addrin[1] = 1'b0;
end 
// addrin[ 0 ]
initial
begin
	addrin[0] = 1'b0;
	addrin[0] = #430000 1'b1;
	addrin[0] = #40000 1'b0;
end 
// addrout1[ 1 ]
initial
begin
	addrout1[1] = 1'b0;
end 
// addrout1[ 0 ]
initial
begin
	addrout1[0] = 1'b1;
end 
// addrout2[ 1 ]
initial
begin
	addrout2[1] = 1'b0;
end 
// addrout2[ 0 ]
initial
begin
	addrout2[0] = 1'b0;
end 

// enable
initial
begin
	enable = 1'b0;
	enable = #140000 1'b1;
	enable = #200000 1'b0;
	enable = #90000 1'b1;
	enable = #60000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #660000 1'b1;
	reset = #60000 1'b0;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #40000 1'b1;
	clk = #50000 1'b0;
	clk = #90000 1'b1;
	clk = #60000 1'b0;
	clk = #140000 1'b1;
	clk = #50000 1'b0;
	clk = #20000 1'b1;
	clk = #20000 1'b0;
	clk = #200000 1'b1;
	clk = #40000 1'b0;
end 

registerfile_vlg_sample_tst tb_sample (
	.addrin(addrin),
	.addrout1(addrout1),
	.addrout2(addrout2),
	.clk(clk),
	.datain(datain),
	.enable(enable),
	.reset(reset),
	.sampler_tx(sampler)
);

registerfile_vlg_check_tst tb_out(
	.dataA(dataA),
	.dataB(dataB),
	.sampler_rx(sampler)
);
endmodule

