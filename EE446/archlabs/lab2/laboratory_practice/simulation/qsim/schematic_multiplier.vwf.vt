// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/02/2018 17:38:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    schematic_multiplier
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module schematic_multiplier_vlg_sample_tst(
	a,
	b,
	clk,
	enable1,
	enable2,
	enableout,
	lrshift0,
	lrshift1,
	psload,
	reset,
	sampler_tx
);
input [7:0] a;
input [7:0] b;
input  clk;
input  enable1;
input  enable2;
input  enableout;
input  lrshift0;
input  lrshift1;
input  psload;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or clk or enable1 or enable2 or enableout or lrshift0 or lrshift1 or psload or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module schematic_multiplier_vlg_check_tst (
	out_multp,
	sampler_rx
);
input [15:0] out_multp;
input sampler_rx;

reg [15:0] out_multp_expected;

reg [15:0] out_multp_prev;

reg [15:0] out_multp_expected_prev;

reg [15:0] last_out_multp_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	out_multp_prev = out_multp;
end

// update expected /o prevs

always @(trigger)
begin
	out_multp_expected_prev = out_multp_expected;
end


// expected out_multp[ 15 ]
initial
begin
	out_multp_expected[15] = 1'bX;
end 
// expected out_multp[ 14 ]
initial
begin
	out_multp_expected[14] = 1'bX;
end 
// expected out_multp[ 13 ]
initial
begin
	out_multp_expected[13] = 1'bX;
end 
// expected out_multp[ 12 ]
initial
begin
	out_multp_expected[12] = 1'bX;
end 
// expected out_multp[ 11 ]
initial
begin
	out_multp_expected[11] = 1'bX;
end 
// expected out_multp[ 10 ]
initial
begin
	out_multp_expected[10] = 1'bX;
end 
// expected out_multp[ 9 ]
initial
begin
	out_multp_expected[9] = 1'bX;
end 
// expected out_multp[ 8 ]
initial
begin
	out_multp_expected[8] = 1'bX;
end 
// expected out_multp[ 7 ]
initial
begin
	out_multp_expected[7] = 1'bX;
end 
// expected out_multp[ 6 ]
initial
begin
	out_multp_expected[6] = 1'bX;
end 
// expected out_multp[ 5 ]
initial
begin
	out_multp_expected[5] = 1'bX;
end 
// expected out_multp[ 4 ]
initial
begin
	out_multp_expected[4] = 1'bX;
end 
// expected out_multp[ 3 ]
initial
begin
	out_multp_expected[3] = 1'bX;
end 
// expected out_multp[ 2 ]
initial
begin
	out_multp_expected[2] = 1'bX;
end 
// expected out_multp[ 1 ]
initial
begin
	out_multp_expected[1] = 1'bX;
end 
// expected out_multp[ 0 ]
initial
begin
	out_multp_expected[0] = 1'bX;
end 
// generate trigger
always @(out_multp_expected or out_multp)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out_multp = %b | ",out_multp_expected_prev);
	$display("| real out_multp = %b | ",out_multp_prev);
`endif
	if (
		( out_multp_expected_prev[0] !== 1'bx ) && ( out_multp_prev[0] !== out_multp_expected_prev[0] )
		&& ((out_multp_expected_prev[0] !== last_out_multp_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[0] = out_multp_expected_prev[0];
	end
	if (
		( out_multp_expected_prev[1] !== 1'bx ) && ( out_multp_prev[1] !== out_multp_expected_prev[1] )
		&& ((out_multp_expected_prev[1] !== last_out_multp_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[1] = out_multp_expected_prev[1];
	end
	if (
		( out_multp_expected_prev[2] !== 1'bx ) && ( out_multp_prev[2] !== out_multp_expected_prev[2] )
		&& ((out_multp_expected_prev[2] !== last_out_multp_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[2] = out_multp_expected_prev[2];
	end
	if (
		( out_multp_expected_prev[3] !== 1'bx ) && ( out_multp_prev[3] !== out_multp_expected_prev[3] )
		&& ((out_multp_expected_prev[3] !== last_out_multp_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[3] = out_multp_expected_prev[3];
	end
	if (
		( out_multp_expected_prev[4] !== 1'bx ) && ( out_multp_prev[4] !== out_multp_expected_prev[4] )
		&& ((out_multp_expected_prev[4] !== last_out_multp_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[4] = out_multp_expected_prev[4];
	end
	if (
		( out_multp_expected_prev[5] !== 1'bx ) && ( out_multp_prev[5] !== out_multp_expected_prev[5] )
		&& ((out_multp_expected_prev[5] !== last_out_multp_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[5] = out_multp_expected_prev[5];
	end
	if (
		( out_multp_expected_prev[6] !== 1'bx ) && ( out_multp_prev[6] !== out_multp_expected_prev[6] )
		&& ((out_multp_expected_prev[6] !== last_out_multp_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[6] = out_multp_expected_prev[6];
	end
	if (
		( out_multp_expected_prev[7] !== 1'bx ) && ( out_multp_prev[7] !== out_multp_expected_prev[7] )
		&& ((out_multp_expected_prev[7] !== last_out_multp_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[7] = out_multp_expected_prev[7];
	end
	if (
		( out_multp_expected_prev[8] !== 1'bx ) && ( out_multp_prev[8] !== out_multp_expected_prev[8] )
		&& ((out_multp_expected_prev[8] !== last_out_multp_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[8] = out_multp_expected_prev[8];
	end
	if (
		( out_multp_expected_prev[9] !== 1'bx ) && ( out_multp_prev[9] !== out_multp_expected_prev[9] )
		&& ((out_multp_expected_prev[9] !== last_out_multp_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[9] = out_multp_expected_prev[9];
	end
	if (
		( out_multp_expected_prev[10] !== 1'bx ) && ( out_multp_prev[10] !== out_multp_expected_prev[10] )
		&& ((out_multp_expected_prev[10] !== last_out_multp_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[10] = out_multp_expected_prev[10];
	end
	if (
		( out_multp_expected_prev[11] !== 1'bx ) && ( out_multp_prev[11] !== out_multp_expected_prev[11] )
		&& ((out_multp_expected_prev[11] !== last_out_multp_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[11] = out_multp_expected_prev[11];
	end
	if (
		( out_multp_expected_prev[12] !== 1'bx ) && ( out_multp_prev[12] !== out_multp_expected_prev[12] )
		&& ((out_multp_expected_prev[12] !== last_out_multp_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[12] = out_multp_expected_prev[12];
	end
	if (
		( out_multp_expected_prev[13] !== 1'bx ) && ( out_multp_prev[13] !== out_multp_expected_prev[13] )
		&& ((out_multp_expected_prev[13] !== last_out_multp_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[13] = out_multp_expected_prev[13];
	end
	if (
		( out_multp_expected_prev[14] !== 1'bx ) && ( out_multp_prev[14] !== out_multp_expected_prev[14] )
		&& ((out_multp_expected_prev[14] !== last_out_multp_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[14] = out_multp_expected_prev[14];
	end
	if (
		( out_multp_expected_prev[15] !== 1'bx ) && ( out_multp_prev[15] !== out_multp_expected_prev[15] )
		&& ((out_multp_expected_prev[15] !== last_out_multp_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_multp[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_multp_expected_prev);
		$display ("     Real value = %b", out_multp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_multp_exp[15] = out_multp_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module schematic_multiplier_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] a;
reg [7:0] b;
reg clk;
reg enable1;
reg enable2;
reg enableout;
reg lrshift0;
reg lrshift1;
reg psload;
reg reset;
// wires                                               
wire [15:0] out_multp;

wire sampler;                             

// assign statements (if any)                          
schematic_multiplier i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.clk(clk),
	.enable1(enable1),
	.enable2(enable2),
	.enableout(enableout),
	.lrshift0(lrshift0),
	.lrshift1(lrshift1),
	.out_multp(out_multp),
	.psload(psload),
	.reset(reset)
);

// reset
initial
begin
	reset = 1'b0;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b1;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b1;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b1;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b1;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b1;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b1;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #30000 1'b1;
	clk = #30000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	# 30000;
	repeat(14)
	begin
		clk = 1'b0;
		clk = #30000 1'b1;
		# 30000;
	end
	clk = 1'b0;
	clk = #30000 1'b1;
end 

// enable1
initial
begin
	enable1 = 1'b0;
	enable1 = #10000 1'b1;
	enable1 = #30000 1'b0;
	enable1 = #90000 1'b1;
	enable1 = #40000 1'b0;
	enable1 = #90000 1'b1;
	enable1 = #20000 1'b0;
	enable1 = #90000 1'b1;
	enable1 = #30000 1'b0;
	enable1 = #90000 1'b1;
	enable1 = #30000 1'b0;
	enable1 = #90000 1'b1;
	enable1 = #30000 1'b0;
	enable1 = #90000 1'b1;
	enable1 = #30000 1'b0;
	enable1 = #90000 1'b1;
	enable1 = #30000 1'b0;
end 

// enable2
initial
begin
	enable2 = 1'b0;
	enable2 = #10000 1'b1;
	enable2 = #30000 1'b0;
	enable2 = #20000 1'b1;
	enable2 = #20000 1'b0;
	enable2 = #50000 1'b1;
	enable2 = #40000 1'b0;
	enable2 = #90000 1'b1;
	enable2 = #20000 1'b0;
	enable2 = #90000 1'b1;
	enable2 = #30000 1'b0;
	enable2 = #90000 1'b1;
	enable2 = #30000 1'b0;
	enable2 = #90000 1'b1;
	enable2 = #30000 1'b0;
	enable2 = #90000 1'b1;
	enable2 = #30000 1'b0;
	enable2 = #90000 1'b1;
	enable2 = #30000 1'b0;
end 

// enableout
initial
begin
	enableout = 1'b0;
	enableout = #80000 1'b1;
	enableout = #20000 1'b0;
	enableout = #100000 1'b1;
	enableout = #20000 1'b0;
	enableout = #90000 1'b1;
	enableout = #30000 1'b0;
	enableout = #100000 1'b1;
	enableout = #20000 1'b0;
	enableout = #100000 1'b1;
	enableout = #20000 1'b0;
	enableout = #100000 1'b1;
	enableout = #20000 1'b0;
	enableout = #100000 1'b1;
	enableout = #20000 1'b0;
	enableout = #90000 1'b1;
	enableout = #30000 1'b0;
end 

// lrshift0
initial
begin
	lrshift0 = 1'b0;
end 

// lrshift1
initial
begin
	lrshift1 = 1'b0;
	lrshift1 = #60000 1'b1;
	lrshift1 = #920000 1'b0;
end 

// psload
initial
begin
	psload = 1'b0;
	psload = #10000 1'b1;
	psload = #50000 1'b0;
end 

schematic_multiplier_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.clk(clk),
	.enable1(enable1),
	.enable2(enable2),
	.enableout(enableout),
	.lrshift0(lrshift0),
	.lrshift1(lrshift1),
	.psload(psload),
	.reset(reset),
	.sampler_tx(sampler)
);

schematic_multiplier_vlg_check_tst tb_out(
	.out_multp(out_multp),
	.sampler_rx(sampler)
);
endmodule

