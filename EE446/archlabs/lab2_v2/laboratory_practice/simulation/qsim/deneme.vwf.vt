// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2018 22:41:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    deneme
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module deneme_vlg_sample_tst(
	clock,
	compute,
	data_in,
	load,
	op,
	reset,
	sampler_tx
);
input  clock;
input  compute;
input [7:0] data_in;
input  load;
input [2:0] op;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clock or compute or data_in or load or op or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module deneme_vlg_check_tst (
	actualstate,
	error,
	outr0,
	outr1,
	quotient,
	sampler_rx
);
input [4:0] actualstate;
input  error;
input [7:0] outr0;
input [7:0] outr1;
input [7:0] quotient;
input sampler_rx;

reg [4:0] actualstate_expected;
reg  error_expected;
reg [7:0] outr0_expected;
reg [7:0] outr1_expected;
reg [7:0] quotient_expected;

reg [4:0] actualstate_prev;
reg  error_prev;
reg [7:0] outr0_prev;
reg [7:0] outr1_prev;
reg [7:0] quotient_prev;

reg [4:0] actualstate_expected_prev;
reg  error_expected_prev;
reg [7:0] outr0_expected_prev;
reg [7:0] outr1_expected_prev;
reg [7:0] quotient_expected_prev;

reg [4:0] last_actualstate_exp;
reg  last_error_exp;
reg [7:0] last_outr0_exp;
reg [7:0] last_outr1_exp;
reg [7:0] last_quotient_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	actualstate_prev = actualstate;
	error_prev = error;
	outr0_prev = outr0;
	outr1_prev = outr1;
	quotient_prev = quotient;
end

// update expected /o prevs

always @(trigger)
begin
	actualstate_expected_prev = actualstate_expected;
	error_expected_prev = error_expected;
	outr0_expected_prev = outr0_expected;
	outr1_expected_prev = outr1_expected;
	quotient_expected_prev = quotient_expected;
end


// expected outr0[ 7 ]
initial
begin
	outr0_expected[7] = 1'bX;
end 
// expected outr0[ 6 ]
initial
begin
	outr0_expected[6] = 1'bX;
end 
// expected outr0[ 5 ]
initial
begin
	outr0_expected[5] = 1'bX;
end 
// expected outr0[ 4 ]
initial
begin
	outr0_expected[4] = 1'bX;
end 
// expected outr0[ 3 ]
initial
begin
	outr0_expected[3] = 1'bX;
end 
// expected outr0[ 2 ]
initial
begin
	outr0_expected[2] = 1'bX;
end 
// expected outr0[ 1 ]
initial
begin
	outr0_expected[1] = 1'bX;
end 
// expected outr0[ 0 ]
initial
begin
	outr0_expected[0] = 1'bX;
end 
// expected outr1[ 7 ]
initial
begin
	outr1_expected[7] = 1'bX;
end 
// expected outr1[ 6 ]
initial
begin
	outr1_expected[6] = 1'bX;
end 
// expected outr1[ 5 ]
initial
begin
	outr1_expected[5] = 1'bX;
end 
// expected outr1[ 4 ]
initial
begin
	outr1_expected[4] = 1'bX;
end 
// expected outr1[ 3 ]
initial
begin
	outr1_expected[3] = 1'bX;
end 
// expected outr1[ 2 ]
initial
begin
	outr1_expected[2] = 1'bX;
end 
// expected outr1[ 1 ]
initial
begin
	outr1_expected[1] = 1'bX;
end 
// expected outr1[ 0 ]
initial
begin
	outr1_expected[0] = 1'bX;
end 
// expected quotient[ 7 ]
initial
begin
	quotient_expected[7] = 1'bX;
end 
// expected quotient[ 6 ]
initial
begin
	quotient_expected[6] = 1'bX;
end 
// expected quotient[ 5 ]
initial
begin
	quotient_expected[5] = 1'bX;
end 
// expected quotient[ 4 ]
initial
begin
	quotient_expected[4] = 1'bX;
end 
// expected quotient[ 3 ]
initial
begin
	quotient_expected[3] = 1'bX;
end 
// expected quotient[ 2 ]
initial
begin
	quotient_expected[2] = 1'bX;
end 
// expected quotient[ 1 ]
initial
begin
	quotient_expected[1] = 1'bX;
end 
// expected quotient[ 0 ]
initial
begin
	quotient_expected[0] = 1'bX;
end 

// expected error
initial
begin
	error_expected = 1'bX;
end 
// expected actualstate[ 4 ]
initial
begin
	actualstate_expected[4] = 1'bX;
end 
// expected actualstate[ 3 ]
initial
begin
	actualstate_expected[3] = 1'bX;
end 
// expected actualstate[ 2 ]
initial
begin
	actualstate_expected[2] = 1'bX;
end 
// expected actualstate[ 1 ]
initial
begin
	actualstate_expected[1] = 1'bX;
end 
// expected actualstate[ 0 ]
initial
begin
	actualstate_expected[0] = 1'bX;
end 
// generate trigger
always @(actualstate_expected or actualstate or error_expected or error or outr0_expected or outr0 or outr1_expected or outr1 or quotient_expected or quotient)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected actualstate = %b | expected error = %b | expected outr0 = %b | expected outr1 = %b | expected quotient = %b | ",actualstate_expected_prev,error_expected_prev,outr0_expected_prev,outr1_expected_prev,quotient_expected_prev);
	$display("| real actualstate = %b | real error = %b | real outr0 = %b | real outr1 = %b | real quotient = %b | ",actualstate_prev,error_prev,outr0_prev,outr1_prev,quotient_prev);
`endif
	if (
		( actualstate_expected_prev[0] !== 1'bx ) && ( actualstate_prev[0] !== actualstate_expected_prev[0] )
		&& ((actualstate_expected_prev[0] !== last_actualstate_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port actualstate[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", actualstate_expected_prev);
		$display ("     Real value = %b", actualstate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_actualstate_exp[0] = actualstate_expected_prev[0];
	end
	if (
		( actualstate_expected_prev[1] !== 1'bx ) && ( actualstate_prev[1] !== actualstate_expected_prev[1] )
		&& ((actualstate_expected_prev[1] !== last_actualstate_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port actualstate[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", actualstate_expected_prev);
		$display ("     Real value = %b", actualstate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_actualstate_exp[1] = actualstate_expected_prev[1];
	end
	if (
		( actualstate_expected_prev[2] !== 1'bx ) && ( actualstate_prev[2] !== actualstate_expected_prev[2] )
		&& ((actualstate_expected_prev[2] !== last_actualstate_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port actualstate[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", actualstate_expected_prev);
		$display ("     Real value = %b", actualstate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_actualstate_exp[2] = actualstate_expected_prev[2];
	end
	if (
		( actualstate_expected_prev[3] !== 1'bx ) && ( actualstate_prev[3] !== actualstate_expected_prev[3] )
		&& ((actualstate_expected_prev[3] !== last_actualstate_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port actualstate[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", actualstate_expected_prev);
		$display ("     Real value = %b", actualstate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_actualstate_exp[3] = actualstate_expected_prev[3];
	end
	if (
		( actualstate_expected_prev[4] !== 1'bx ) && ( actualstate_prev[4] !== actualstate_expected_prev[4] )
		&& ((actualstate_expected_prev[4] !== last_actualstate_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port actualstate[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", actualstate_expected_prev);
		$display ("     Real value = %b", actualstate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_actualstate_exp[4] = actualstate_expected_prev[4];
	end
	if (
		( error_expected_prev !== 1'bx ) && ( error_prev !== error_expected_prev )
		&& ((error_expected_prev !== last_error_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port error :: @time = %t",  $realtime);
		$display ("     Expected value = %b", error_expected_prev);
		$display ("     Real value = %b", error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_error_exp = error_expected_prev;
	end
	if (
		( outr0_expected_prev[0] !== 1'bx ) && ( outr0_prev[0] !== outr0_expected_prev[0] )
		&& ((outr0_expected_prev[0] !== last_outr0_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr0_expected_prev);
		$display ("     Real value = %b", outr0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outr0_exp[0] = outr0_expected_prev[0];
	end
	if (
		( outr0_expected_prev[1] !== 1'bx ) && ( outr0_prev[1] !== outr0_expected_prev[1] )
		&& ((outr0_expected_prev[1] !== last_outr0_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr0_expected_prev);
		$display ("     Real value = %b", outr0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outr0_exp[1] = outr0_expected_prev[1];
	end
	if (
		( outr0_expected_prev[2] !== 1'bx ) && ( outr0_prev[2] !== outr0_expected_prev[2] )
		&& ((outr0_expected_prev[2] !== last_outr0_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr0_expected_prev);
		$display ("     Real value = %b", outr0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outr0_exp[2] = outr0_expected_prev[2];
	end
	if (
		( outr0_expected_prev[3] !== 1'bx ) && ( outr0_prev[3] !== outr0_expected_prev[3] )
		&& ((outr0_expected_prev[3] !== last_outr0_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr0_expected_prev);
		$display ("     Real value = %b", outr0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outr0_exp[3] = outr0_expected_prev[3];
	end
	if (
		( outr0_expected_prev[4] !== 1'bx ) && ( outr0_prev[4] !== outr0_expected_prev[4] )
		&& ((outr0_expected_prev[4] !== last_outr0_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr0_expected_prev);
		$display ("     Real value = %b", outr0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outr0_exp[4] = outr0_expected_prev[4];
	end
	if (
		( outr0_expected_prev[5] !== 1'bx ) && ( outr0_prev[5] !== outr0_expected_prev[5] )
		&& ((outr0_expected_prev[5] !== last_outr0_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr0_expected_prev);
		$display ("     Real value = %b", outr0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outr0_exp[5] = outr0_expected_prev[5];
	end
	if (
		( outr0_expected_prev[6] !== 1'bx ) && ( outr0_prev[6] !== outr0_expected_prev[6] )
		&& ((outr0_expected_prev[6] !== last_outr0_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr0_expected_prev);
		$display ("     Real value = %b", outr0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outr0_exp[6] = outr0_expected_prev[6];
	end
	if (
		( outr0_expected_prev[7] !== 1'bx ) && ( outr0_prev[7] !== outr0_expected_prev[7] )
		&& ((outr0_expected_prev[7] !== last_outr0_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr0_expected_prev);
		$display ("     Real value = %b", outr0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outr0_exp[7] = outr0_expected_prev[7];
	end
	if (
		( outr1_expected_prev[0] !== 1'bx ) && ( outr1_prev[0] !== outr1_expected_prev[0] )
		&& ((outr1_expected_prev[0] !== last_outr1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr1_expected_prev);
		$display ("     Real value = %b", outr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outr1_exp[0] = outr1_expected_prev[0];
	end
	if (
		( outr1_expected_prev[1] !== 1'bx ) && ( outr1_prev[1] !== outr1_expected_prev[1] )
		&& ((outr1_expected_prev[1] !== last_outr1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr1_expected_prev);
		$display ("     Real value = %b", outr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outr1_exp[1] = outr1_expected_prev[1];
	end
	if (
		( outr1_expected_prev[2] !== 1'bx ) && ( outr1_prev[2] !== outr1_expected_prev[2] )
		&& ((outr1_expected_prev[2] !== last_outr1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr1_expected_prev);
		$display ("     Real value = %b", outr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outr1_exp[2] = outr1_expected_prev[2];
	end
	if (
		( outr1_expected_prev[3] !== 1'bx ) && ( outr1_prev[3] !== outr1_expected_prev[3] )
		&& ((outr1_expected_prev[3] !== last_outr1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr1_expected_prev);
		$display ("     Real value = %b", outr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outr1_exp[3] = outr1_expected_prev[3];
	end
	if (
		( outr1_expected_prev[4] !== 1'bx ) && ( outr1_prev[4] !== outr1_expected_prev[4] )
		&& ((outr1_expected_prev[4] !== last_outr1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr1_expected_prev);
		$display ("     Real value = %b", outr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outr1_exp[4] = outr1_expected_prev[4];
	end
	if (
		( outr1_expected_prev[5] !== 1'bx ) && ( outr1_prev[5] !== outr1_expected_prev[5] )
		&& ((outr1_expected_prev[5] !== last_outr1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr1_expected_prev);
		$display ("     Real value = %b", outr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outr1_exp[5] = outr1_expected_prev[5];
	end
	if (
		( outr1_expected_prev[6] !== 1'bx ) && ( outr1_prev[6] !== outr1_expected_prev[6] )
		&& ((outr1_expected_prev[6] !== last_outr1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr1_expected_prev);
		$display ("     Real value = %b", outr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outr1_exp[6] = outr1_expected_prev[6];
	end
	if (
		( outr1_expected_prev[7] !== 1'bx ) && ( outr1_prev[7] !== outr1_expected_prev[7] )
		&& ((outr1_expected_prev[7] !== last_outr1_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outr1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outr1_expected_prev);
		$display ("     Real value = %b", outr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outr1_exp[7] = outr1_expected_prev[7];
	end
	if (
		( quotient_expected_prev[0] !== 1'bx ) && ( quotient_prev[0] !== quotient_expected_prev[0] )
		&& ((quotient_expected_prev[0] !== last_quotient_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_quotient_exp[0] = quotient_expected_prev[0];
	end
	if (
		( quotient_expected_prev[1] !== 1'bx ) && ( quotient_prev[1] !== quotient_expected_prev[1] )
		&& ((quotient_expected_prev[1] !== last_quotient_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_quotient_exp[1] = quotient_expected_prev[1];
	end
	if (
		( quotient_expected_prev[2] !== 1'bx ) && ( quotient_prev[2] !== quotient_expected_prev[2] )
		&& ((quotient_expected_prev[2] !== last_quotient_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_quotient_exp[2] = quotient_expected_prev[2];
	end
	if (
		( quotient_expected_prev[3] !== 1'bx ) && ( quotient_prev[3] !== quotient_expected_prev[3] )
		&& ((quotient_expected_prev[3] !== last_quotient_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_quotient_exp[3] = quotient_expected_prev[3];
	end
	if (
		( quotient_expected_prev[4] !== 1'bx ) && ( quotient_prev[4] !== quotient_expected_prev[4] )
		&& ((quotient_expected_prev[4] !== last_quotient_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_quotient_exp[4] = quotient_expected_prev[4];
	end
	if (
		( quotient_expected_prev[5] !== 1'bx ) && ( quotient_prev[5] !== quotient_expected_prev[5] )
		&& ((quotient_expected_prev[5] !== last_quotient_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_quotient_exp[5] = quotient_expected_prev[5];
	end
	if (
		( quotient_expected_prev[6] !== 1'bx ) && ( quotient_prev[6] !== quotient_expected_prev[6] )
		&& ((quotient_expected_prev[6] !== last_quotient_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_quotient_exp[6] = quotient_expected_prev[6];
	end
	if (
		( quotient_expected_prev[7] !== 1'bx ) && ( quotient_prev[7] !== quotient_expected_prev[7] )
		&& ((quotient_expected_prev[7] !== last_quotient_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_quotient_exp[7] = quotient_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module deneme_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg compute;
reg [7:0] data_in;
reg load;
reg [2:0] op;
reg reset;
// wires                                               
wire [4:0] actualstate;
wire error;
wire [7:0] outr0;
wire [7:0] outr1;
wire [7:0] quotient;

wire sampler;                             

// assign statements (if any)                          
deneme i1 (
// port map - connection between master ports and signals/registers   
	.actualstate(actualstate),
	.clock(clock),
	.compute(compute),
	.data_in(data_in),
	.error(error),
	.load(load),
	.op(op),
	.outr0(outr0),
	.outr1(outr1),
	.quotient(quotient),
	.reset(reset)
);

// reset
initial
begin
	reset = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b1;
	data_in[5] = #250000 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b1;
	data_in[3] = #90000 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b1;
	data_in[2] = #90000 1'b0;
	data_in[2] = #160000 1'b1;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
	data_in[1] = #90000 1'b1;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
	data_in[0] = #250000 1'b1;
end 

// compute
initial
begin
	compute = 1'b0;
	compute = #200000 1'b1;
	compute = #40000 1'b0;
end 

// load
initial
begin
	load = 1'b0;
	load = #10000 1'b1;
	load = #40000 1'b0;
	load = #30000 1'b1;
	load = #30000 1'b0;
end 
// op[ 2 ]
initial
begin
	op[2] = 1'b0;
end 
// op[ 1 ]
initial
begin
	op[1] = 1'b1;
end 
// op[ 0 ]
initial
begin
	op[0] = 1'b0;
end 

deneme_vlg_sample_tst tb_sample (
	.clock(clock),
	.compute(compute),
	.data_in(data_in),
	.load(load),
	.op(op),
	.reset(reset),
	.sampler_tx(sampler)
);

deneme_vlg_check_tst tb_out(
	.actualstate(actualstate),
	.error(error),
	.outr0(outr0),
	.outr1(outr1),
	.quotient(quotient),
	.sampler_rx(sampler)
);
endmodule

