// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/19/2018 19:21:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    singlecyclearm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module singlecyclearm_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module singlecyclearm_vlg_check_tst (
	aluout,
	cikaninstruction,
	extendout,
	nowrite,
	ortaregwrite,
	pcoutadress,
	r2,
	r3,
	r4,
	r5,
	r7,
	regwrite,
	wa3,
	wd3,
	zeroflag,
	sampler_rx
);
input [31:0] aluout;
input [31:0] cikaninstruction;
input [31:0] extendout;
input  nowrite;
input  ortaregwrite;
input [31:0] pcoutadress;
input [31:0] r2;
input [31:0] r3;
input [31:0] r4;
input [31:0] r5;
input [31:0] r7;
input  regwrite;
input [3:0] wa3;
input [31:0] wd3;
input  zeroflag;
input sampler_rx;

reg [31:0] aluout_expected;
reg [31:0] cikaninstruction_expected;
reg [31:0] extendout_expected;
reg  nowrite_expected;
reg  ortaregwrite_expected;
reg [31:0] pcoutadress_expected;
reg [31:0] r2_expected;
reg [31:0] r3_expected;
reg [31:0] r4_expected;
reg [31:0] r5_expected;
reg [31:0] r7_expected;
reg  regwrite_expected;
reg [3:0] wa3_expected;
reg [31:0] wd3_expected;
reg  zeroflag_expected;

reg [31:0] aluout_prev;
reg [31:0] cikaninstruction_prev;
reg [31:0] extendout_prev;
reg  nowrite_prev;
reg  ortaregwrite_prev;
reg [31:0] pcoutadress_prev;
reg [31:0] r2_prev;
reg [31:0] r3_prev;
reg [31:0] r4_prev;
reg [31:0] r5_prev;
reg [31:0] r7_prev;
reg  regwrite_prev;
reg [3:0] wa3_prev;
reg [31:0] wd3_prev;
reg  zeroflag_prev;

reg [31:0] aluout_expected_prev;
reg [31:0] cikaninstruction_expected_prev;
reg [31:0] extendout_expected_prev;
reg  nowrite_expected_prev;
reg  ortaregwrite_expected_prev;
reg [31:0] pcoutadress_expected_prev;
reg [31:0] r2_expected_prev;
reg [31:0] r3_expected_prev;
reg [31:0] r4_expected_prev;
reg [31:0] r5_expected_prev;
reg [31:0] r7_expected_prev;
reg  regwrite_expected_prev;
reg [3:0] wa3_expected_prev;
reg [31:0] wd3_expected_prev;
reg  zeroflag_expected_prev;

reg [31:0] last_aluout_exp;
reg [31:0] last_cikaninstruction_exp;
reg [31:0] last_extendout_exp;
reg  last_nowrite_exp;
reg  last_ortaregwrite_exp;
reg [31:0] last_pcoutadress_exp;
reg [31:0] last_r2_exp;
reg [31:0] last_r3_exp;
reg [31:0] last_r4_exp;
reg [31:0] last_r5_exp;
reg [31:0] last_r7_exp;
reg  last_regwrite_exp;
reg [3:0] last_wa3_exp;
reg [31:0] last_wd3_exp;
reg  last_zeroflag_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	aluout_prev = aluout;
	cikaninstruction_prev = cikaninstruction;
	extendout_prev = extendout;
	nowrite_prev = nowrite;
	ortaregwrite_prev = ortaregwrite;
	pcoutadress_prev = pcoutadress;
	r2_prev = r2;
	r3_prev = r3;
	r4_prev = r4;
	r5_prev = r5;
	r7_prev = r7;
	regwrite_prev = regwrite;
	wa3_prev = wa3;
	wd3_prev = wd3;
	zeroflag_prev = zeroflag;
end

// update expected /o prevs

always @(trigger)
begin
	aluout_expected_prev = aluout_expected;
	cikaninstruction_expected_prev = cikaninstruction_expected;
	extendout_expected_prev = extendout_expected;
	nowrite_expected_prev = nowrite_expected;
	ortaregwrite_expected_prev = ortaregwrite_expected;
	pcoutadress_expected_prev = pcoutadress_expected;
	r2_expected_prev = r2_expected;
	r3_expected_prev = r3_expected;
	r4_expected_prev = r4_expected;
	r5_expected_prev = r5_expected;
	r7_expected_prev = r7_expected;
	regwrite_expected_prev = regwrite_expected;
	wa3_expected_prev = wa3_expected;
	wd3_expected_prev = wd3_expected;
	zeroflag_expected_prev = zeroflag_expected;
end


// expected aluout[ 31 ]
initial
begin
	aluout_expected[31] = 1'bX;
end 
// expected aluout[ 30 ]
initial
begin
	aluout_expected[30] = 1'bX;
end 
// expected aluout[ 29 ]
initial
begin
	aluout_expected[29] = 1'bX;
end 
// expected aluout[ 28 ]
initial
begin
	aluout_expected[28] = 1'bX;
end 
// expected aluout[ 27 ]
initial
begin
	aluout_expected[27] = 1'bX;
end 
// expected aluout[ 26 ]
initial
begin
	aluout_expected[26] = 1'bX;
end 
// expected aluout[ 25 ]
initial
begin
	aluout_expected[25] = 1'bX;
end 
// expected aluout[ 24 ]
initial
begin
	aluout_expected[24] = 1'bX;
end 
// expected aluout[ 23 ]
initial
begin
	aluout_expected[23] = 1'bX;
end 
// expected aluout[ 22 ]
initial
begin
	aluout_expected[22] = 1'bX;
end 
// expected aluout[ 21 ]
initial
begin
	aluout_expected[21] = 1'bX;
end 
// expected aluout[ 20 ]
initial
begin
	aluout_expected[20] = 1'bX;
end 
// expected aluout[ 19 ]
initial
begin
	aluout_expected[19] = 1'bX;
end 
// expected aluout[ 18 ]
initial
begin
	aluout_expected[18] = 1'bX;
end 
// expected aluout[ 17 ]
initial
begin
	aluout_expected[17] = 1'bX;
end 
// expected aluout[ 16 ]
initial
begin
	aluout_expected[16] = 1'bX;
end 
// expected aluout[ 15 ]
initial
begin
	aluout_expected[15] = 1'bX;
end 
// expected aluout[ 14 ]
initial
begin
	aluout_expected[14] = 1'bX;
end 
// expected aluout[ 13 ]
initial
begin
	aluout_expected[13] = 1'bX;
end 
// expected aluout[ 12 ]
initial
begin
	aluout_expected[12] = 1'bX;
end 
// expected aluout[ 11 ]
initial
begin
	aluout_expected[11] = 1'bX;
end 
// expected aluout[ 10 ]
initial
begin
	aluout_expected[10] = 1'bX;
end 
// expected aluout[ 9 ]
initial
begin
	aluout_expected[9] = 1'bX;
end 
// expected aluout[ 8 ]
initial
begin
	aluout_expected[8] = 1'bX;
end 
// expected aluout[ 7 ]
initial
begin
	aluout_expected[7] = 1'bX;
end 
// expected aluout[ 6 ]
initial
begin
	aluout_expected[6] = 1'bX;
end 
// expected aluout[ 5 ]
initial
begin
	aluout_expected[5] = 1'bX;
end 
// expected aluout[ 4 ]
initial
begin
	aluout_expected[4] = 1'bX;
end 
// expected aluout[ 3 ]
initial
begin
	aluout_expected[3] = 1'bX;
end 
// expected aluout[ 2 ]
initial
begin
	aluout_expected[2] = 1'bX;
end 
// expected aluout[ 1 ]
initial
begin
	aluout_expected[1] = 1'bX;
end 
// expected aluout[ 0 ]
initial
begin
	aluout_expected[0] = 1'bX;
end 
// expected cikaninstruction[ 31 ]
initial
begin
	cikaninstruction_expected[31] = 1'bX;
end 
// expected cikaninstruction[ 30 ]
initial
begin
	cikaninstruction_expected[30] = 1'bX;
end 
// expected cikaninstruction[ 29 ]
initial
begin
	cikaninstruction_expected[29] = 1'bX;
end 
// expected cikaninstruction[ 28 ]
initial
begin
	cikaninstruction_expected[28] = 1'bX;
end 
// expected cikaninstruction[ 27 ]
initial
begin
	cikaninstruction_expected[27] = 1'bX;
end 
// expected cikaninstruction[ 26 ]
initial
begin
	cikaninstruction_expected[26] = 1'bX;
end 
// expected cikaninstruction[ 25 ]
initial
begin
	cikaninstruction_expected[25] = 1'bX;
end 
// expected cikaninstruction[ 24 ]
initial
begin
	cikaninstruction_expected[24] = 1'bX;
end 
// expected cikaninstruction[ 23 ]
initial
begin
	cikaninstruction_expected[23] = 1'bX;
end 
// expected cikaninstruction[ 22 ]
initial
begin
	cikaninstruction_expected[22] = 1'bX;
end 
// expected cikaninstruction[ 21 ]
initial
begin
	cikaninstruction_expected[21] = 1'bX;
end 
// expected cikaninstruction[ 20 ]
initial
begin
	cikaninstruction_expected[20] = 1'bX;
end 
// expected cikaninstruction[ 19 ]
initial
begin
	cikaninstruction_expected[19] = 1'bX;
end 
// expected cikaninstruction[ 18 ]
initial
begin
	cikaninstruction_expected[18] = 1'bX;
end 
// expected cikaninstruction[ 17 ]
initial
begin
	cikaninstruction_expected[17] = 1'bX;
end 
// expected cikaninstruction[ 16 ]
initial
begin
	cikaninstruction_expected[16] = 1'bX;
end 
// expected cikaninstruction[ 15 ]
initial
begin
	cikaninstruction_expected[15] = 1'bX;
end 
// expected cikaninstruction[ 14 ]
initial
begin
	cikaninstruction_expected[14] = 1'bX;
end 
// expected cikaninstruction[ 13 ]
initial
begin
	cikaninstruction_expected[13] = 1'bX;
end 
// expected cikaninstruction[ 12 ]
initial
begin
	cikaninstruction_expected[12] = 1'bX;
end 
// expected cikaninstruction[ 11 ]
initial
begin
	cikaninstruction_expected[11] = 1'bX;
end 
// expected cikaninstruction[ 10 ]
initial
begin
	cikaninstruction_expected[10] = 1'bX;
end 
// expected cikaninstruction[ 9 ]
initial
begin
	cikaninstruction_expected[9] = 1'bX;
end 
// expected cikaninstruction[ 8 ]
initial
begin
	cikaninstruction_expected[8] = 1'bX;
end 
// expected cikaninstruction[ 7 ]
initial
begin
	cikaninstruction_expected[7] = 1'bX;
end 
// expected cikaninstruction[ 6 ]
initial
begin
	cikaninstruction_expected[6] = 1'bX;
end 
// expected cikaninstruction[ 5 ]
initial
begin
	cikaninstruction_expected[5] = 1'bX;
end 
// expected cikaninstruction[ 4 ]
initial
begin
	cikaninstruction_expected[4] = 1'bX;
end 
// expected cikaninstruction[ 3 ]
initial
begin
	cikaninstruction_expected[3] = 1'bX;
end 
// expected cikaninstruction[ 2 ]
initial
begin
	cikaninstruction_expected[2] = 1'bX;
end 
// expected cikaninstruction[ 1 ]
initial
begin
	cikaninstruction_expected[1] = 1'bX;
end 
// expected cikaninstruction[ 0 ]
initial
begin
	cikaninstruction_expected[0] = 1'bX;
end 
// expected extendout[ 31 ]
initial
begin
	extendout_expected[31] = 1'bX;
end 
// expected extendout[ 30 ]
initial
begin
	extendout_expected[30] = 1'bX;
end 
// expected extendout[ 29 ]
initial
begin
	extendout_expected[29] = 1'bX;
end 
// expected extendout[ 28 ]
initial
begin
	extendout_expected[28] = 1'bX;
end 
// expected extendout[ 27 ]
initial
begin
	extendout_expected[27] = 1'bX;
end 
// expected extendout[ 26 ]
initial
begin
	extendout_expected[26] = 1'bX;
end 
// expected extendout[ 25 ]
initial
begin
	extendout_expected[25] = 1'bX;
end 
// expected extendout[ 24 ]
initial
begin
	extendout_expected[24] = 1'bX;
end 
// expected extendout[ 23 ]
initial
begin
	extendout_expected[23] = 1'bX;
end 
// expected extendout[ 22 ]
initial
begin
	extendout_expected[22] = 1'bX;
end 
// expected extendout[ 21 ]
initial
begin
	extendout_expected[21] = 1'bX;
end 
// expected extendout[ 20 ]
initial
begin
	extendout_expected[20] = 1'bX;
end 
// expected extendout[ 19 ]
initial
begin
	extendout_expected[19] = 1'bX;
end 
// expected extendout[ 18 ]
initial
begin
	extendout_expected[18] = 1'bX;
end 
// expected extendout[ 17 ]
initial
begin
	extendout_expected[17] = 1'bX;
end 
// expected extendout[ 16 ]
initial
begin
	extendout_expected[16] = 1'bX;
end 
// expected extendout[ 15 ]
initial
begin
	extendout_expected[15] = 1'bX;
end 
// expected extendout[ 14 ]
initial
begin
	extendout_expected[14] = 1'bX;
end 
// expected extendout[ 13 ]
initial
begin
	extendout_expected[13] = 1'bX;
end 
// expected extendout[ 12 ]
initial
begin
	extendout_expected[12] = 1'bX;
end 
// expected extendout[ 11 ]
initial
begin
	extendout_expected[11] = 1'bX;
end 
// expected extendout[ 10 ]
initial
begin
	extendout_expected[10] = 1'bX;
end 
// expected extendout[ 9 ]
initial
begin
	extendout_expected[9] = 1'bX;
end 
// expected extendout[ 8 ]
initial
begin
	extendout_expected[8] = 1'bX;
end 
// expected extendout[ 7 ]
initial
begin
	extendout_expected[7] = 1'bX;
end 
// expected extendout[ 6 ]
initial
begin
	extendout_expected[6] = 1'bX;
end 
// expected extendout[ 5 ]
initial
begin
	extendout_expected[5] = 1'bX;
end 
// expected extendout[ 4 ]
initial
begin
	extendout_expected[4] = 1'bX;
end 
// expected extendout[ 3 ]
initial
begin
	extendout_expected[3] = 1'bX;
end 
// expected extendout[ 2 ]
initial
begin
	extendout_expected[2] = 1'bX;
end 
// expected extendout[ 1 ]
initial
begin
	extendout_expected[1] = 1'bX;
end 
// expected extendout[ 0 ]
initial
begin
	extendout_expected[0] = 1'bX;
end 

// expected nowrite
initial
begin
	nowrite_expected = 1'bX;
end 

// expected ortaregwrite
initial
begin
	ortaregwrite_expected = 1'bX;
end 
// expected pcoutadress[ 31 ]
initial
begin
	pcoutadress_expected[31] = 1'bX;
end 
// expected pcoutadress[ 30 ]
initial
begin
	pcoutadress_expected[30] = 1'bX;
end 
// expected pcoutadress[ 29 ]
initial
begin
	pcoutadress_expected[29] = 1'bX;
end 
// expected pcoutadress[ 28 ]
initial
begin
	pcoutadress_expected[28] = 1'bX;
end 
// expected pcoutadress[ 27 ]
initial
begin
	pcoutadress_expected[27] = 1'bX;
end 
// expected pcoutadress[ 26 ]
initial
begin
	pcoutadress_expected[26] = 1'bX;
end 
// expected pcoutadress[ 25 ]
initial
begin
	pcoutadress_expected[25] = 1'bX;
end 
// expected pcoutadress[ 24 ]
initial
begin
	pcoutadress_expected[24] = 1'bX;
end 
// expected pcoutadress[ 23 ]
initial
begin
	pcoutadress_expected[23] = 1'bX;
end 
// expected pcoutadress[ 22 ]
initial
begin
	pcoutadress_expected[22] = 1'bX;
end 
// expected pcoutadress[ 21 ]
initial
begin
	pcoutadress_expected[21] = 1'bX;
end 
// expected pcoutadress[ 20 ]
initial
begin
	pcoutadress_expected[20] = 1'bX;
end 
// expected pcoutadress[ 19 ]
initial
begin
	pcoutadress_expected[19] = 1'bX;
end 
// expected pcoutadress[ 18 ]
initial
begin
	pcoutadress_expected[18] = 1'bX;
end 
// expected pcoutadress[ 17 ]
initial
begin
	pcoutadress_expected[17] = 1'bX;
end 
// expected pcoutadress[ 16 ]
initial
begin
	pcoutadress_expected[16] = 1'bX;
end 
// expected pcoutadress[ 15 ]
initial
begin
	pcoutadress_expected[15] = 1'bX;
end 
// expected pcoutadress[ 14 ]
initial
begin
	pcoutadress_expected[14] = 1'bX;
end 
// expected pcoutadress[ 13 ]
initial
begin
	pcoutadress_expected[13] = 1'bX;
end 
// expected pcoutadress[ 12 ]
initial
begin
	pcoutadress_expected[12] = 1'bX;
end 
// expected pcoutadress[ 11 ]
initial
begin
	pcoutadress_expected[11] = 1'bX;
end 
// expected pcoutadress[ 10 ]
initial
begin
	pcoutadress_expected[10] = 1'bX;
end 
// expected pcoutadress[ 9 ]
initial
begin
	pcoutadress_expected[9] = 1'bX;
end 
// expected pcoutadress[ 8 ]
initial
begin
	pcoutadress_expected[8] = 1'bX;
end 
// expected pcoutadress[ 7 ]
initial
begin
	pcoutadress_expected[7] = 1'bX;
end 
// expected pcoutadress[ 6 ]
initial
begin
	pcoutadress_expected[6] = 1'bX;
end 
// expected pcoutadress[ 5 ]
initial
begin
	pcoutadress_expected[5] = 1'bX;
end 
// expected pcoutadress[ 4 ]
initial
begin
	pcoutadress_expected[4] = 1'bX;
end 
// expected pcoutadress[ 3 ]
initial
begin
	pcoutadress_expected[3] = 1'bX;
end 
// expected pcoutadress[ 2 ]
initial
begin
	pcoutadress_expected[2] = 1'bX;
end 
// expected pcoutadress[ 1 ]
initial
begin
	pcoutadress_expected[1] = 1'bX;
end 
// expected pcoutadress[ 0 ]
initial
begin
	pcoutadress_expected[0] = 1'bX;
end 

// expected regwrite
initial
begin
	regwrite_expected = 1'bX;
end 
// expected wa3[ 3 ]
initial
begin
	wa3_expected[3] = 1'bX;
end 
// expected wa3[ 2 ]
initial
begin
	wa3_expected[2] = 1'bX;
end 
// expected wa3[ 1 ]
initial
begin
	wa3_expected[1] = 1'bX;
end 
// expected wa3[ 0 ]
initial
begin
	wa3_expected[0] = 1'bX;
end 
// expected wd3[ 31 ]
initial
begin
	wd3_expected[31] = 1'bX;
end 
// expected wd3[ 30 ]
initial
begin
	wd3_expected[30] = 1'bX;
end 
// expected wd3[ 29 ]
initial
begin
	wd3_expected[29] = 1'bX;
end 
// expected wd3[ 28 ]
initial
begin
	wd3_expected[28] = 1'bX;
end 
// expected wd3[ 27 ]
initial
begin
	wd3_expected[27] = 1'bX;
end 
// expected wd3[ 26 ]
initial
begin
	wd3_expected[26] = 1'bX;
end 
// expected wd3[ 25 ]
initial
begin
	wd3_expected[25] = 1'bX;
end 
// expected wd3[ 24 ]
initial
begin
	wd3_expected[24] = 1'bX;
end 
// expected wd3[ 23 ]
initial
begin
	wd3_expected[23] = 1'bX;
end 
// expected wd3[ 22 ]
initial
begin
	wd3_expected[22] = 1'bX;
end 
// expected wd3[ 21 ]
initial
begin
	wd3_expected[21] = 1'bX;
end 
// expected wd3[ 20 ]
initial
begin
	wd3_expected[20] = 1'bX;
end 
// expected wd3[ 19 ]
initial
begin
	wd3_expected[19] = 1'bX;
end 
// expected wd3[ 18 ]
initial
begin
	wd3_expected[18] = 1'bX;
end 
// expected wd3[ 17 ]
initial
begin
	wd3_expected[17] = 1'bX;
end 
// expected wd3[ 16 ]
initial
begin
	wd3_expected[16] = 1'bX;
end 
// expected wd3[ 15 ]
initial
begin
	wd3_expected[15] = 1'bX;
end 
// expected wd3[ 14 ]
initial
begin
	wd3_expected[14] = 1'bX;
end 
// expected wd3[ 13 ]
initial
begin
	wd3_expected[13] = 1'bX;
end 
// expected wd3[ 12 ]
initial
begin
	wd3_expected[12] = 1'bX;
end 
// expected wd3[ 11 ]
initial
begin
	wd3_expected[11] = 1'bX;
end 
// expected wd3[ 10 ]
initial
begin
	wd3_expected[10] = 1'bX;
end 
// expected wd3[ 9 ]
initial
begin
	wd3_expected[9] = 1'bX;
end 
// expected wd3[ 8 ]
initial
begin
	wd3_expected[8] = 1'bX;
end 
// expected wd3[ 7 ]
initial
begin
	wd3_expected[7] = 1'bX;
end 
// expected wd3[ 6 ]
initial
begin
	wd3_expected[6] = 1'bX;
end 
// expected wd3[ 5 ]
initial
begin
	wd3_expected[5] = 1'bX;
end 
// expected wd3[ 4 ]
initial
begin
	wd3_expected[4] = 1'bX;
end 
// expected wd3[ 3 ]
initial
begin
	wd3_expected[3] = 1'bX;
end 
// expected wd3[ 2 ]
initial
begin
	wd3_expected[2] = 1'bX;
end 
// expected wd3[ 1 ]
initial
begin
	wd3_expected[1] = 1'bX;
end 
// expected wd3[ 0 ]
initial
begin
	wd3_expected[0] = 1'bX;
end 
// expected r2[ 31 ]
initial
begin
	r2_expected[31] = 1'bX;
end 
// expected r2[ 30 ]
initial
begin
	r2_expected[30] = 1'bX;
end 
// expected r2[ 29 ]
initial
begin
	r2_expected[29] = 1'bX;
end 
// expected r2[ 28 ]
initial
begin
	r2_expected[28] = 1'bX;
end 
// expected r2[ 27 ]
initial
begin
	r2_expected[27] = 1'bX;
end 
// expected r2[ 26 ]
initial
begin
	r2_expected[26] = 1'bX;
end 
// expected r2[ 25 ]
initial
begin
	r2_expected[25] = 1'bX;
end 
// expected r2[ 24 ]
initial
begin
	r2_expected[24] = 1'bX;
end 
// expected r2[ 23 ]
initial
begin
	r2_expected[23] = 1'bX;
end 
// expected r2[ 22 ]
initial
begin
	r2_expected[22] = 1'bX;
end 
// expected r2[ 21 ]
initial
begin
	r2_expected[21] = 1'bX;
end 
// expected r2[ 20 ]
initial
begin
	r2_expected[20] = 1'bX;
end 
// expected r2[ 19 ]
initial
begin
	r2_expected[19] = 1'bX;
end 
// expected r2[ 18 ]
initial
begin
	r2_expected[18] = 1'bX;
end 
// expected r2[ 17 ]
initial
begin
	r2_expected[17] = 1'bX;
end 
// expected r2[ 16 ]
initial
begin
	r2_expected[16] = 1'bX;
end 
// expected r2[ 15 ]
initial
begin
	r2_expected[15] = 1'bX;
end 
// expected r2[ 14 ]
initial
begin
	r2_expected[14] = 1'bX;
end 
// expected r2[ 13 ]
initial
begin
	r2_expected[13] = 1'bX;
end 
// expected r2[ 12 ]
initial
begin
	r2_expected[12] = 1'bX;
end 
// expected r2[ 11 ]
initial
begin
	r2_expected[11] = 1'bX;
end 
// expected r2[ 10 ]
initial
begin
	r2_expected[10] = 1'bX;
end 
// expected r2[ 9 ]
initial
begin
	r2_expected[9] = 1'bX;
end 
// expected r2[ 8 ]
initial
begin
	r2_expected[8] = 1'bX;
end 
// expected r2[ 7 ]
initial
begin
	r2_expected[7] = 1'bX;
end 
// expected r2[ 6 ]
initial
begin
	r2_expected[6] = 1'bX;
end 
// expected r2[ 5 ]
initial
begin
	r2_expected[5] = 1'bX;
end 
// expected r2[ 4 ]
initial
begin
	r2_expected[4] = 1'bX;
end 
// expected r2[ 3 ]
initial
begin
	r2_expected[3] = 1'bX;
end 
// expected r2[ 2 ]
initial
begin
	r2_expected[2] = 1'bX;
end 
// expected r2[ 1 ]
initial
begin
	r2_expected[1] = 1'bX;
end 
// expected r2[ 0 ]
initial
begin
	r2_expected[0] = 1'bX;
end 
// expected r3[ 31 ]
initial
begin
	r3_expected[31] = 1'bX;
end 
// expected r3[ 30 ]
initial
begin
	r3_expected[30] = 1'bX;
end 
// expected r3[ 29 ]
initial
begin
	r3_expected[29] = 1'bX;
end 
// expected r3[ 28 ]
initial
begin
	r3_expected[28] = 1'bX;
end 
// expected r3[ 27 ]
initial
begin
	r3_expected[27] = 1'bX;
end 
// expected r3[ 26 ]
initial
begin
	r3_expected[26] = 1'bX;
end 
// expected r3[ 25 ]
initial
begin
	r3_expected[25] = 1'bX;
end 
// expected r3[ 24 ]
initial
begin
	r3_expected[24] = 1'bX;
end 
// expected r3[ 23 ]
initial
begin
	r3_expected[23] = 1'bX;
end 
// expected r3[ 22 ]
initial
begin
	r3_expected[22] = 1'bX;
end 
// expected r3[ 21 ]
initial
begin
	r3_expected[21] = 1'bX;
end 
// expected r3[ 20 ]
initial
begin
	r3_expected[20] = 1'bX;
end 
// expected r3[ 19 ]
initial
begin
	r3_expected[19] = 1'bX;
end 
// expected r3[ 18 ]
initial
begin
	r3_expected[18] = 1'bX;
end 
// expected r3[ 17 ]
initial
begin
	r3_expected[17] = 1'bX;
end 
// expected r3[ 16 ]
initial
begin
	r3_expected[16] = 1'bX;
end 
// expected r3[ 15 ]
initial
begin
	r3_expected[15] = 1'bX;
end 
// expected r3[ 14 ]
initial
begin
	r3_expected[14] = 1'bX;
end 
// expected r3[ 13 ]
initial
begin
	r3_expected[13] = 1'bX;
end 
// expected r3[ 12 ]
initial
begin
	r3_expected[12] = 1'bX;
end 
// expected r3[ 11 ]
initial
begin
	r3_expected[11] = 1'bX;
end 
// expected r3[ 10 ]
initial
begin
	r3_expected[10] = 1'bX;
end 
// expected r3[ 9 ]
initial
begin
	r3_expected[9] = 1'bX;
end 
// expected r3[ 8 ]
initial
begin
	r3_expected[8] = 1'bX;
end 
// expected r3[ 7 ]
initial
begin
	r3_expected[7] = 1'bX;
end 
// expected r3[ 6 ]
initial
begin
	r3_expected[6] = 1'bX;
end 
// expected r3[ 5 ]
initial
begin
	r3_expected[5] = 1'bX;
end 
// expected r3[ 4 ]
initial
begin
	r3_expected[4] = 1'bX;
end 
// expected r3[ 3 ]
initial
begin
	r3_expected[3] = 1'bX;
end 
// expected r3[ 2 ]
initial
begin
	r3_expected[2] = 1'bX;
end 
// expected r3[ 1 ]
initial
begin
	r3_expected[1] = 1'bX;
end 
// expected r3[ 0 ]
initial
begin
	r3_expected[0] = 1'bX;
end 
// expected r4[ 31 ]
initial
begin
	r4_expected[31] = 1'bX;
end 
// expected r4[ 30 ]
initial
begin
	r4_expected[30] = 1'bX;
end 
// expected r4[ 29 ]
initial
begin
	r4_expected[29] = 1'bX;
end 
// expected r4[ 28 ]
initial
begin
	r4_expected[28] = 1'bX;
end 
// expected r4[ 27 ]
initial
begin
	r4_expected[27] = 1'bX;
end 
// expected r4[ 26 ]
initial
begin
	r4_expected[26] = 1'bX;
end 
// expected r4[ 25 ]
initial
begin
	r4_expected[25] = 1'bX;
end 
// expected r4[ 24 ]
initial
begin
	r4_expected[24] = 1'bX;
end 
// expected r4[ 23 ]
initial
begin
	r4_expected[23] = 1'bX;
end 
// expected r4[ 22 ]
initial
begin
	r4_expected[22] = 1'bX;
end 
// expected r4[ 21 ]
initial
begin
	r4_expected[21] = 1'bX;
end 
// expected r4[ 20 ]
initial
begin
	r4_expected[20] = 1'bX;
end 
// expected r4[ 19 ]
initial
begin
	r4_expected[19] = 1'bX;
end 
// expected r4[ 18 ]
initial
begin
	r4_expected[18] = 1'bX;
end 
// expected r4[ 17 ]
initial
begin
	r4_expected[17] = 1'bX;
end 
// expected r4[ 16 ]
initial
begin
	r4_expected[16] = 1'bX;
end 
// expected r4[ 15 ]
initial
begin
	r4_expected[15] = 1'bX;
end 
// expected r4[ 14 ]
initial
begin
	r4_expected[14] = 1'bX;
end 
// expected r4[ 13 ]
initial
begin
	r4_expected[13] = 1'bX;
end 
// expected r4[ 12 ]
initial
begin
	r4_expected[12] = 1'bX;
end 
// expected r4[ 11 ]
initial
begin
	r4_expected[11] = 1'bX;
end 
// expected r4[ 10 ]
initial
begin
	r4_expected[10] = 1'bX;
end 
// expected r4[ 9 ]
initial
begin
	r4_expected[9] = 1'bX;
end 
// expected r4[ 8 ]
initial
begin
	r4_expected[8] = 1'bX;
end 
// expected r4[ 7 ]
initial
begin
	r4_expected[7] = 1'bX;
end 
// expected r4[ 6 ]
initial
begin
	r4_expected[6] = 1'bX;
end 
// expected r4[ 5 ]
initial
begin
	r4_expected[5] = 1'bX;
end 
// expected r4[ 4 ]
initial
begin
	r4_expected[4] = 1'bX;
end 
// expected r4[ 3 ]
initial
begin
	r4_expected[3] = 1'bX;
end 
// expected r4[ 2 ]
initial
begin
	r4_expected[2] = 1'bX;
end 
// expected r4[ 1 ]
initial
begin
	r4_expected[1] = 1'bX;
end 
// expected r4[ 0 ]
initial
begin
	r4_expected[0] = 1'bX;
end 
// expected r5[ 31 ]
initial
begin
	r5_expected[31] = 1'bX;
end 
// expected r5[ 30 ]
initial
begin
	r5_expected[30] = 1'bX;
end 
// expected r5[ 29 ]
initial
begin
	r5_expected[29] = 1'bX;
end 
// expected r5[ 28 ]
initial
begin
	r5_expected[28] = 1'bX;
end 
// expected r5[ 27 ]
initial
begin
	r5_expected[27] = 1'bX;
end 
// expected r5[ 26 ]
initial
begin
	r5_expected[26] = 1'bX;
end 
// expected r5[ 25 ]
initial
begin
	r5_expected[25] = 1'bX;
end 
// expected r5[ 24 ]
initial
begin
	r5_expected[24] = 1'bX;
end 
// expected r5[ 23 ]
initial
begin
	r5_expected[23] = 1'bX;
end 
// expected r5[ 22 ]
initial
begin
	r5_expected[22] = 1'bX;
end 
// expected r5[ 21 ]
initial
begin
	r5_expected[21] = 1'bX;
end 
// expected r5[ 20 ]
initial
begin
	r5_expected[20] = 1'bX;
end 
// expected r5[ 19 ]
initial
begin
	r5_expected[19] = 1'bX;
end 
// expected r5[ 18 ]
initial
begin
	r5_expected[18] = 1'bX;
end 
// expected r5[ 17 ]
initial
begin
	r5_expected[17] = 1'bX;
end 
// expected r5[ 16 ]
initial
begin
	r5_expected[16] = 1'bX;
end 
// expected r5[ 15 ]
initial
begin
	r5_expected[15] = 1'bX;
end 
// expected r5[ 14 ]
initial
begin
	r5_expected[14] = 1'bX;
end 
// expected r5[ 13 ]
initial
begin
	r5_expected[13] = 1'bX;
end 
// expected r5[ 12 ]
initial
begin
	r5_expected[12] = 1'bX;
end 
// expected r5[ 11 ]
initial
begin
	r5_expected[11] = 1'bX;
end 
// expected r5[ 10 ]
initial
begin
	r5_expected[10] = 1'bX;
end 
// expected r5[ 9 ]
initial
begin
	r5_expected[9] = 1'bX;
end 
// expected r5[ 8 ]
initial
begin
	r5_expected[8] = 1'bX;
end 
// expected r5[ 7 ]
initial
begin
	r5_expected[7] = 1'bX;
end 
// expected r5[ 6 ]
initial
begin
	r5_expected[6] = 1'bX;
end 
// expected r5[ 5 ]
initial
begin
	r5_expected[5] = 1'bX;
end 
// expected r5[ 4 ]
initial
begin
	r5_expected[4] = 1'bX;
end 
// expected r5[ 3 ]
initial
begin
	r5_expected[3] = 1'bX;
end 
// expected r5[ 2 ]
initial
begin
	r5_expected[2] = 1'bX;
end 
// expected r5[ 1 ]
initial
begin
	r5_expected[1] = 1'bX;
end 
// expected r5[ 0 ]
initial
begin
	r5_expected[0] = 1'bX;
end 
// expected r7[ 31 ]
initial
begin
	r7_expected[31] = 1'bX;
end 
// expected r7[ 30 ]
initial
begin
	r7_expected[30] = 1'bX;
end 
// expected r7[ 29 ]
initial
begin
	r7_expected[29] = 1'bX;
end 
// expected r7[ 28 ]
initial
begin
	r7_expected[28] = 1'bX;
end 
// expected r7[ 27 ]
initial
begin
	r7_expected[27] = 1'bX;
end 
// expected r7[ 26 ]
initial
begin
	r7_expected[26] = 1'bX;
end 
// expected r7[ 25 ]
initial
begin
	r7_expected[25] = 1'bX;
end 
// expected r7[ 24 ]
initial
begin
	r7_expected[24] = 1'bX;
end 
// expected r7[ 23 ]
initial
begin
	r7_expected[23] = 1'bX;
end 
// expected r7[ 22 ]
initial
begin
	r7_expected[22] = 1'bX;
end 
// expected r7[ 21 ]
initial
begin
	r7_expected[21] = 1'bX;
end 
// expected r7[ 20 ]
initial
begin
	r7_expected[20] = 1'bX;
end 
// expected r7[ 19 ]
initial
begin
	r7_expected[19] = 1'bX;
end 
// expected r7[ 18 ]
initial
begin
	r7_expected[18] = 1'bX;
end 
// expected r7[ 17 ]
initial
begin
	r7_expected[17] = 1'bX;
end 
// expected r7[ 16 ]
initial
begin
	r7_expected[16] = 1'bX;
end 
// expected r7[ 15 ]
initial
begin
	r7_expected[15] = 1'bX;
end 
// expected r7[ 14 ]
initial
begin
	r7_expected[14] = 1'bX;
end 
// expected r7[ 13 ]
initial
begin
	r7_expected[13] = 1'bX;
end 
// expected r7[ 12 ]
initial
begin
	r7_expected[12] = 1'bX;
end 
// expected r7[ 11 ]
initial
begin
	r7_expected[11] = 1'bX;
end 
// expected r7[ 10 ]
initial
begin
	r7_expected[10] = 1'bX;
end 
// expected r7[ 9 ]
initial
begin
	r7_expected[9] = 1'bX;
end 
// expected r7[ 8 ]
initial
begin
	r7_expected[8] = 1'bX;
end 
// expected r7[ 7 ]
initial
begin
	r7_expected[7] = 1'bX;
end 
// expected r7[ 6 ]
initial
begin
	r7_expected[6] = 1'bX;
end 
// expected r7[ 5 ]
initial
begin
	r7_expected[5] = 1'bX;
end 
// expected r7[ 4 ]
initial
begin
	r7_expected[4] = 1'bX;
end 
// expected r7[ 3 ]
initial
begin
	r7_expected[3] = 1'bX;
end 
// expected r7[ 2 ]
initial
begin
	r7_expected[2] = 1'bX;
end 
// expected r7[ 1 ]
initial
begin
	r7_expected[1] = 1'bX;
end 
// expected r7[ 0 ]
initial
begin
	r7_expected[0] = 1'bX;
end 

// expected zeroflag
initial
begin
	zeroflag_expected = 1'bX;
end 
// generate trigger
always @(aluout_expected or aluout or cikaninstruction_expected or cikaninstruction or extendout_expected or extendout or nowrite_expected or nowrite or ortaregwrite_expected or ortaregwrite or pcoutadress_expected or pcoutadress or r2_expected or r2 or r3_expected or r3 or r4_expected or r4 or r5_expected or r5 or r7_expected or r7 or regwrite_expected or regwrite or wa3_expected or wa3 or wd3_expected or wd3 or zeroflag_expected or zeroflag)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aluout = %b | expected cikaninstruction = %b | expected extendout = %b | expected nowrite = %b | expected ortaregwrite = %b | expected pcoutadress = %b | expected r2 = %b | expected r3 = %b | expected r4 = %b | expected r5 = %b | expected r7 = %b | expected regwrite = %b | expected wa3 = %b | expected wd3 = %b | expected zeroflag = %b | ",aluout_expected_prev,cikaninstruction_expected_prev,extendout_expected_prev,nowrite_expected_prev,ortaregwrite_expected_prev,pcoutadress_expected_prev,r2_expected_prev,r3_expected_prev,r4_expected_prev,r5_expected_prev,r7_expected_prev,regwrite_expected_prev,wa3_expected_prev,wd3_expected_prev,zeroflag_expected_prev);
	$display("| real aluout = %b | real cikaninstruction = %b | real extendout = %b | real nowrite = %b | real ortaregwrite = %b | real pcoutadress = %b | real r2 = %b | real r3 = %b | real r4 = %b | real r5 = %b | real r7 = %b | real regwrite = %b | real wa3 = %b | real wd3 = %b | real zeroflag = %b | ",aluout_prev,cikaninstruction_prev,extendout_prev,nowrite_prev,ortaregwrite_prev,pcoutadress_prev,r2_prev,r3_prev,r4_prev,r5_prev,r7_prev,regwrite_prev,wa3_prev,wd3_prev,zeroflag_prev);
`endif
	if (
		( aluout_expected_prev[0] !== 1'bx ) && ( aluout_prev[0] !== aluout_expected_prev[0] )
		&& ((aluout_expected_prev[0] !== last_aluout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[0] = aluout_expected_prev[0];
	end
	if (
		( aluout_expected_prev[1] !== 1'bx ) && ( aluout_prev[1] !== aluout_expected_prev[1] )
		&& ((aluout_expected_prev[1] !== last_aluout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[1] = aluout_expected_prev[1];
	end
	if (
		( aluout_expected_prev[2] !== 1'bx ) && ( aluout_prev[2] !== aluout_expected_prev[2] )
		&& ((aluout_expected_prev[2] !== last_aluout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[2] = aluout_expected_prev[2];
	end
	if (
		( aluout_expected_prev[3] !== 1'bx ) && ( aluout_prev[3] !== aluout_expected_prev[3] )
		&& ((aluout_expected_prev[3] !== last_aluout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[3] = aluout_expected_prev[3];
	end
	if (
		( aluout_expected_prev[4] !== 1'bx ) && ( aluout_prev[4] !== aluout_expected_prev[4] )
		&& ((aluout_expected_prev[4] !== last_aluout_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[4] = aluout_expected_prev[4];
	end
	if (
		( aluout_expected_prev[5] !== 1'bx ) && ( aluout_prev[5] !== aluout_expected_prev[5] )
		&& ((aluout_expected_prev[5] !== last_aluout_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[5] = aluout_expected_prev[5];
	end
	if (
		( aluout_expected_prev[6] !== 1'bx ) && ( aluout_prev[6] !== aluout_expected_prev[6] )
		&& ((aluout_expected_prev[6] !== last_aluout_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[6] = aluout_expected_prev[6];
	end
	if (
		( aluout_expected_prev[7] !== 1'bx ) && ( aluout_prev[7] !== aluout_expected_prev[7] )
		&& ((aluout_expected_prev[7] !== last_aluout_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[7] = aluout_expected_prev[7];
	end
	if (
		( aluout_expected_prev[8] !== 1'bx ) && ( aluout_prev[8] !== aluout_expected_prev[8] )
		&& ((aluout_expected_prev[8] !== last_aluout_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[8] = aluout_expected_prev[8];
	end
	if (
		( aluout_expected_prev[9] !== 1'bx ) && ( aluout_prev[9] !== aluout_expected_prev[9] )
		&& ((aluout_expected_prev[9] !== last_aluout_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[9] = aluout_expected_prev[9];
	end
	if (
		( aluout_expected_prev[10] !== 1'bx ) && ( aluout_prev[10] !== aluout_expected_prev[10] )
		&& ((aluout_expected_prev[10] !== last_aluout_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[10] = aluout_expected_prev[10];
	end
	if (
		( aluout_expected_prev[11] !== 1'bx ) && ( aluout_prev[11] !== aluout_expected_prev[11] )
		&& ((aluout_expected_prev[11] !== last_aluout_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[11] = aluout_expected_prev[11];
	end
	if (
		( aluout_expected_prev[12] !== 1'bx ) && ( aluout_prev[12] !== aluout_expected_prev[12] )
		&& ((aluout_expected_prev[12] !== last_aluout_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[12] = aluout_expected_prev[12];
	end
	if (
		( aluout_expected_prev[13] !== 1'bx ) && ( aluout_prev[13] !== aluout_expected_prev[13] )
		&& ((aluout_expected_prev[13] !== last_aluout_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[13] = aluout_expected_prev[13];
	end
	if (
		( aluout_expected_prev[14] !== 1'bx ) && ( aluout_prev[14] !== aluout_expected_prev[14] )
		&& ((aluout_expected_prev[14] !== last_aluout_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[14] = aluout_expected_prev[14];
	end
	if (
		( aluout_expected_prev[15] !== 1'bx ) && ( aluout_prev[15] !== aluout_expected_prev[15] )
		&& ((aluout_expected_prev[15] !== last_aluout_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[15] = aluout_expected_prev[15];
	end
	if (
		( aluout_expected_prev[16] !== 1'bx ) && ( aluout_prev[16] !== aluout_expected_prev[16] )
		&& ((aluout_expected_prev[16] !== last_aluout_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[16] = aluout_expected_prev[16];
	end
	if (
		( aluout_expected_prev[17] !== 1'bx ) && ( aluout_prev[17] !== aluout_expected_prev[17] )
		&& ((aluout_expected_prev[17] !== last_aluout_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[17] = aluout_expected_prev[17];
	end
	if (
		( aluout_expected_prev[18] !== 1'bx ) && ( aluout_prev[18] !== aluout_expected_prev[18] )
		&& ((aluout_expected_prev[18] !== last_aluout_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[18] = aluout_expected_prev[18];
	end
	if (
		( aluout_expected_prev[19] !== 1'bx ) && ( aluout_prev[19] !== aluout_expected_prev[19] )
		&& ((aluout_expected_prev[19] !== last_aluout_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[19] = aluout_expected_prev[19];
	end
	if (
		( aluout_expected_prev[20] !== 1'bx ) && ( aluout_prev[20] !== aluout_expected_prev[20] )
		&& ((aluout_expected_prev[20] !== last_aluout_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[20] = aluout_expected_prev[20];
	end
	if (
		( aluout_expected_prev[21] !== 1'bx ) && ( aluout_prev[21] !== aluout_expected_prev[21] )
		&& ((aluout_expected_prev[21] !== last_aluout_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[21] = aluout_expected_prev[21];
	end
	if (
		( aluout_expected_prev[22] !== 1'bx ) && ( aluout_prev[22] !== aluout_expected_prev[22] )
		&& ((aluout_expected_prev[22] !== last_aluout_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[22] = aluout_expected_prev[22];
	end
	if (
		( aluout_expected_prev[23] !== 1'bx ) && ( aluout_prev[23] !== aluout_expected_prev[23] )
		&& ((aluout_expected_prev[23] !== last_aluout_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[23] = aluout_expected_prev[23];
	end
	if (
		( aluout_expected_prev[24] !== 1'bx ) && ( aluout_prev[24] !== aluout_expected_prev[24] )
		&& ((aluout_expected_prev[24] !== last_aluout_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[24] = aluout_expected_prev[24];
	end
	if (
		( aluout_expected_prev[25] !== 1'bx ) && ( aluout_prev[25] !== aluout_expected_prev[25] )
		&& ((aluout_expected_prev[25] !== last_aluout_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[25] = aluout_expected_prev[25];
	end
	if (
		( aluout_expected_prev[26] !== 1'bx ) && ( aluout_prev[26] !== aluout_expected_prev[26] )
		&& ((aluout_expected_prev[26] !== last_aluout_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[26] = aluout_expected_prev[26];
	end
	if (
		( aluout_expected_prev[27] !== 1'bx ) && ( aluout_prev[27] !== aluout_expected_prev[27] )
		&& ((aluout_expected_prev[27] !== last_aluout_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[27] = aluout_expected_prev[27];
	end
	if (
		( aluout_expected_prev[28] !== 1'bx ) && ( aluout_prev[28] !== aluout_expected_prev[28] )
		&& ((aluout_expected_prev[28] !== last_aluout_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[28] = aluout_expected_prev[28];
	end
	if (
		( aluout_expected_prev[29] !== 1'bx ) && ( aluout_prev[29] !== aluout_expected_prev[29] )
		&& ((aluout_expected_prev[29] !== last_aluout_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[29] = aluout_expected_prev[29];
	end
	if (
		( aluout_expected_prev[30] !== 1'bx ) && ( aluout_prev[30] !== aluout_expected_prev[30] )
		&& ((aluout_expected_prev[30] !== last_aluout_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[30] = aluout_expected_prev[30];
	end
	if (
		( aluout_expected_prev[31] !== 1'bx ) && ( aluout_prev[31] !== aluout_expected_prev[31] )
		&& ((aluout_expected_prev[31] !== last_aluout_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluout[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluout_expected_prev);
		$display ("     Real value = %b", aluout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluout_exp[31] = aluout_expected_prev[31];
	end
	if (
		( cikaninstruction_expected_prev[0] !== 1'bx ) && ( cikaninstruction_prev[0] !== cikaninstruction_expected_prev[0] )
		&& ((cikaninstruction_expected_prev[0] !== last_cikaninstruction_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[0] = cikaninstruction_expected_prev[0];
	end
	if (
		( cikaninstruction_expected_prev[1] !== 1'bx ) && ( cikaninstruction_prev[1] !== cikaninstruction_expected_prev[1] )
		&& ((cikaninstruction_expected_prev[1] !== last_cikaninstruction_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[1] = cikaninstruction_expected_prev[1];
	end
	if (
		( cikaninstruction_expected_prev[2] !== 1'bx ) && ( cikaninstruction_prev[2] !== cikaninstruction_expected_prev[2] )
		&& ((cikaninstruction_expected_prev[2] !== last_cikaninstruction_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[2] = cikaninstruction_expected_prev[2];
	end
	if (
		( cikaninstruction_expected_prev[3] !== 1'bx ) && ( cikaninstruction_prev[3] !== cikaninstruction_expected_prev[3] )
		&& ((cikaninstruction_expected_prev[3] !== last_cikaninstruction_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[3] = cikaninstruction_expected_prev[3];
	end
	if (
		( cikaninstruction_expected_prev[4] !== 1'bx ) && ( cikaninstruction_prev[4] !== cikaninstruction_expected_prev[4] )
		&& ((cikaninstruction_expected_prev[4] !== last_cikaninstruction_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[4] = cikaninstruction_expected_prev[4];
	end
	if (
		( cikaninstruction_expected_prev[5] !== 1'bx ) && ( cikaninstruction_prev[5] !== cikaninstruction_expected_prev[5] )
		&& ((cikaninstruction_expected_prev[5] !== last_cikaninstruction_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[5] = cikaninstruction_expected_prev[5];
	end
	if (
		( cikaninstruction_expected_prev[6] !== 1'bx ) && ( cikaninstruction_prev[6] !== cikaninstruction_expected_prev[6] )
		&& ((cikaninstruction_expected_prev[6] !== last_cikaninstruction_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[6] = cikaninstruction_expected_prev[6];
	end
	if (
		( cikaninstruction_expected_prev[7] !== 1'bx ) && ( cikaninstruction_prev[7] !== cikaninstruction_expected_prev[7] )
		&& ((cikaninstruction_expected_prev[7] !== last_cikaninstruction_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[7] = cikaninstruction_expected_prev[7];
	end
	if (
		( cikaninstruction_expected_prev[8] !== 1'bx ) && ( cikaninstruction_prev[8] !== cikaninstruction_expected_prev[8] )
		&& ((cikaninstruction_expected_prev[8] !== last_cikaninstruction_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[8] = cikaninstruction_expected_prev[8];
	end
	if (
		( cikaninstruction_expected_prev[9] !== 1'bx ) && ( cikaninstruction_prev[9] !== cikaninstruction_expected_prev[9] )
		&& ((cikaninstruction_expected_prev[9] !== last_cikaninstruction_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[9] = cikaninstruction_expected_prev[9];
	end
	if (
		( cikaninstruction_expected_prev[10] !== 1'bx ) && ( cikaninstruction_prev[10] !== cikaninstruction_expected_prev[10] )
		&& ((cikaninstruction_expected_prev[10] !== last_cikaninstruction_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[10] = cikaninstruction_expected_prev[10];
	end
	if (
		( cikaninstruction_expected_prev[11] !== 1'bx ) && ( cikaninstruction_prev[11] !== cikaninstruction_expected_prev[11] )
		&& ((cikaninstruction_expected_prev[11] !== last_cikaninstruction_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[11] = cikaninstruction_expected_prev[11];
	end
	if (
		( cikaninstruction_expected_prev[12] !== 1'bx ) && ( cikaninstruction_prev[12] !== cikaninstruction_expected_prev[12] )
		&& ((cikaninstruction_expected_prev[12] !== last_cikaninstruction_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[12] = cikaninstruction_expected_prev[12];
	end
	if (
		( cikaninstruction_expected_prev[13] !== 1'bx ) && ( cikaninstruction_prev[13] !== cikaninstruction_expected_prev[13] )
		&& ((cikaninstruction_expected_prev[13] !== last_cikaninstruction_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[13] = cikaninstruction_expected_prev[13];
	end
	if (
		( cikaninstruction_expected_prev[14] !== 1'bx ) && ( cikaninstruction_prev[14] !== cikaninstruction_expected_prev[14] )
		&& ((cikaninstruction_expected_prev[14] !== last_cikaninstruction_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[14] = cikaninstruction_expected_prev[14];
	end
	if (
		( cikaninstruction_expected_prev[15] !== 1'bx ) && ( cikaninstruction_prev[15] !== cikaninstruction_expected_prev[15] )
		&& ((cikaninstruction_expected_prev[15] !== last_cikaninstruction_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[15] = cikaninstruction_expected_prev[15];
	end
	if (
		( cikaninstruction_expected_prev[16] !== 1'bx ) && ( cikaninstruction_prev[16] !== cikaninstruction_expected_prev[16] )
		&& ((cikaninstruction_expected_prev[16] !== last_cikaninstruction_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[16] = cikaninstruction_expected_prev[16];
	end
	if (
		( cikaninstruction_expected_prev[17] !== 1'bx ) && ( cikaninstruction_prev[17] !== cikaninstruction_expected_prev[17] )
		&& ((cikaninstruction_expected_prev[17] !== last_cikaninstruction_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[17] = cikaninstruction_expected_prev[17];
	end
	if (
		( cikaninstruction_expected_prev[18] !== 1'bx ) && ( cikaninstruction_prev[18] !== cikaninstruction_expected_prev[18] )
		&& ((cikaninstruction_expected_prev[18] !== last_cikaninstruction_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[18] = cikaninstruction_expected_prev[18];
	end
	if (
		( cikaninstruction_expected_prev[19] !== 1'bx ) && ( cikaninstruction_prev[19] !== cikaninstruction_expected_prev[19] )
		&& ((cikaninstruction_expected_prev[19] !== last_cikaninstruction_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[19] = cikaninstruction_expected_prev[19];
	end
	if (
		( cikaninstruction_expected_prev[20] !== 1'bx ) && ( cikaninstruction_prev[20] !== cikaninstruction_expected_prev[20] )
		&& ((cikaninstruction_expected_prev[20] !== last_cikaninstruction_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[20] = cikaninstruction_expected_prev[20];
	end
	if (
		( cikaninstruction_expected_prev[21] !== 1'bx ) && ( cikaninstruction_prev[21] !== cikaninstruction_expected_prev[21] )
		&& ((cikaninstruction_expected_prev[21] !== last_cikaninstruction_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[21] = cikaninstruction_expected_prev[21];
	end
	if (
		( cikaninstruction_expected_prev[22] !== 1'bx ) && ( cikaninstruction_prev[22] !== cikaninstruction_expected_prev[22] )
		&& ((cikaninstruction_expected_prev[22] !== last_cikaninstruction_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[22] = cikaninstruction_expected_prev[22];
	end
	if (
		( cikaninstruction_expected_prev[23] !== 1'bx ) && ( cikaninstruction_prev[23] !== cikaninstruction_expected_prev[23] )
		&& ((cikaninstruction_expected_prev[23] !== last_cikaninstruction_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[23] = cikaninstruction_expected_prev[23];
	end
	if (
		( cikaninstruction_expected_prev[24] !== 1'bx ) && ( cikaninstruction_prev[24] !== cikaninstruction_expected_prev[24] )
		&& ((cikaninstruction_expected_prev[24] !== last_cikaninstruction_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[24] = cikaninstruction_expected_prev[24];
	end
	if (
		( cikaninstruction_expected_prev[25] !== 1'bx ) && ( cikaninstruction_prev[25] !== cikaninstruction_expected_prev[25] )
		&& ((cikaninstruction_expected_prev[25] !== last_cikaninstruction_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[25] = cikaninstruction_expected_prev[25];
	end
	if (
		( cikaninstruction_expected_prev[26] !== 1'bx ) && ( cikaninstruction_prev[26] !== cikaninstruction_expected_prev[26] )
		&& ((cikaninstruction_expected_prev[26] !== last_cikaninstruction_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[26] = cikaninstruction_expected_prev[26];
	end
	if (
		( cikaninstruction_expected_prev[27] !== 1'bx ) && ( cikaninstruction_prev[27] !== cikaninstruction_expected_prev[27] )
		&& ((cikaninstruction_expected_prev[27] !== last_cikaninstruction_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[27] = cikaninstruction_expected_prev[27];
	end
	if (
		( cikaninstruction_expected_prev[28] !== 1'bx ) && ( cikaninstruction_prev[28] !== cikaninstruction_expected_prev[28] )
		&& ((cikaninstruction_expected_prev[28] !== last_cikaninstruction_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[28] = cikaninstruction_expected_prev[28];
	end
	if (
		( cikaninstruction_expected_prev[29] !== 1'bx ) && ( cikaninstruction_prev[29] !== cikaninstruction_expected_prev[29] )
		&& ((cikaninstruction_expected_prev[29] !== last_cikaninstruction_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[29] = cikaninstruction_expected_prev[29];
	end
	if (
		( cikaninstruction_expected_prev[30] !== 1'bx ) && ( cikaninstruction_prev[30] !== cikaninstruction_expected_prev[30] )
		&& ((cikaninstruction_expected_prev[30] !== last_cikaninstruction_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[30] = cikaninstruction_expected_prev[30];
	end
	if (
		( cikaninstruction_expected_prev[31] !== 1'bx ) && ( cikaninstruction_prev[31] !== cikaninstruction_expected_prev[31] )
		&& ((cikaninstruction_expected_prev[31] !== last_cikaninstruction_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikaninstruction[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikaninstruction_expected_prev);
		$display ("     Real value = %b", cikaninstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikaninstruction_exp[31] = cikaninstruction_expected_prev[31];
	end
	if (
		( extendout_expected_prev[0] !== 1'bx ) && ( extendout_prev[0] !== extendout_expected_prev[0] )
		&& ((extendout_expected_prev[0] !== last_extendout_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[0] = extendout_expected_prev[0];
	end
	if (
		( extendout_expected_prev[1] !== 1'bx ) && ( extendout_prev[1] !== extendout_expected_prev[1] )
		&& ((extendout_expected_prev[1] !== last_extendout_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[1] = extendout_expected_prev[1];
	end
	if (
		( extendout_expected_prev[2] !== 1'bx ) && ( extendout_prev[2] !== extendout_expected_prev[2] )
		&& ((extendout_expected_prev[2] !== last_extendout_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[2] = extendout_expected_prev[2];
	end
	if (
		( extendout_expected_prev[3] !== 1'bx ) && ( extendout_prev[3] !== extendout_expected_prev[3] )
		&& ((extendout_expected_prev[3] !== last_extendout_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[3] = extendout_expected_prev[3];
	end
	if (
		( extendout_expected_prev[4] !== 1'bx ) && ( extendout_prev[4] !== extendout_expected_prev[4] )
		&& ((extendout_expected_prev[4] !== last_extendout_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[4] = extendout_expected_prev[4];
	end
	if (
		( extendout_expected_prev[5] !== 1'bx ) && ( extendout_prev[5] !== extendout_expected_prev[5] )
		&& ((extendout_expected_prev[5] !== last_extendout_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[5] = extendout_expected_prev[5];
	end
	if (
		( extendout_expected_prev[6] !== 1'bx ) && ( extendout_prev[6] !== extendout_expected_prev[6] )
		&& ((extendout_expected_prev[6] !== last_extendout_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[6] = extendout_expected_prev[6];
	end
	if (
		( extendout_expected_prev[7] !== 1'bx ) && ( extendout_prev[7] !== extendout_expected_prev[7] )
		&& ((extendout_expected_prev[7] !== last_extendout_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[7] = extendout_expected_prev[7];
	end
	if (
		( extendout_expected_prev[8] !== 1'bx ) && ( extendout_prev[8] !== extendout_expected_prev[8] )
		&& ((extendout_expected_prev[8] !== last_extendout_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[8] = extendout_expected_prev[8];
	end
	if (
		( extendout_expected_prev[9] !== 1'bx ) && ( extendout_prev[9] !== extendout_expected_prev[9] )
		&& ((extendout_expected_prev[9] !== last_extendout_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[9] = extendout_expected_prev[9];
	end
	if (
		( extendout_expected_prev[10] !== 1'bx ) && ( extendout_prev[10] !== extendout_expected_prev[10] )
		&& ((extendout_expected_prev[10] !== last_extendout_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[10] = extendout_expected_prev[10];
	end
	if (
		( extendout_expected_prev[11] !== 1'bx ) && ( extendout_prev[11] !== extendout_expected_prev[11] )
		&& ((extendout_expected_prev[11] !== last_extendout_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[11] = extendout_expected_prev[11];
	end
	if (
		( extendout_expected_prev[12] !== 1'bx ) && ( extendout_prev[12] !== extendout_expected_prev[12] )
		&& ((extendout_expected_prev[12] !== last_extendout_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[12] = extendout_expected_prev[12];
	end
	if (
		( extendout_expected_prev[13] !== 1'bx ) && ( extendout_prev[13] !== extendout_expected_prev[13] )
		&& ((extendout_expected_prev[13] !== last_extendout_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[13] = extendout_expected_prev[13];
	end
	if (
		( extendout_expected_prev[14] !== 1'bx ) && ( extendout_prev[14] !== extendout_expected_prev[14] )
		&& ((extendout_expected_prev[14] !== last_extendout_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[14] = extendout_expected_prev[14];
	end
	if (
		( extendout_expected_prev[15] !== 1'bx ) && ( extendout_prev[15] !== extendout_expected_prev[15] )
		&& ((extendout_expected_prev[15] !== last_extendout_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[15] = extendout_expected_prev[15];
	end
	if (
		( extendout_expected_prev[16] !== 1'bx ) && ( extendout_prev[16] !== extendout_expected_prev[16] )
		&& ((extendout_expected_prev[16] !== last_extendout_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[16] = extendout_expected_prev[16];
	end
	if (
		( extendout_expected_prev[17] !== 1'bx ) && ( extendout_prev[17] !== extendout_expected_prev[17] )
		&& ((extendout_expected_prev[17] !== last_extendout_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[17] = extendout_expected_prev[17];
	end
	if (
		( extendout_expected_prev[18] !== 1'bx ) && ( extendout_prev[18] !== extendout_expected_prev[18] )
		&& ((extendout_expected_prev[18] !== last_extendout_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[18] = extendout_expected_prev[18];
	end
	if (
		( extendout_expected_prev[19] !== 1'bx ) && ( extendout_prev[19] !== extendout_expected_prev[19] )
		&& ((extendout_expected_prev[19] !== last_extendout_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[19] = extendout_expected_prev[19];
	end
	if (
		( extendout_expected_prev[20] !== 1'bx ) && ( extendout_prev[20] !== extendout_expected_prev[20] )
		&& ((extendout_expected_prev[20] !== last_extendout_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[20] = extendout_expected_prev[20];
	end
	if (
		( extendout_expected_prev[21] !== 1'bx ) && ( extendout_prev[21] !== extendout_expected_prev[21] )
		&& ((extendout_expected_prev[21] !== last_extendout_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[21] = extendout_expected_prev[21];
	end
	if (
		( extendout_expected_prev[22] !== 1'bx ) && ( extendout_prev[22] !== extendout_expected_prev[22] )
		&& ((extendout_expected_prev[22] !== last_extendout_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[22] = extendout_expected_prev[22];
	end
	if (
		( extendout_expected_prev[23] !== 1'bx ) && ( extendout_prev[23] !== extendout_expected_prev[23] )
		&& ((extendout_expected_prev[23] !== last_extendout_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[23] = extendout_expected_prev[23];
	end
	if (
		( extendout_expected_prev[24] !== 1'bx ) && ( extendout_prev[24] !== extendout_expected_prev[24] )
		&& ((extendout_expected_prev[24] !== last_extendout_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[24] = extendout_expected_prev[24];
	end
	if (
		( extendout_expected_prev[25] !== 1'bx ) && ( extendout_prev[25] !== extendout_expected_prev[25] )
		&& ((extendout_expected_prev[25] !== last_extendout_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[25] = extendout_expected_prev[25];
	end
	if (
		( extendout_expected_prev[26] !== 1'bx ) && ( extendout_prev[26] !== extendout_expected_prev[26] )
		&& ((extendout_expected_prev[26] !== last_extendout_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[26] = extendout_expected_prev[26];
	end
	if (
		( extendout_expected_prev[27] !== 1'bx ) && ( extendout_prev[27] !== extendout_expected_prev[27] )
		&& ((extendout_expected_prev[27] !== last_extendout_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[27] = extendout_expected_prev[27];
	end
	if (
		( extendout_expected_prev[28] !== 1'bx ) && ( extendout_prev[28] !== extendout_expected_prev[28] )
		&& ((extendout_expected_prev[28] !== last_extendout_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[28] = extendout_expected_prev[28];
	end
	if (
		( extendout_expected_prev[29] !== 1'bx ) && ( extendout_prev[29] !== extendout_expected_prev[29] )
		&& ((extendout_expected_prev[29] !== last_extendout_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[29] = extendout_expected_prev[29];
	end
	if (
		( extendout_expected_prev[30] !== 1'bx ) && ( extendout_prev[30] !== extendout_expected_prev[30] )
		&& ((extendout_expected_prev[30] !== last_extendout_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[30] = extendout_expected_prev[30];
	end
	if (
		( extendout_expected_prev[31] !== 1'bx ) && ( extendout_prev[31] !== extendout_expected_prev[31] )
		&& ((extendout_expected_prev[31] !== last_extendout_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port extendout[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", extendout_expected_prev);
		$display ("     Real value = %b", extendout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_extendout_exp[31] = extendout_expected_prev[31];
	end
	if (
		( nowrite_expected_prev !== 1'bx ) && ( nowrite_prev !== nowrite_expected_prev )
		&& ((nowrite_expected_prev !== last_nowrite_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nowrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nowrite_expected_prev);
		$display ("     Real value = %b", nowrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_nowrite_exp = nowrite_expected_prev;
	end
	if (
		( ortaregwrite_expected_prev !== 1'bx ) && ( ortaregwrite_prev !== ortaregwrite_expected_prev )
		&& ((ortaregwrite_expected_prev !== last_ortaregwrite_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ortaregwrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ortaregwrite_expected_prev);
		$display ("     Real value = %b", ortaregwrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ortaregwrite_exp = ortaregwrite_expected_prev;
	end
	if (
		( pcoutadress_expected_prev[0] !== 1'bx ) && ( pcoutadress_prev[0] !== pcoutadress_expected_prev[0] )
		&& ((pcoutadress_expected_prev[0] !== last_pcoutadress_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[0] = pcoutadress_expected_prev[0];
	end
	if (
		( pcoutadress_expected_prev[1] !== 1'bx ) && ( pcoutadress_prev[1] !== pcoutadress_expected_prev[1] )
		&& ((pcoutadress_expected_prev[1] !== last_pcoutadress_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[1] = pcoutadress_expected_prev[1];
	end
	if (
		( pcoutadress_expected_prev[2] !== 1'bx ) && ( pcoutadress_prev[2] !== pcoutadress_expected_prev[2] )
		&& ((pcoutadress_expected_prev[2] !== last_pcoutadress_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[2] = pcoutadress_expected_prev[2];
	end
	if (
		( pcoutadress_expected_prev[3] !== 1'bx ) && ( pcoutadress_prev[3] !== pcoutadress_expected_prev[3] )
		&& ((pcoutadress_expected_prev[3] !== last_pcoutadress_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[3] = pcoutadress_expected_prev[3];
	end
	if (
		( pcoutadress_expected_prev[4] !== 1'bx ) && ( pcoutadress_prev[4] !== pcoutadress_expected_prev[4] )
		&& ((pcoutadress_expected_prev[4] !== last_pcoutadress_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[4] = pcoutadress_expected_prev[4];
	end
	if (
		( pcoutadress_expected_prev[5] !== 1'bx ) && ( pcoutadress_prev[5] !== pcoutadress_expected_prev[5] )
		&& ((pcoutadress_expected_prev[5] !== last_pcoutadress_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[5] = pcoutadress_expected_prev[5];
	end
	if (
		( pcoutadress_expected_prev[6] !== 1'bx ) && ( pcoutadress_prev[6] !== pcoutadress_expected_prev[6] )
		&& ((pcoutadress_expected_prev[6] !== last_pcoutadress_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[6] = pcoutadress_expected_prev[6];
	end
	if (
		( pcoutadress_expected_prev[7] !== 1'bx ) && ( pcoutadress_prev[7] !== pcoutadress_expected_prev[7] )
		&& ((pcoutadress_expected_prev[7] !== last_pcoutadress_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[7] = pcoutadress_expected_prev[7];
	end
	if (
		( pcoutadress_expected_prev[8] !== 1'bx ) && ( pcoutadress_prev[8] !== pcoutadress_expected_prev[8] )
		&& ((pcoutadress_expected_prev[8] !== last_pcoutadress_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[8] = pcoutadress_expected_prev[8];
	end
	if (
		( pcoutadress_expected_prev[9] !== 1'bx ) && ( pcoutadress_prev[9] !== pcoutadress_expected_prev[9] )
		&& ((pcoutadress_expected_prev[9] !== last_pcoutadress_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[9] = pcoutadress_expected_prev[9];
	end
	if (
		( pcoutadress_expected_prev[10] !== 1'bx ) && ( pcoutadress_prev[10] !== pcoutadress_expected_prev[10] )
		&& ((pcoutadress_expected_prev[10] !== last_pcoutadress_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[10] = pcoutadress_expected_prev[10];
	end
	if (
		( pcoutadress_expected_prev[11] !== 1'bx ) && ( pcoutadress_prev[11] !== pcoutadress_expected_prev[11] )
		&& ((pcoutadress_expected_prev[11] !== last_pcoutadress_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[11] = pcoutadress_expected_prev[11];
	end
	if (
		( pcoutadress_expected_prev[12] !== 1'bx ) && ( pcoutadress_prev[12] !== pcoutadress_expected_prev[12] )
		&& ((pcoutadress_expected_prev[12] !== last_pcoutadress_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[12] = pcoutadress_expected_prev[12];
	end
	if (
		( pcoutadress_expected_prev[13] !== 1'bx ) && ( pcoutadress_prev[13] !== pcoutadress_expected_prev[13] )
		&& ((pcoutadress_expected_prev[13] !== last_pcoutadress_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[13] = pcoutadress_expected_prev[13];
	end
	if (
		( pcoutadress_expected_prev[14] !== 1'bx ) && ( pcoutadress_prev[14] !== pcoutadress_expected_prev[14] )
		&& ((pcoutadress_expected_prev[14] !== last_pcoutadress_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[14] = pcoutadress_expected_prev[14];
	end
	if (
		( pcoutadress_expected_prev[15] !== 1'bx ) && ( pcoutadress_prev[15] !== pcoutadress_expected_prev[15] )
		&& ((pcoutadress_expected_prev[15] !== last_pcoutadress_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[15] = pcoutadress_expected_prev[15];
	end
	if (
		( pcoutadress_expected_prev[16] !== 1'bx ) && ( pcoutadress_prev[16] !== pcoutadress_expected_prev[16] )
		&& ((pcoutadress_expected_prev[16] !== last_pcoutadress_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[16] = pcoutadress_expected_prev[16];
	end
	if (
		( pcoutadress_expected_prev[17] !== 1'bx ) && ( pcoutadress_prev[17] !== pcoutadress_expected_prev[17] )
		&& ((pcoutadress_expected_prev[17] !== last_pcoutadress_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[17] = pcoutadress_expected_prev[17];
	end
	if (
		( pcoutadress_expected_prev[18] !== 1'bx ) && ( pcoutadress_prev[18] !== pcoutadress_expected_prev[18] )
		&& ((pcoutadress_expected_prev[18] !== last_pcoutadress_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[18] = pcoutadress_expected_prev[18];
	end
	if (
		( pcoutadress_expected_prev[19] !== 1'bx ) && ( pcoutadress_prev[19] !== pcoutadress_expected_prev[19] )
		&& ((pcoutadress_expected_prev[19] !== last_pcoutadress_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[19] = pcoutadress_expected_prev[19];
	end
	if (
		( pcoutadress_expected_prev[20] !== 1'bx ) && ( pcoutadress_prev[20] !== pcoutadress_expected_prev[20] )
		&& ((pcoutadress_expected_prev[20] !== last_pcoutadress_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[20] = pcoutadress_expected_prev[20];
	end
	if (
		( pcoutadress_expected_prev[21] !== 1'bx ) && ( pcoutadress_prev[21] !== pcoutadress_expected_prev[21] )
		&& ((pcoutadress_expected_prev[21] !== last_pcoutadress_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[21] = pcoutadress_expected_prev[21];
	end
	if (
		( pcoutadress_expected_prev[22] !== 1'bx ) && ( pcoutadress_prev[22] !== pcoutadress_expected_prev[22] )
		&& ((pcoutadress_expected_prev[22] !== last_pcoutadress_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[22] = pcoutadress_expected_prev[22];
	end
	if (
		( pcoutadress_expected_prev[23] !== 1'bx ) && ( pcoutadress_prev[23] !== pcoutadress_expected_prev[23] )
		&& ((pcoutadress_expected_prev[23] !== last_pcoutadress_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[23] = pcoutadress_expected_prev[23];
	end
	if (
		( pcoutadress_expected_prev[24] !== 1'bx ) && ( pcoutadress_prev[24] !== pcoutadress_expected_prev[24] )
		&& ((pcoutadress_expected_prev[24] !== last_pcoutadress_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[24] = pcoutadress_expected_prev[24];
	end
	if (
		( pcoutadress_expected_prev[25] !== 1'bx ) && ( pcoutadress_prev[25] !== pcoutadress_expected_prev[25] )
		&& ((pcoutadress_expected_prev[25] !== last_pcoutadress_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[25] = pcoutadress_expected_prev[25];
	end
	if (
		( pcoutadress_expected_prev[26] !== 1'bx ) && ( pcoutadress_prev[26] !== pcoutadress_expected_prev[26] )
		&& ((pcoutadress_expected_prev[26] !== last_pcoutadress_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[26] = pcoutadress_expected_prev[26];
	end
	if (
		( pcoutadress_expected_prev[27] !== 1'bx ) && ( pcoutadress_prev[27] !== pcoutadress_expected_prev[27] )
		&& ((pcoutadress_expected_prev[27] !== last_pcoutadress_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[27] = pcoutadress_expected_prev[27];
	end
	if (
		( pcoutadress_expected_prev[28] !== 1'bx ) && ( pcoutadress_prev[28] !== pcoutadress_expected_prev[28] )
		&& ((pcoutadress_expected_prev[28] !== last_pcoutadress_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[28] = pcoutadress_expected_prev[28];
	end
	if (
		( pcoutadress_expected_prev[29] !== 1'bx ) && ( pcoutadress_prev[29] !== pcoutadress_expected_prev[29] )
		&& ((pcoutadress_expected_prev[29] !== last_pcoutadress_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[29] = pcoutadress_expected_prev[29];
	end
	if (
		( pcoutadress_expected_prev[30] !== 1'bx ) && ( pcoutadress_prev[30] !== pcoutadress_expected_prev[30] )
		&& ((pcoutadress_expected_prev[30] !== last_pcoutadress_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[30] = pcoutadress_expected_prev[30];
	end
	if (
		( pcoutadress_expected_prev[31] !== 1'bx ) && ( pcoutadress_prev[31] !== pcoutadress_expected_prev[31] )
		&& ((pcoutadress_expected_prev[31] !== last_pcoutadress_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcoutadress[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcoutadress_expected_prev);
		$display ("     Real value = %b", pcoutadress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pcoutadress_exp[31] = pcoutadress_expected_prev[31];
	end
	if (
		( r2_expected_prev[0] !== 1'bx ) && ( r2_prev[0] !== r2_expected_prev[0] )
		&& ((r2_expected_prev[0] !== last_r2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[0] = r2_expected_prev[0];
	end
	if (
		( r2_expected_prev[1] !== 1'bx ) && ( r2_prev[1] !== r2_expected_prev[1] )
		&& ((r2_expected_prev[1] !== last_r2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[1] = r2_expected_prev[1];
	end
	if (
		( r2_expected_prev[2] !== 1'bx ) && ( r2_prev[2] !== r2_expected_prev[2] )
		&& ((r2_expected_prev[2] !== last_r2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[2] = r2_expected_prev[2];
	end
	if (
		( r2_expected_prev[3] !== 1'bx ) && ( r2_prev[3] !== r2_expected_prev[3] )
		&& ((r2_expected_prev[3] !== last_r2_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[3] = r2_expected_prev[3];
	end
	if (
		( r2_expected_prev[4] !== 1'bx ) && ( r2_prev[4] !== r2_expected_prev[4] )
		&& ((r2_expected_prev[4] !== last_r2_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[4] = r2_expected_prev[4];
	end
	if (
		( r2_expected_prev[5] !== 1'bx ) && ( r2_prev[5] !== r2_expected_prev[5] )
		&& ((r2_expected_prev[5] !== last_r2_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[5] = r2_expected_prev[5];
	end
	if (
		( r2_expected_prev[6] !== 1'bx ) && ( r2_prev[6] !== r2_expected_prev[6] )
		&& ((r2_expected_prev[6] !== last_r2_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[6] = r2_expected_prev[6];
	end
	if (
		( r2_expected_prev[7] !== 1'bx ) && ( r2_prev[7] !== r2_expected_prev[7] )
		&& ((r2_expected_prev[7] !== last_r2_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[7] = r2_expected_prev[7];
	end
	if (
		( r2_expected_prev[8] !== 1'bx ) && ( r2_prev[8] !== r2_expected_prev[8] )
		&& ((r2_expected_prev[8] !== last_r2_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[8] = r2_expected_prev[8];
	end
	if (
		( r2_expected_prev[9] !== 1'bx ) && ( r2_prev[9] !== r2_expected_prev[9] )
		&& ((r2_expected_prev[9] !== last_r2_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[9] = r2_expected_prev[9];
	end
	if (
		( r2_expected_prev[10] !== 1'bx ) && ( r2_prev[10] !== r2_expected_prev[10] )
		&& ((r2_expected_prev[10] !== last_r2_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[10] = r2_expected_prev[10];
	end
	if (
		( r2_expected_prev[11] !== 1'bx ) && ( r2_prev[11] !== r2_expected_prev[11] )
		&& ((r2_expected_prev[11] !== last_r2_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[11] = r2_expected_prev[11];
	end
	if (
		( r2_expected_prev[12] !== 1'bx ) && ( r2_prev[12] !== r2_expected_prev[12] )
		&& ((r2_expected_prev[12] !== last_r2_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[12] = r2_expected_prev[12];
	end
	if (
		( r2_expected_prev[13] !== 1'bx ) && ( r2_prev[13] !== r2_expected_prev[13] )
		&& ((r2_expected_prev[13] !== last_r2_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[13] = r2_expected_prev[13];
	end
	if (
		( r2_expected_prev[14] !== 1'bx ) && ( r2_prev[14] !== r2_expected_prev[14] )
		&& ((r2_expected_prev[14] !== last_r2_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[14] = r2_expected_prev[14];
	end
	if (
		( r2_expected_prev[15] !== 1'bx ) && ( r2_prev[15] !== r2_expected_prev[15] )
		&& ((r2_expected_prev[15] !== last_r2_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[15] = r2_expected_prev[15];
	end
	if (
		( r2_expected_prev[16] !== 1'bx ) && ( r2_prev[16] !== r2_expected_prev[16] )
		&& ((r2_expected_prev[16] !== last_r2_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[16] = r2_expected_prev[16];
	end
	if (
		( r2_expected_prev[17] !== 1'bx ) && ( r2_prev[17] !== r2_expected_prev[17] )
		&& ((r2_expected_prev[17] !== last_r2_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[17] = r2_expected_prev[17];
	end
	if (
		( r2_expected_prev[18] !== 1'bx ) && ( r2_prev[18] !== r2_expected_prev[18] )
		&& ((r2_expected_prev[18] !== last_r2_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[18] = r2_expected_prev[18];
	end
	if (
		( r2_expected_prev[19] !== 1'bx ) && ( r2_prev[19] !== r2_expected_prev[19] )
		&& ((r2_expected_prev[19] !== last_r2_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[19] = r2_expected_prev[19];
	end
	if (
		( r2_expected_prev[20] !== 1'bx ) && ( r2_prev[20] !== r2_expected_prev[20] )
		&& ((r2_expected_prev[20] !== last_r2_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[20] = r2_expected_prev[20];
	end
	if (
		( r2_expected_prev[21] !== 1'bx ) && ( r2_prev[21] !== r2_expected_prev[21] )
		&& ((r2_expected_prev[21] !== last_r2_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[21] = r2_expected_prev[21];
	end
	if (
		( r2_expected_prev[22] !== 1'bx ) && ( r2_prev[22] !== r2_expected_prev[22] )
		&& ((r2_expected_prev[22] !== last_r2_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[22] = r2_expected_prev[22];
	end
	if (
		( r2_expected_prev[23] !== 1'bx ) && ( r2_prev[23] !== r2_expected_prev[23] )
		&& ((r2_expected_prev[23] !== last_r2_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[23] = r2_expected_prev[23];
	end
	if (
		( r2_expected_prev[24] !== 1'bx ) && ( r2_prev[24] !== r2_expected_prev[24] )
		&& ((r2_expected_prev[24] !== last_r2_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[24] = r2_expected_prev[24];
	end
	if (
		( r2_expected_prev[25] !== 1'bx ) && ( r2_prev[25] !== r2_expected_prev[25] )
		&& ((r2_expected_prev[25] !== last_r2_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[25] = r2_expected_prev[25];
	end
	if (
		( r2_expected_prev[26] !== 1'bx ) && ( r2_prev[26] !== r2_expected_prev[26] )
		&& ((r2_expected_prev[26] !== last_r2_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[26] = r2_expected_prev[26];
	end
	if (
		( r2_expected_prev[27] !== 1'bx ) && ( r2_prev[27] !== r2_expected_prev[27] )
		&& ((r2_expected_prev[27] !== last_r2_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[27] = r2_expected_prev[27];
	end
	if (
		( r2_expected_prev[28] !== 1'bx ) && ( r2_prev[28] !== r2_expected_prev[28] )
		&& ((r2_expected_prev[28] !== last_r2_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[28] = r2_expected_prev[28];
	end
	if (
		( r2_expected_prev[29] !== 1'bx ) && ( r2_prev[29] !== r2_expected_prev[29] )
		&& ((r2_expected_prev[29] !== last_r2_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[29] = r2_expected_prev[29];
	end
	if (
		( r2_expected_prev[30] !== 1'bx ) && ( r2_prev[30] !== r2_expected_prev[30] )
		&& ((r2_expected_prev[30] !== last_r2_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[30] = r2_expected_prev[30];
	end
	if (
		( r2_expected_prev[31] !== 1'bx ) && ( r2_prev[31] !== r2_expected_prev[31] )
		&& ((r2_expected_prev[31] !== last_r2_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r2_exp[31] = r2_expected_prev[31];
	end
	if (
		( r3_expected_prev[0] !== 1'bx ) && ( r3_prev[0] !== r3_expected_prev[0] )
		&& ((r3_expected_prev[0] !== last_r3_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[0] = r3_expected_prev[0];
	end
	if (
		( r3_expected_prev[1] !== 1'bx ) && ( r3_prev[1] !== r3_expected_prev[1] )
		&& ((r3_expected_prev[1] !== last_r3_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[1] = r3_expected_prev[1];
	end
	if (
		( r3_expected_prev[2] !== 1'bx ) && ( r3_prev[2] !== r3_expected_prev[2] )
		&& ((r3_expected_prev[2] !== last_r3_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[2] = r3_expected_prev[2];
	end
	if (
		( r3_expected_prev[3] !== 1'bx ) && ( r3_prev[3] !== r3_expected_prev[3] )
		&& ((r3_expected_prev[3] !== last_r3_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[3] = r3_expected_prev[3];
	end
	if (
		( r3_expected_prev[4] !== 1'bx ) && ( r3_prev[4] !== r3_expected_prev[4] )
		&& ((r3_expected_prev[4] !== last_r3_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[4] = r3_expected_prev[4];
	end
	if (
		( r3_expected_prev[5] !== 1'bx ) && ( r3_prev[5] !== r3_expected_prev[5] )
		&& ((r3_expected_prev[5] !== last_r3_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[5] = r3_expected_prev[5];
	end
	if (
		( r3_expected_prev[6] !== 1'bx ) && ( r3_prev[6] !== r3_expected_prev[6] )
		&& ((r3_expected_prev[6] !== last_r3_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[6] = r3_expected_prev[6];
	end
	if (
		( r3_expected_prev[7] !== 1'bx ) && ( r3_prev[7] !== r3_expected_prev[7] )
		&& ((r3_expected_prev[7] !== last_r3_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[7] = r3_expected_prev[7];
	end
	if (
		( r3_expected_prev[8] !== 1'bx ) && ( r3_prev[8] !== r3_expected_prev[8] )
		&& ((r3_expected_prev[8] !== last_r3_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[8] = r3_expected_prev[8];
	end
	if (
		( r3_expected_prev[9] !== 1'bx ) && ( r3_prev[9] !== r3_expected_prev[9] )
		&& ((r3_expected_prev[9] !== last_r3_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[9] = r3_expected_prev[9];
	end
	if (
		( r3_expected_prev[10] !== 1'bx ) && ( r3_prev[10] !== r3_expected_prev[10] )
		&& ((r3_expected_prev[10] !== last_r3_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[10] = r3_expected_prev[10];
	end
	if (
		( r3_expected_prev[11] !== 1'bx ) && ( r3_prev[11] !== r3_expected_prev[11] )
		&& ((r3_expected_prev[11] !== last_r3_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[11] = r3_expected_prev[11];
	end
	if (
		( r3_expected_prev[12] !== 1'bx ) && ( r3_prev[12] !== r3_expected_prev[12] )
		&& ((r3_expected_prev[12] !== last_r3_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[12] = r3_expected_prev[12];
	end
	if (
		( r3_expected_prev[13] !== 1'bx ) && ( r3_prev[13] !== r3_expected_prev[13] )
		&& ((r3_expected_prev[13] !== last_r3_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[13] = r3_expected_prev[13];
	end
	if (
		( r3_expected_prev[14] !== 1'bx ) && ( r3_prev[14] !== r3_expected_prev[14] )
		&& ((r3_expected_prev[14] !== last_r3_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[14] = r3_expected_prev[14];
	end
	if (
		( r3_expected_prev[15] !== 1'bx ) && ( r3_prev[15] !== r3_expected_prev[15] )
		&& ((r3_expected_prev[15] !== last_r3_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[15] = r3_expected_prev[15];
	end
	if (
		( r3_expected_prev[16] !== 1'bx ) && ( r3_prev[16] !== r3_expected_prev[16] )
		&& ((r3_expected_prev[16] !== last_r3_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[16] = r3_expected_prev[16];
	end
	if (
		( r3_expected_prev[17] !== 1'bx ) && ( r3_prev[17] !== r3_expected_prev[17] )
		&& ((r3_expected_prev[17] !== last_r3_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[17] = r3_expected_prev[17];
	end
	if (
		( r3_expected_prev[18] !== 1'bx ) && ( r3_prev[18] !== r3_expected_prev[18] )
		&& ((r3_expected_prev[18] !== last_r3_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[18] = r3_expected_prev[18];
	end
	if (
		( r3_expected_prev[19] !== 1'bx ) && ( r3_prev[19] !== r3_expected_prev[19] )
		&& ((r3_expected_prev[19] !== last_r3_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[19] = r3_expected_prev[19];
	end
	if (
		( r3_expected_prev[20] !== 1'bx ) && ( r3_prev[20] !== r3_expected_prev[20] )
		&& ((r3_expected_prev[20] !== last_r3_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[20] = r3_expected_prev[20];
	end
	if (
		( r3_expected_prev[21] !== 1'bx ) && ( r3_prev[21] !== r3_expected_prev[21] )
		&& ((r3_expected_prev[21] !== last_r3_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[21] = r3_expected_prev[21];
	end
	if (
		( r3_expected_prev[22] !== 1'bx ) && ( r3_prev[22] !== r3_expected_prev[22] )
		&& ((r3_expected_prev[22] !== last_r3_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[22] = r3_expected_prev[22];
	end
	if (
		( r3_expected_prev[23] !== 1'bx ) && ( r3_prev[23] !== r3_expected_prev[23] )
		&& ((r3_expected_prev[23] !== last_r3_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[23] = r3_expected_prev[23];
	end
	if (
		( r3_expected_prev[24] !== 1'bx ) && ( r3_prev[24] !== r3_expected_prev[24] )
		&& ((r3_expected_prev[24] !== last_r3_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[24] = r3_expected_prev[24];
	end
	if (
		( r3_expected_prev[25] !== 1'bx ) && ( r3_prev[25] !== r3_expected_prev[25] )
		&& ((r3_expected_prev[25] !== last_r3_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[25] = r3_expected_prev[25];
	end
	if (
		( r3_expected_prev[26] !== 1'bx ) && ( r3_prev[26] !== r3_expected_prev[26] )
		&& ((r3_expected_prev[26] !== last_r3_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[26] = r3_expected_prev[26];
	end
	if (
		( r3_expected_prev[27] !== 1'bx ) && ( r3_prev[27] !== r3_expected_prev[27] )
		&& ((r3_expected_prev[27] !== last_r3_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[27] = r3_expected_prev[27];
	end
	if (
		( r3_expected_prev[28] !== 1'bx ) && ( r3_prev[28] !== r3_expected_prev[28] )
		&& ((r3_expected_prev[28] !== last_r3_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[28] = r3_expected_prev[28];
	end
	if (
		( r3_expected_prev[29] !== 1'bx ) && ( r3_prev[29] !== r3_expected_prev[29] )
		&& ((r3_expected_prev[29] !== last_r3_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[29] = r3_expected_prev[29];
	end
	if (
		( r3_expected_prev[30] !== 1'bx ) && ( r3_prev[30] !== r3_expected_prev[30] )
		&& ((r3_expected_prev[30] !== last_r3_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[30] = r3_expected_prev[30];
	end
	if (
		( r3_expected_prev[31] !== 1'bx ) && ( r3_prev[31] !== r3_expected_prev[31] )
		&& ((r3_expected_prev[31] !== last_r3_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r3_exp[31] = r3_expected_prev[31];
	end
	if (
		( r4_expected_prev[0] !== 1'bx ) && ( r4_prev[0] !== r4_expected_prev[0] )
		&& ((r4_expected_prev[0] !== last_r4_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[0] = r4_expected_prev[0];
	end
	if (
		( r4_expected_prev[1] !== 1'bx ) && ( r4_prev[1] !== r4_expected_prev[1] )
		&& ((r4_expected_prev[1] !== last_r4_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[1] = r4_expected_prev[1];
	end
	if (
		( r4_expected_prev[2] !== 1'bx ) && ( r4_prev[2] !== r4_expected_prev[2] )
		&& ((r4_expected_prev[2] !== last_r4_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[2] = r4_expected_prev[2];
	end
	if (
		( r4_expected_prev[3] !== 1'bx ) && ( r4_prev[3] !== r4_expected_prev[3] )
		&& ((r4_expected_prev[3] !== last_r4_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[3] = r4_expected_prev[3];
	end
	if (
		( r4_expected_prev[4] !== 1'bx ) && ( r4_prev[4] !== r4_expected_prev[4] )
		&& ((r4_expected_prev[4] !== last_r4_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[4] = r4_expected_prev[4];
	end
	if (
		( r4_expected_prev[5] !== 1'bx ) && ( r4_prev[5] !== r4_expected_prev[5] )
		&& ((r4_expected_prev[5] !== last_r4_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[5] = r4_expected_prev[5];
	end
	if (
		( r4_expected_prev[6] !== 1'bx ) && ( r4_prev[6] !== r4_expected_prev[6] )
		&& ((r4_expected_prev[6] !== last_r4_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[6] = r4_expected_prev[6];
	end
	if (
		( r4_expected_prev[7] !== 1'bx ) && ( r4_prev[7] !== r4_expected_prev[7] )
		&& ((r4_expected_prev[7] !== last_r4_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[7] = r4_expected_prev[7];
	end
	if (
		( r4_expected_prev[8] !== 1'bx ) && ( r4_prev[8] !== r4_expected_prev[8] )
		&& ((r4_expected_prev[8] !== last_r4_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[8] = r4_expected_prev[8];
	end
	if (
		( r4_expected_prev[9] !== 1'bx ) && ( r4_prev[9] !== r4_expected_prev[9] )
		&& ((r4_expected_prev[9] !== last_r4_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[9] = r4_expected_prev[9];
	end
	if (
		( r4_expected_prev[10] !== 1'bx ) && ( r4_prev[10] !== r4_expected_prev[10] )
		&& ((r4_expected_prev[10] !== last_r4_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[10] = r4_expected_prev[10];
	end
	if (
		( r4_expected_prev[11] !== 1'bx ) && ( r4_prev[11] !== r4_expected_prev[11] )
		&& ((r4_expected_prev[11] !== last_r4_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[11] = r4_expected_prev[11];
	end
	if (
		( r4_expected_prev[12] !== 1'bx ) && ( r4_prev[12] !== r4_expected_prev[12] )
		&& ((r4_expected_prev[12] !== last_r4_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[12] = r4_expected_prev[12];
	end
	if (
		( r4_expected_prev[13] !== 1'bx ) && ( r4_prev[13] !== r4_expected_prev[13] )
		&& ((r4_expected_prev[13] !== last_r4_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[13] = r4_expected_prev[13];
	end
	if (
		( r4_expected_prev[14] !== 1'bx ) && ( r4_prev[14] !== r4_expected_prev[14] )
		&& ((r4_expected_prev[14] !== last_r4_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[14] = r4_expected_prev[14];
	end
	if (
		( r4_expected_prev[15] !== 1'bx ) && ( r4_prev[15] !== r4_expected_prev[15] )
		&& ((r4_expected_prev[15] !== last_r4_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[15] = r4_expected_prev[15];
	end
	if (
		( r4_expected_prev[16] !== 1'bx ) && ( r4_prev[16] !== r4_expected_prev[16] )
		&& ((r4_expected_prev[16] !== last_r4_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[16] = r4_expected_prev[16];
	end
	if (
		( r4_expected_prev[17] !== 1'bx ) && ( r4_prev[17] !== r4_expected_prev[17] )
		&& ((r4_expected_prev[17] !== last_r4_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[17] = r4_expected_prev[17];
	end
	if (
		( r4_expected_prev[18] !== 1'bx ) && ( r4_prev[18] !== r4_expected_prev[18] )
		&& ((r4_expected_prev[18] !== last_r4_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[18] = r4_expected_prev[18];
	end
	if (
		( r4_expected_prev[19] !== 1'bx ) && ( r4_prev[19] !== r4_expected_prev[19] )
		&& ((r4_expected_prev[19] !== last_r4_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[19] = r4_expected_prev[19];
	end
	if (
		( r4_expected_prev[20] !== 1'bx ) && ( r4_prev[20] !== r4_expected_prev[20] )
		&& ((r4_expected_prev[20] !== last_r4_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[20] = r4_expected_prev[20];
	end
	if (
		( r4_expected_prev[21] !== 1'bx ) && ( r4_prev[21] !== r4_expected_prev[21] )
		&& ((r4_expected_prev[21] !== last_r4_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[21] = r4_expected_prev[21];
	end
	if (
		( r4_expected_prev[22] !== 1'bx ) && ( r4_prev[22] !== r4_expected_prev[22] )
		&& ((r4_expected_prev[22] !== last_r4_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[22] = r4_expected_prev[22];
	end
	if (
		( r4_expected_prev[23] !== 1'bx ) && ( r4_prev[23] !== r4_expected_prev[23] )
		&& ((r4_expected_prev[23] !== last_r4_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[23] = r4_expected_prev[23];
	end
	if (
		( r4_expected_prev[24] !== 1'bx ) && ( r4_prev[24] !== r4_expected_prev[24] )
		&& ((r4_expected_prev[24] !== last_r4_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[24] = r4_expected_prev[24];
	end
	if (
		( r4_expected_prev[25] !== 1'bx ) && ( r4_prev[25] !== r4_expected_prev[25] )
		&& ((r4_expected_prev[25] !== last_r4_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[25] = r4_expected_prev[25];
	end
	if (
		( r4_expected_prev[26] !== 1'bx ) && ( r4_prev[26] !== r4_expected_prev[26] )
		&& ((r4_expected_prev[26] !== last_r4_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[26] = r4_expected_prev[26];
	end
	if (
		( r4_expected_prev[27] !== 1'bx ) && ( r4_prev[27] !== r4_expected_prev[27] )
		&& ((r4_expected_prev[27] !== last_r4_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[27] = r4_expected_prev[27];
	end
	if (
		( r4_expected_prev[28] !== 1'bx ) && ( r4_prev[28] !== r4_expected_prev[28] )
		&& ((r4_expected_prev[28] !== last_r4_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[28] = r4_expected_prev[28];
	end
	if (
		( r4_expected_prev[29] !== 1'bx ) && ( r4_prev[29] !== r4_expected_prev[29] )
		&& ((r4_expected_prev[29] !== last_r4_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[29] = r4_expected_prev[29];
	end
	if (
		( r4_expected_prev[30] !== 1'bx ) && ( r4_prev[30] !== r4_expected_prev[30] )
		&& ((r4_expected_prev[30] !== last_r4_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[30] = r4_expected_prev[30];
	end
	if (
		( r4_expected_prev[31] !== 1'bx ) && ( r4_prev[31] !== r4_expected_prev[31] )
		&& ((r4_expected_prev[31] !== last_r4_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r4_exp[31] = r4_expected_prev[31];
	end
	if (
		( r5_expected_prev[0] !== 1'bx ) && ( r5_prev[0] !== r5_expected_prev[0] )
		&& ((r5_expected_prev[0] !== last_r5_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[0] = r5_expected_prev[0];
	end
	if (
		( r5_expected_prev[1] !== 1'bx ) && ( r5_prev[1] !== r5_expected_prev[1] )
		&& ((r5_expected_prev[1] !== last_r5_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[1] = r5_expected_prev[1];
	end
	if (
		( r5_expected_prev[2] !== 1'bx ) && ( r5_prev[2] !== r5_expected_prev[2] )
		&& ((r5_expected_prev[2] !== last_r5_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[2] = r5_expected_prev[2];
	end
	if (
		( r5_expected_prev[3] !== 1'bx ) && ( r5_prev[3] !== r5_expected_prev[3] )
		&& ((r5_expected_prev[3] !== last_r5_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[3] = r5_expected_prev[3];
	end
	if (
		( r5_expected_prev[4] !== 1'bx ) && ( r5_prev[4] !== r5_expected_prev[4] )
		&& ((r5_expected_prev[4] !== last_r5_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[4] = r5_expected_prev[4];
	end
	if (
		( r5_expected_prev[5] !== 1'bx ) && ( r5_prev[5] !== r5_expected_prev[5] )
		&& ((r5_expected_prev[5] !== last_r5_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[5] = r5_expected_prev[5];
	end
	if (
		( r5_expected_prev[6] !== 1'bx ) && ( r5_prev[6] !== r5_expected_prev[6] )
		&& ((r5_expected_prev[6] !== last_r5_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[6] = r5_expected_prev[6];
	end
	if (
		( r5_expected_prev[7] !== 1'bx ) && ( r5_prev[7] !== r5_expected_prev[7] )
		&& ((r5_expected_prev[7] !== last_r5_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[7] = r5_expected_prev[7];
	end
	if (
		( r5_expected_prev[8] !== 1'bx ) && ( r5_prev[8] !== r5_expected_prev[8] )
		&& ((r5_expected_prev[8] !== last_r5_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[8] = r5_expected_prev[8];
	end
	if (
		( r5_expected_prev[9] !== 1'bx ) && ( r5_prev[9] !== r5_expected_prev[9] )
		&& ((r5_expected_prev[9] !== last_r5_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[9] = r5_expected_prev[9];
	end
	if (
		( r5_expected_prev[10] !== 1'bx ) && ( r5_prev[10] !== r5_expected_prev[10] )
		&& ((r5_expected_prev[10] !== last_r5_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[10] = r5_expected_prev[10];
	end
	if (
		( r5_expected_prev[11] !== 1'bx ) && ( r5_prev[11] !== r5_expected_prev[11] )
		&& ((r5_expected_prev[11] !== last_r5_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[11] = r5_expected_prev[11];
	end
	if (
		( r5_expected_prev[12] !== 1'bx ) && ( r5_prev[12] !== r5_expected_prev[12] )
		&& ((r5_expected_prev[12] !== last_r5_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[12] = r5_expected_prev[12];
	end
	if (
		( r5_expected_prev[13] !== 1'bx ) && ( r5_prev[13] !== r5_expected_prev[13] )
		&& ((r5_expected_prev[13] !== last_r5_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[13] = r5_expected_prev[13];
	end
	if (
		( r5_expected_prev[14] !== 1'bx ) && ( r5_prev[14] !== r5_expected_prev[14] )
		&& ((r5_expected_prev[14] !== last_r5_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[14] = r5_expected_prev[14];
	end
	if (
		( r5_expected_prev[15] !== 1'bx ) && ( r5_prev[15] !== r5_expected_prev[15] )
		&& ((r5_expected_prev[15] !== last_r5_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[15] = r5_expected_prev[15];
	end
	if (
		( r5_expected_prev[16] !== 1'bx ) && ( r5_prev[16] !== r5_expected_prev[16] )
		&& ((r5_expected_prev[16] !== last_r5_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[16] = r5_expected_prev[16];
	end
	if (
		( r5_expected_prev[17] !== 1'bx ) && ( r5_prev[17] !== r5_expected_prev[17] )
		&& ((r5_expected_prev[17] !== last_r5_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[17] = r5_expected_prev[17];
	end
	if (
		( r5_expected_prev[18] !== 1'bx ) && ( r5_prev[18] !== r5_expected_prev[18] )
		&& ((r5_expected_prev[18] !== last_r5_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[18] = r5_expected_prev[18];
	end
	if (
		( r5_expected_prev[19] !== 1'bx ) && ( r5_prev[19] !== r5_expected_prev[19] )
		&& ((r5_expected_prev[19] !== last_r5_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[19] = r5_expected_prev[19];
	end
	if (
		( r5_expected_prev[20] !== 1'bx ) && ( r5_prev[20] !== r5_expected_prev[20] )
		&& ((r5_expected_prev[20] !== last_r5_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[20] = r5_expected_prev[20];
	end
	if (
		( r5_expected_prev[21] !== 1'bx ) && ( r5_prev[21] !== r5_expected_prev[21] )
		&& ((r5_expected_prev[21] !== last_r5_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[21] = r5_expected_prev[21];
	end
	if (
		( r5_expected_prev[22] !== 1'bx ) && ( r5_prev[22] !== r5_expected_prev[22] )
		&& ((r5_expected_prev[22] !== last_r5_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[22] = r5_expected_prev[22];
	end
	if (
		( r5_expected_prev[23] !== 1'bx ) && ( r5_prev[23] !== r5_expected_prev[23] )
		&& ((r5_expected_prev[23] !== last_r5_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[23] = r5_expected_prev[23];
	end
	if (
		( r5_expected_prev[24] !== 1'bx ) && ( r5_prev[24] !== r5_expected_prev[24] )
		&& ((r5_expected_prev[24] !== last_r5_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[24] = r5_expected_prev[24];
	end
	if (
		( r5_expected_prev[25] !== 1'bx ) && ( r5_prev[25] !== r5_expected_prev[25] )
		&& ((r5_expected_prev[25] !== last_r5_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[25] = r5_expected_prev[25];
	end
	if (
		( r5_expected_prev[26] !== 1'bx ) && ( r5_prev[26] !== r5_expected_prev[26] )
		&& ((r5_expected_prev[26] !== last_r5_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[26] = r5_expected_prev[26];
	end
	if (
		( r5_expected_prev[27] !== 1'bx ) && ( r5_prev[27] !== r5_expected_prev[27] )
		&& ((r5_expected_prev[27] !== last_r5_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[27] = r5_expected_prev[27];
	end
	if (
		( r5_expected_prev[28] !== 1'bx ) && ( r5_prev[28] !== r5_expected_prev[28] )
		&& ((r5_expected_prev[28] !== last_r5_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[28] = r5_expected_prev[28];
	end
	if (
		( r5_expected_prev[29] !== 1'bx ) && ( r5_prev[29] !== r5_expected_prev[29] )
		&& ((r5_expected_prev[29] !== last_r5_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[29] = r5_expected_prev[29];
	end
	if (
		( r5_expected_prev[30] !== 1'bx ) && ( r5_prev[30] !== r5_expected_prev[30] )
		&& ((r5_expected_prev[30] !== last_r5_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[30] = r5_expected_prev[30];
	end
	if (
		( r5_expected_prev[31] !== 1'bx ) && ( r5_prev[31] !== r5_expected_prev[31] )
		&& ((r5_expected_prev[31] !== last_r5_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_r5_exp[31] = r5_expected_prev[31];
	end
	if (
		( r7_expected_prev[0] !== 1'bx ) && ( r7_prev[0] !== r7_expected_prev[0] )
		&& ((r7_expected_prev[0] !== last_r7_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[0] = r7_expected_prev[0];
	end
	if (
		( r7_expected_prev[1] !== 1'bx ) && ( r7_prev[1] !== r7_expected_prev[1] )
		&& ((r7_expected_prev[1] !== last_r7_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[1] = r7_expected_prev[1];
	end
	if (
		( r7_expected_prev[2] !== 1'bx ) && ( r7_prev[2] !== r7_expected_prev[2] )
		&& ((r7_expected_prev[2] !== last_r7_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[2] = r7_expected_prev[2];
	end
	if (
		( r7_expected_prev[3] !== 1'bx ) && ( r7_prev[3] !== r7_expected_prev[3] )
		&& ((r7_expected_prev[3] !== last_r7_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[3] = r7_expected_prev[3];
	end
	if (
		( r7_expected_prev[4] !== 1'bx ) && ( r7_prev[4] !== r7_expected_prev[4] )
		&& ((r7_expected_prev[4] !== last_r7_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[4] = r7_expected_prev[4];
	end
	if (
		( r7_expected_prev[5] !== 1'bx ) && ( r7_prev[5] !== r7_expected_prev[5] )
		&& ((r7_expected_prev[5] !== last_r7_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[5] = r7_expected_prev[5];
	end
	if (
		( r7_expected_prev[6] !== 1'bx ) && ( r7_prev[6] !== r7_expected_prev[6] )
		&& ((r7_expected_prev[6] !== last_r7_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[6] = r7_expected_prev[6];
	end
	if (
		( r7_expected_prev[7] !== 1'bx ) && ( r7_prev[7] !== r7_expected_prev[7] )
		&& ((r7_expected_prev[7] !== last_r7_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[7] = r7_expected_prev[7];
	end
	if (
		( r7_expected_prev[8] !== 1'bx ) && ( r7_prev[8] !== r7_expected_prev[8] )
		&& ((r7_expected_prev[8] !== last_r7_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[8] = r7_expected_prev[8];
	end
	if (
		( r7_expected_prev[9] !== 1'bx ) && ( r7_prev[9] !== r7_expected_prev[9] )
		&& ((r7_expected_prev[9] !== last_r7_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[9] = r7_expected_prev[9];
	end
	if (
		( r7_expected_prev[10] !== 1'bx ) && ( r7_prev[10] !== r7_expected_prev[10] )
		&& ((r7_expected_prev[10] !== last_r7_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[10] = r7_expected_prev[10];
	end
	if (
		( r7_expected_prev[11] !== 1'bx ) && ( r7_prev[11] !== r7_expected_prev[11] )
		&& ((r7_expected_prev[11] !== last_r7_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[11] = r7_expected_prev[11];
	end
	if (
		( r7_expected_prev[12] !== 1'bx ) && ( r7_prev[12] !== r7_expected_prev[12] )
		&& ((r7_expected_prev[12] !== last_r7_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[12] = r7_expected_prev[12];
	end
	if (
		( r7_expected_prev[13] !== 1'bx ) && ( r7_prev[13] !== r7_expected_prev[13] )
		&& ((r7_expected_prev[13] !== last_r7_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[13] = r7_expected_prev[13];
	end
	if (
		( r7_expected_prev[14] !== 1'bx ) && ( r7_prev[14] !== r7_expected_prev[14] )
		&& ((r7_expected_prev[14] !== last_r7_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[14] = r7_expected_prev[14];
	end
	if (
		( r7_expected_prev[15] !== 1'bx ) && ( r7_prev[15] !== r7_expected_prev[15] )
		&& ((r7_expected_prev[15] !== last_r7_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[15] = r7_expected_prev[15];
	end
	if (
		( r7_expected_prev[16] !== 1'bx ) && ( r7_prev[16] !== r7_expected_prev[16] )
		&& ((r7_expected_prev[16] !== last_r7_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[16] = r7_expected_prev[16];
	end
	if (
		( r7_expected_prev[17] !== 1'bx ) && ( r7_prev[17] !== r7_expected_prev[17] )
		&& ((r7_expected_prev[17] !== last_r7_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[17] = r7_expected_prev[17];
	end
	if (
		( r7_expected_prev[18] !== 1'bx ) && ( r7_prev[18] !== r7_expected_prev[18] )
		&& ((r7_expected_prev[18] !== last_r7_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[18] = r7_expected_prev[18];
	end
	if (
		( r7_expected_prev[19] !== 1'bx ) && ( r7_prev[19] !== r7_expected_prev[19] )
		&& ((r7_expected_prev[19] !== last_r7_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[19] = r7_expected_prev[19];
	end
	if (
		( r7_expected_prev[20] !== 1'bx ) && ( r7_prev[20] !== r7_expected_prev[20] )
		&& ((r7_expected_prev[20] !== last_r7_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[20] = r7_expected_prev[20];
	end
	if (
		( r7_expected_prev[21] !== 1'bx ) && ( r7_prev[21] !== r7_expected_prev[21] )
		&& ((r7_expected_prev[21] !== last_r7_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[21] = r7_expected_prev[21];
	end
	if (
		( r7_expected_prev[22] !== 1'bx ) && ( r7_prev[22] !== r7_expected_prev[22] )
		&& ((r7_expected_prev[22] !== last_r7_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[22] = r7_expected_prev[22];
	end
	if (
		( r7_expected_prev[23] !== 1'bx ) && ( r7_prev[23] !== r7_expected_prev[23] )
		&& ((r7_expected_prev[23] !== last_r7_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[23] = r7_expected_prev[23];
	end
	if (
		( r7_expected_prev[24] !== 1'bx ) && ( r7_prev[24] !== r7_expected_prev[24] )
		&& ((r7_expected_prev[24] !== last_r7_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[24] = r7_expected_prev[24];
	end
	if (
		( r7_expected_prev[25] !== 1'bx ) && ( r7_prev[25] !== r7_expected_prev[25] )
		&& ((r7_expected_prev[25] !== last_r7_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[25] = r7_expected_prev[25];
	end
	if (
		( r7_expected_prev[26] !== 1'bx ) && ( r7_prev[26] !== r7_expected_prev[26] )
		&& ((r7_expected_prev[26] !== last_r7_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[26] = r7_expected_prev[26];
	end
	if (
		( r7_expected_prev[27] !== 1'bx ) && ( r7_prev[27] !== r7_expected_prev[27] )
		&& ((r7_expected_prev[27] !== last_r7_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[27] = r7_expected_prev[27];
	end
	if (
		( r7_expected_prev[28] !== 1'bx ) && ( r7_prev[28] !== r7_expected_prev[28] )
		&& ((r7_expected_prev[28] !== last_r7_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[28] = r7_expected_prev[28];
	end
	if (
		( r7_expected_prev[29] !== 1'bx ) && ( r7_prev[29] !== r7_expected_prev[29] )
		&& ((r7_expected_prev[29] !== last_r7_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[29] = r7_expected_prev[29];
	end
	if (
		( r7_expected_prev[30] !== 1'bx ) && ( r7_prev[30] !== r7_expected_prev[30] )
		&& ((r7_expected_prev[30] !== last_r7_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[30] = r7_expected_prev[30];
	end
	if (
		( r7_expected_prev[31] !== 1'bx ) && ( r7_prev[31] !== r7_expected_prev[31] )
		&& ((r7_expected_prev[31] !== last_r7_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r7_exp[31] = r7_expected_prev[31];
	end
	if (
		( regwrite_expected_prev !== 1'bx ) && ( regwrite_prev !== regwrite_expected_prev )
		&& ((regwrite_expected_prev !== last_regwrite_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regwrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regwrite_expected_prev);
		$display ("     Real value = %b", regwrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_regwrite_exp = regwrite_expected_prev;
	end
	if (
		( wa3_expected_prev[0] !== 1'bx ) && ( wa3_prev[0] !== wa3_expected_prev[0] )
		&& ((wa3_expected_prev[0] !== last_wa3_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wa3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wa3_expected_prev);
		$display ("     Real value = %b", wa3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_wa3_exp[0] = wa3_expected_prev[0];
	end
	if (
		( wa3_expected_prev[1] !== 1'bx ) && ( wa3_prev[1] !== wa3_expected_prev[1] )
		&& ((wa3_expected_prev[1] !== last_wa3_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wa3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wa3_expected_prev);
		$display ("     Real value = %b", wa3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_wa3_exp[1] = wa3_expected_prev[1];
	end
	if (
		( wa3_expected_prev[2] !== 1'bx ) && ( wa3_prev[2] !== wa3_expected_prev[2] )
		&& ((wa3_expected_prev[2] !== last_wa3_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wa3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wa3_expected_prev);
		$display ("     Real value = %b", wa3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_wa3_exp[2] = wa3_expected_prev[2];
	end
	if (
		( wa3_expected_prev[3] !== 1'bx ) && ( wa3_prev[3] !== wa3_expected_prev[3] )
		&& ((wa3_expected_prev[3] !== last_wa3_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wa3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wa3_expected_prev);
		$display ("     Real value = %b", wa3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_wa3_exp[3] = wa3_expected_prev[3];
	end
	if (
		( wd3_expected_prev[0] !== 1'bx ) && ( wd3_prev[0] !== wd3_expected_prev[0] )
		&& ((wd3_expected_prev[0] !== last_wd3_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[0] = wd3_expected_prev[0];
	end
	if (
		( wd3_expected_prev[1] !== 1'bx ) && ( wd3_prev[1] !== wd3_expected_prev[1] )
		&& ((wd3_expected_prev[1] !== last_wd3_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[1] = wd3_expected_prev[1];
	end
	if (
		( wd3_expected_prev[2] !== 1'bx ) && ( wd3_prev[2] !== wd3_expected_prev[2] )
		&& ((wd3_expected_prev[2] !== last_wd3_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[2] = wd3_expected_prev[2];
	end
	if (
		( wd3_expected_prev[3] !== 1'bx ) && ( wd3_prev[3] !== wd3_expected_prev[3] )
		&& ((wd3_expected_prev[3] !== last_wd3_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[3] = wd3_expected_prev[3];
	end
	if (
		( wd3_expected_prev[4] !== 1'bx ) && ( wd3_prev[4] !== wd3_expected_prev[4] )
		&& ((wd3_expected_prev[4] !== last_wd3_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[4] = wd3_expected_prev[4];
	end
	if (
		( wd3_expected_prev[5] !== 1'bx ) && ( wd3_prev[5] !== wd3_expected_prev[5] )
		&& ((wd3_expected_prev[5] !== last_wd3_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[5] = wd3_expected_prev[5];
	end
	if (
		( wd3_expected_prev[6] !== 1'bx ) && ( wd3_prev[6] !== wd3_expected_prev[6] )
		&& ((wd3_expected_prev[6] !== last_wd3_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[6] = wd3_expected_prev[6];
	end
	if (
		( wd3_expected_prev[7] !== 1'bx ) && ( wd3_prev[7] !== wd3_expected_prev[7] )
		&& ((wd3_expected_prev[7] !== last_wd3_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[7] = wd3_expected_prev[7];
	end
	if (
		( wd3_expected_prev[8] !== 1'bx ) && ( wd3_prev[8] !== wd3_expected_prev[8] )
		&& ((wd3_expected_prev[8] !== last_wd3_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[8] = wd3_expected_prev[8];
	end
	if (
		( wd3_expected_prev[9] !== 1'bx ) && ( wd3_prev[9] !== wd3_expected_prev[9] )
		&& ((wd3_expected_prev[9] !== last_wd3_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[9] = wd3_expected_prev[9];
	end
	if (
		( wd3_expected_prev[10] !== 1'bx ) && ( wd3_prev[10] !== wd3_expected_prev[10] )
		&& ((wd3_expected_prev[10] !== last_wd3_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[10] = wd3_expected_prev[10];
	end
	if (
		( wd3_expected_prev[11] !== 1'bx ) && ( wd3_prev[11] !== wd3_expected_prev[11] )
		&& ((wd3_expected_prev[11] !== last_wd3_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[11] = wd3_expected_prev[11];
	end
	if (
		( wd3_expected_prev[12] !== 1'bx ) && ( wd3_prev[12] !== wd3_expected_prev[12] )
		&& ((wd3_expected_prev[12] !== last_wd3_exp[12]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[12] = wd3_expected_prev[12];
	end
	if (
		( wd3_expected_prev[13] !== 1'bx ) && ( wd3_prev[13] !== wd3_expected_prev[13] )
		&& ((wd3_expected_prev[13] !== last_wd3_exp[13]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[13] = wd3_expected_prev[13];
	end
	if (
		( wd3_expected_prev[14] !== 1'bx ) && ( wd3_prev[14] !== wd3_expected_prev[14] )
		&& ((wd3_expected_prev[14] !== last_wd3_exp[14]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[14] = wd3_expected_prev[14];
	end
	if (
		( wd3_expected_prev[15] !== 1'bx ) && ( wd3_prev[15] !== wd3_expected_prev[15] )
		&& ((wd3_expected_prev[15] !== last_wd3_exp[15]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[15] = wd3_expected_prev[15];
	end
	if (
		( wd3_expected_prev[16] !== 1'bx ) && ( wd3_prev[16] !== wd3_expected_prev[16] )
		&& ((wd3_expected_prev[16] !== last_wd3_exp[16]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[16] = wd3_expected_prev[16];
	end
	if (
		( wd3_expected_prev[17] !== 1'bx ) && ( wd3_prev[17] !== wd3_expected_prev[17] )
		&& ((wd3_expected_prev[17] !== last_wd3_exp[17]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[17] = wd3_expected_prev[17];
	end
	if (
		( wd3_expected_prev[18] !== 1'bx ) && ( wd3_prev[18] !== wd3_expected_prev[18] )
		&& ((wd3_expected_prev[18] !== last_wd3_exp[18]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[18] = wd3_expected_prev[18];
	end
	if (
		( wd3_expected_prev[19] !== 1'bx ) && ( wd3_prev[19] !== wd3_expected_prev[19] )
		&& ((wd3_expected_prev[19] !== last_wd3_exp[19]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[19] = wd3_expected_prev[19];
	end
	if (
		( wd3_expected_prev[20] !== 1'bx ) && ( wd3_prev[20] !== wd3_expected_prev[20] )
		&& ((wd3_expected_prev[20] !== last_wd3_exp[20]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[20] = wd3_expected_prev[20];
	end
	if (
		( wd3_expected_prev[21] !== 1'bx ) && ( wd3_prev[21] !== wd3_expected_prev[21] )
		&& ((wd3_expected_prev[21] !== last_wd3_exp[21]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[21] = wd3_expected_prev[21];
	end
	if (
		( wd3_expected_prev[22] !== 1'bx ) && ( wd3_prev[22] !== wd3_expected_prev[22] )
		&& ((wd3_expected_prev[22] !== last_wd3_exp[22]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[22] = wd3_expected_prev[22];
	end
	if (
		( wd3_expected_prev[23] !== 1'bx ) && ( wd3_prev[23] !== wd3_expected_prev[23] )
		&& ((wd3_expected_prev[23] !== last_wd3_exp[23]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[23] = wd3_expected_prev[23];
	end
	if (
		( wd3_expected_prev[24] !== 1'bx ) && ( wd3_prev[24] !== wd3_expected_prev[24] )
		&& ((wd3_expected_prev[24] !== last_wd3_exp[24]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[24] = wd3_expected_prev[24];
	end
	if (
		( wd3_expected_prev[25] !== 1'bx ) && ( wd3_prev[25] !== wd3_expected_prev[25] )
		&& ((wd3_expected_prev[25] !== last_wd3_exp[25]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[25] = wd3_expected_prev[25];
	end
	if (
		( wd3_expected_prev[26] !== 1'bx ) && ( wd3_prev[26] !== wd3_expected_prev[26] )
		&& ((wd3_expected_prev[26] !== last_wd3_exp[26]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[26] = wd3_expected_prev[26];
	end
	if (
		( wd3_expected_prev[27] !== 1'bx ) && ( wd3_prev[27] !== wd3_expected_prev[27] )
		&& ((wd3_expected_prev[27] !== last_wd3_exp[27]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[27] = wd3_expected_prev[27];
	end
	if (
		( wd3_expected_prev[28] !== 1'bx ) && ( wd3_prev[28] !== wd3_expected_prev[28] )
		&& ((wd3_expected_prev[28] !== last_wd3_exp[28]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[28] = wd3_expected_prev[28];
	end
	if (
		( wd3_expected_prev[29] !== 1'bx ) && ( wd3_prev[29] !== wd3_expected_prev[29] )
		&& ((wd3_expected_prev[29] !== last_wd3_exp[29]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[29] = wd3_expected_prev[29];
	end
	if (
		( wd3_expected_prev[30] !== 1'bx ) && ( wd3_prev[30] !== wd3_expected_prev[30] )
		&& ((wd3_expected_prev[30] !== last_wd3_exp[30]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[30] = wd3_expected_prev[30];
	end
	if (
		( wd3_expected_prev[31] !== 1'bx ) && ( wd3_prev[31] !== wd3_expected_prev[31] )
		&& ((wd3_expected_prev[31] !== last_wd3_exp[31]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wd3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wd3_expected_prev);
		$display ("     Real value = %b", wd3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_wd3_exp[31] = wd3_expected_prev[31];
	end
	if (
		( zeroflag_expected_prev !== 1'bx ) && ( zeroflag_prev !== zeroflag_expected_prev )
		&& ((zeroflag_expected_prev !== last_zeroflag_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zeroflag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zeroflag_expected_prev);
		$display ("     Real value = %b", zeroflag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_zeroflag_exp = zeroflag_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module singlecyclearm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [31:0] aluout;
wire [31:0] cikaninstruction;
wire [31:0] extendout;
wire nowrite;
wire ortaregwrite;
wire [31:0] pcoutadress;
wire [31:0] r2;
wire [31:0] r3;
wire [31:0] r4;
wire [31:0] r5;
wire [31:0] r7;
wire regwrite;
wire [3:0] wa3;
wire [31:0] wd3;
wire zeroflag;

wire sampler;                             

// assign statements (if any)                          
singlecyclearm i1 (
// port map - connection between master ports and signals/registers   
	.aluout(aluout),
	.cikaninstruction(cikaninstruction),
	.clk(clk),
	.extendout(extendout),
	.nowrite(nowrite),
	.ortaregwrite(ortaregwrite),
	.pcoutadress(pcoutadress),
	.r2(r2),
	.r3(r3),
	.r4(r4),
	.r5(r5),
	.r7(r7),
	.regwrite(regwrite),
	.wa3(wa3),
	.wd3(wd3),
	.zeroflag(zeroflag)
);

// clk
initial
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	# 25000;
	repeat(19)
	begin
		clk = 1'b0;
		clk = #25000 1'b1;
		# 25000;
	end
end 

singlecyclearm_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

singlecyclearm_vlg_check_tst tb_out(
	.aluout(aluout),
	.cikaninstruction(cikaninstruction),
	.extendout(extendout),
	.nowrite(nowrite),
	.ortaregwrite(ortaregwrite),
	.pcoutadress(pcoutadress),
	.r2(r2),
	.r3(r3),
	.r4(r4),
	.r5(r5),
	.r7(r7),
	.regwrite(regwrite),
	.wa3(wa3),
	.wd3(wd3),
	.zeroflag(zeroflag),
	.sampler_rx(sampler)
);
endmodule

