


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ******** 
    2 00000000         ; save_ship.s  
    3 00000000         ; This program gets (X,Y) coordinates from R11 and R12. 
                       
    4 00000000         ; Saves the shape of the ship to the memory on (X,Y).
    5 00000000         ;*******************************************************
                       ******** 
    6 00000000         ;*******************************************************
                       ******** 
    7 00000000         ; EQU Directives
    8 00000000         ; These directives do not allocate memory
    9 00000000         ;*******************************************************
                       ********
   10 00000000         ;LABEL   DIRECTIVE VALUE  COMMENT
   11 00000000 40004100 
                       DC      EQU              0x40004100
   12 00000000 4000800C 
                       SSI0_SR_R
                               EQU              0x4000800C
   13 00000000 40008008 
                       SSI0_DR_R
                               EQU              0x40008008
   14 00000000 00000087 
                       X       EQU              0x87
   15 00000000 00000041 
                       Y       EQU              0x41
   16 00000000 20000400 
                       memory  EQU              0x20000400
   17 00000000 20000500 
                       offset_memory
                               EQU              0x20000500
   18 00000000         ;*******************************************************
                       ********
   19 00000000         ; Program section           
   20 00000000         ;*******************************************************
                       ********
   21 00000000         ;LABEL   DIRECTIVE VALUE     COMMENT
   22 00000000                 AREA             main, READONLY, CODE
   23 00000000                 THUMB
   24 00000000                 EXPORT           save_ship   ; Make available
   25 00000000         
   26 00000000         save_ship
   27 00000000 E92D 5FFF       PUSH             {R0-R12,LR}
   28 00000004         
   29 00000004 F248 000C 
              F2C4 0000 
                       resetX  MOV32            R0, SSI0_SR_R
   30 0000000C 6801            LDR              R1, [R0]
   31 0000000E F001 0110       AND              R1, #0x10
   32 00000012 2910            CMP              R1, #0x10
   33 00000014 D0F6            BEQ              resetX
   34 00000016 F244 1000 
              F2C4 0000        MOV32            R0, DC      ;dc_command  
   35 0000001E F04F 0100       MOV              R1, #0
   36 00000022 6001            STR              R1, [R0]
   37 00000024         ; sent
   38 00000024 F248 0008 
              F2C4 0000        MOV32            R0, SSI0_DR_R



ARM Macro Assembler    Page 2 


   39 0000002C F04F 0186       MOV              R1, #0x86   ; CURSOR RESET X=6
   40 00000030 6001            STR              R1, [R0]
   41 00000032 F248 000C 
              F2C4 0000        MOV32            R0, SSI0_SR_R
   42 0000003A 6801    resetY  LDR              R1, [R0]
   43 0000003C F001 0110       AND              R1, #0x10
   44 00000040 2910            CMP              R1, #0x10
   45 00000042 D0FA            BEQ              resetY
   46 00000044 F04F 0141       MOV              R1, #0x41   ;  CURSOR RESET Y=1
                                                            
   47 00000048 6001            STR              R1, [R0]
   48 0000004A         
   49 0000004A F244 1000 
              F2C4 0000        MOV32            R0, DC      ;dc_command  
   50 00000052 F04F 0140       MOV              R1, #0x40   ; screen update
   51 00000056 6001            STR              R1, [R0]
   52 00000058         
   53 00000058 F240 4200 
              F2C2 0200        MOV32            R2, memory
   54 00000060 F240 5400 
              F2C2 0400        MOV32            R4, offset_memory
   55 00000068 F04F 0500       MOV              R5, #0      ; for loop = 64  
   56 0000006C F04F 0604       MOV              R6, #4      ; change Y
   57 00000070         
   58 00000070 F812 3B01 
                       from_memory
                               LDRB             R3, [R2], #1 ; R3 holds the mem
                                                            ory value
   59 00000074         
   60 00000074         
   61 00000074 F248 000C 
              F2C4 0000 
                       display MOV32            R0, SSI0_SR_R
   62 0000007C 6801            LDR              R1, [R0]
   63 0000007E F001 0110       AND              R1, #0x10
   64 00000082 2910            CMP              R1, #0x10
   65 00000084 D0F6            BEQ              display
   66 00000086         ; sent
   67 00000086 F248 0008 
              F2C4 0000        MOV32            R0, SSI0_DR_R
   68 0000008E         ;MVN R3, R3
   69 0000008E 6003            STR              R3, [R0]    ; R3 value => scree
                                                            n 
   70 00000090 F105 0501       ADD              R5, #1      ; memory++
   71 00000094 2D40            CMP              R5, #64     ; memory 64 check
   72 00000096 D1EB            BNE              from_memory
   73 00000098 F04F 0500       MOV              R5, #0
   74 0000009C         
   75 0000009C 42A2            CMP              R2, R4      ; memory check in o
                                                            rder to be done
   76 0000009E D056            BEQ              finish
   77 000000A0 F1A6 0601       SUB              R6, #1
   78 000000A4 2E02            CMP              R6, #2
   79 000000A6 D801            BHI              Y2
   80 000000A8 D01B            BEQ              Y3
   81 000000AA D335            BLO              Y4
   82 000000AC         
   83 000000AC F248 000C 
              F2C4 0000 



ARM Macro Assembler    Page 3 


                       Y2      MOV32            R0, SSI0_SR_R
   84 000000B4 6801            LDR              R1, [R0]
   85 000000B6 F001 0110       AND              R1, #0x10
   86 000000BA 2910            CMP              R1, #0x10
   87 000000BC D0F6            BEQ              Y2
   88 000000BE F244 1000 
              F2C4 0000        MOV32            R0, DC      ;dc_command  
   89 000000C6 F04F 0100       MOV              R1, #0
   90 000000CA 6001            STR              R1, [R0]
   91 000000CC         ; sent
   92 000000CC F248 0008 
              F2C4 0000        MOV32            R0, SSI0_DR_R
   93 000000D4 F04F 0186       MOV              R1, #0x86   ; CURSOR RESET X=6
   94 000000D8 6001            STR              R1, [R0]
   95 000000DA F04F 0142       MOV              R1, #0x42   ;  CURSOR RESET Y=2
                                                            
   96 000000DE 6001            STR              R1, [R0]
   97 000000E0 E7C6            B                from_memory
   98 000000E2         
   99 000000E2 F248 000C 
              F2C4 0000 
                       Y3      MOV32            R0, SSI0_SR_R
  100 000000EA 6801            LDR              R1, [R0]
  101 000000EC F001 0110       AND              R1, #0x10
  102 000000F0 2910            CMP              R1, #0x10
  103 000000F2 D0F6            BEQ              Y3
  104 000000F4 F244 1000 
              F2C4 0000        MOV32            R0, DC      ;dc_command  
  105 000000FC F04F 0100       MOV              R1, #0
  106 00000100 6001            STR              R1, [R0]
  107 00000102         ; sent
  108 00000102 F248 0008 
              F2C4 0000        MOV32            R0, SSI0_DR_R
  109 0000010A F04F 0186       MOV              R1, #0x86   ; CURSOR RESET X=6
  110 0000010E 6001            STR              R1, [R0]
  111 00000110 F04F 0143       MOV              R1, #0x43   ;  CURSOR RESET Y=3
                                                            
  112 00000114 6001            STR              R1, [R0]
  113 00000116 E7AB            B                from_memory
  114 00000118         
  115 00000118 F248 000C 
              F2C4 0000 
                       Y4      MOV32            R0, SSI0_SR_R
  116 00000120 6801            LDR              R1, [R0]
  117 00000122 F001 0110       AND              R1, #0x10
  118 00000126 2910            CMP              R1, #0x10
  119 00000128 D0F6            BEQ              Y4
  120 0000012A F244 1000 
              F2C4 0000        MOV32            R0, DC      ;dc_command  
  121 00000132 F04F 0100       MOV              R1, #0
  122 00000136 6001            STR              R1, [R0]
  123 00000138         ; sent
  124 00000138 F248 0008 
              F2C4 0000        MOV32            R0, SSI0_DR_R
  125 00000140 F04F 0186       MOV              R1, #0x86   ; CURSOR RESET X=6
  126 00000144 6001            STR              R1, [R0]
  127 00000146 F04F 0144       MOV              R1, #0x44   ;  CURSOR RESET Y=4
                                                            
  128 0000014A 6001            STR              R1, [R0]



ARM Macro Assembler    Page 4 


  129 0000014C E790            B                from_memory
  130 0000014E         
  131 0000014E E8BD 5FFF 
                       finish  POP              {R0-R12,LR}
  132 00000152 4770            BX               LR
  133 00000154         
  134 00000154                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\save_ship.d -o.\objects\save_ship.o -I.\RTE\_Target_1
 -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -IC:\Keil_v5\
ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SE
TA 526" --predefine="TM4C123GH6PM SETA 1" --list=.\listings\save_ship.lst save_
ship.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Y2 000000AC

Symbol: Y2
   Definitions
      At line 83 in file save_ship.s
   Uses
      At line 79 in file save_ship.s
      At line 87 in file save_ship.s

Y3 000000E2

Symbol: Y3
   Definitions
      At line 99 in file save_ship.s
   Uses
      At line 80 in file save_ship.s
      At line 103 in file save_ship.s

Y4 00000118

Symbol: Y4
   Definitions
      At line 115 in file save_ship.s
   Uses
      At line 81 in file save_ship.s
      At line 119 in file save_ship.s

display 00000074

Symbol: display
   Definitions
      At line 61 in file save_ship.s
   Uses
      At line 65 in file save_ship.s
Comment: display used once
finish 0000014E

Symbol: finish
   Definitions
      At line 131 in file save_ship.s
   Uses
      At line 76 in file save_ship.s
Comment: finish used once
from_memory 00000070

Symbol: from_memory
   Definitions
      At line 58 in file save_ship.s
   Uses
      At line 72 in file save_ship.s
      At line 97 in file save_ship.s
      At line 113 in file save_ship.s
      At line 129 in file save_ship.s

main 00000000

Symbol: main
   Definitions
      At line 22 in file save_ship.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: main unused
resetX 00000004

Symbol: resetX
   Definitions
      At line 29 in file save_ship.s
   Uses
      At line 33 in file save_ship.s
Comment: resetX used once
resetY 0000003A

Symbol: resetY
   Definitions
      At line 42 in file save_ship.s
   Uses
      At line 45 in file save_ship.s
Comment: resetY used once
save_ship 00000000

Symbol: save_ship
   Definitions
      At line 26 in file save_ship.s
   Uses
      At line 24 in file save_ship.s
Comment: save_ship used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DC 40004100

Symbol: DC
   Definitions
      At line 11 in file save_ship.s
   Uses
      At line 34 in file save_ship.s
      At line 49 in file save_ship.s
      At line 88 in file save_ship.s
      At line 104 in file save_ship.s
      At line 120 in file save_ship.s

SSI0_DR_R 40008008

Symbol: SSI0_DR_R
   Definitions
      At line 13 in file save_ship.s
   Uses
      At line 38 in file save_ship.s
      At line 67 in file save_ship.s
      At line 92 in file save_ship.s
      At line 108 in file save_ship.s
      At line 124 in file save_ship.s

SSI0_SR_R 4000800C

Symbol: SSI0_SR_R
   Definitions
      At line 12 in file save_ship.s
   Uses
      At line 29 in file save_ship.s
      At line 41 in file save_ship.s
      At line 61 in file save_ship.s
      At line 83 in file save_ship.s
      At line 99 in file save_ship.s
      At line 115 in file save_ship.s

X 00000087

Symbol: X
   Definitions
      At line 14 in file save_ship.s
   Uses
      None
Comment: X unused
Y 00000041

Symbol: Y
   Definitions
      At line 15 in file save_ship.s
   Uses
      None
Comment: Y unused
memory 20000400

Symbol: memory
   Definitions
      At line 16 in file save_ship.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 53 in file save_ship.s
Comment: memory used once
offset_memory 20000500

Symbol: offset_memory
   Definitions
      At line 17 in file save_ship.s
   Uses
      At line 54 in file save_ship.s
Comment: offset_memory used once
7 symbols
351 symbols in table
